<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Producer" content="Mac OS X 10.11.2 Quartz PDFContext">
<meta name="CreationDate" content="D:20160517040955Z00&#39;00&#39;">
<meta name="ModDate" content="D:20160517040955Z00&#39;00&#39;">
<meta name="Creator" content="Adam Wathan">
<meta name="Author" content="Adam Wathan">
<meta name="Title" content="Refactoring to Collections">
<title>Refactoring to Collections</title>
<style type="text/css">
body {
    font-family:Helvetica;
}
@media all {
    .pdf-page-break { display: none; }
}

@media print {
    .pdf-page-break { display: block; page-break-before: always; }
}
</style>
</head>
<body bgcolor=#ffffff vlink="blue" link="blue">

<div style="position:absolute;top:175;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=3><b>Page 3</b></a></font></td></tr></table></div>
<font size=5 face="Times"><span style="font-size:34px;">
<div style="position:absolute;top:321;left:108"><nobr><b>Contents</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:486;left:108"><nobr><b><a href="#7">A Bit of Theory    </a></b></nobr></div>
<div style="position:absolute;top:486;left:641"><nobr><b><a href="#7">7</a></b></nobr></div>
<div style="position:absolute;top:513;left:135"><nobr><a href="#7">Imperative vs. Declarative Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7</a></nobr></div>
<div style="position:absolute;top:540;left:162"><nobr><a href="#7">Imperative Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7</a></nobr></div>
<div style="position:absolute;top:567;left:162"><nobr><a href="#9">Declarative Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9</a></nobr></div>
<div style="position:absolute;top:594;left:135"><nobr><a href="#9">Higher Order Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9</a></nobr></div>
<div style="position:absolute;top:621;left:162"><nobr><a href="#10">Noticing Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10</a></nobr></div>
<div style="position:absolute;top:648;left:135"><nobr><a href="#15">Functional Building Blocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15</a></nobr></div>
<div style="position:absolute;top:675;left:162"><nobr><a href="#15">Each. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15</a></nobr></div>
<div style="position:absolute;top:702;left:162"><nobr><a href="#17">Map . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17</a></nobr></div>
<div style="position:absolute;top:729;left:162"><nobr><a href="#19">Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19</a></nobr></div>
<div style="position:absolute;top:756;left:162"><nobr><a href="#23">Reduce . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23</a></nobr></div>
<div style="position:absolute;top:783;left:135"><nobr><a href="#31">Transforming Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31</a></nobr></div>
<div style="position:absolute;top:810;left:162"><nobr><a href="#33">Thinking in Steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33</a></nobr></div>
<div style="position:absolute;top:837;left:162"><nobr><a href="#35">The Problem with Primitives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35</a></nobr></div>
<div style="position:absolute;top:864;left:162"><nobr><a href="#37">Arrays as Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37</a></nobr></div>
<div style="position:absolute;top:891;left:135"><nobr><a href="#38">Introducing Collections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38</a></nobr></div>
<div style="position:absolute;top:918;left:162"><nobr><a href="#40">A Note on Mutability. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40</a></nobr></div>
<div style="position:absolute;top:945;left:162"><nobr><a href="#42">Quacking Like... an Array? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42</a></nobr></div>
<div style="position:absolute;top:972;left:162"><nobr><a href="#49">The Golden Rule of Collection Programming . . . . . . . . . . . . . . . . . . . 49</a></nobr></div>
</span></font>

<div style="position:absolute;top:1147;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=4><b>Page 4</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:1260;left:108"><nobr><b><a href="#51">A Lot of Practice    </a></b></nobr></div>
<div style="position:absolute;top:1260;left:634"><nobr><b><a href="#51">51</a></b></nobr></div>
<div style="position:absolute;top:1287;left:135"><nobr><a href="#52">Pricing Lamps and Wallets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52</a></nobr></div>
<div style="position:absolute;top:1314;left:162"><nobr><a href="#54">Replace Conditional with Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54</a></nobr></div>
<div style="position:absolute;top:1341;left:162"><nobr><a href="#55">Replace || with Contains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55</a></nobr></div>
<div style="position:absolute;top:1368;left:162"><nobr><a href="#56">Reduce to Sum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56</a></nobr></div>
<div style="position:absolute;top:1395;left:162"><nobr><a href="#58">Replace Nested Loop with FlatMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58</a></nobr></div>
<div style="position:absolute;top:1422;left:162"><nobr><a href="#61">Plucking for Fun and Profit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61</a></nobr></div>
<div style="position:absolute;top:1449;left:135"><nobr><a href="#62">CSV Surgery 101. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62</a></nobr></div>
<div style="position:absolute;top:1476;left:162"><nobr><a href="#65">Everything is Better as a Collection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65</a></nobr></div>
<div style="position:absolute;top:1503;left:135"><nobr><a href="#67">Binary to Decimal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67</a></nobr></div>
<div style="position:absolute;top:1530;left:162"><nobr><a href="#67">A Quick Refresher . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67</a></nobr></div>
<div style="position:absolute;top:1557;left:162"><nobr><a href="#67">Using a For Loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67</a></nobr></div>
<div style="position:absolute;top:1584;left:162"><nobr><a href="#68">Breaking It Down . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68</a></nobr></div>
<div style="position:absolute;top:1611;left:162"><nobr><a href="#69">Reversing the Collection. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69</a></nobr></div>
<div style="position:absolute;top:1638;left:162"><nobr><a href="#70">Mapping with Keys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70</a></nobr></div>
<div style="position:absolute;top:1665;left:135"><nobr><a href="#72">What's Your GitHub Score? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72</a></nobr></div>
<div style="position:absolute;top:1692;left:162"><nobr><a href="#73">Loops and Conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73</a></nobr></div>
<div style="position:absolute;top:1719;left:162"><nobr><a href="#74">Replace Collecting Loop with Pluck . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74</a></nobr></div>
<div style="position:absolute;top:1746;left:162"><nobr><a href="#76">Extract Score Conversion with Map . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76</a></nobr></div>
<div style="position:absolute;top:1773;left:162"><nobr><a href="#78">Replace Switch with Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78</a></nobr></div>
<div style="position:absolute;top:1800;left:162"><nobr><a href="#79">Associative Collections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79</a></nobr></div>
<div style="position:absolute;top:1827;left:162"><nobr><a href="#82">Extracting Helper Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82</a></nobr></div>
<div style="position:absolute;top:1854;left:162"><nobr><a href="#83">Encapsulating in a Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83</a></nobr></div>
<div style="position:absolute;top:1881;left:135"><nobr><a href="#86">Formatting a Pull Request Comment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86</a></nobr></div>
<div style="position:absolute;top:1908;left:162"><nobr><a href="#87">Concatenating in a Loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87</a></nobr></div>
<div style="position:absolute;top:1935;left:162"><nobr><a href="#87">Map and Implode. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87</a></nobr></div>
<div style="position:absolute;top:1962;left:135"><nobr><a href="#88">Stealing Mail. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88</a></nobr></div>
<div style="position:absolute;top:1989;left:162"><nobr><a href="#90">Replace Nested Check with Contains . . . . . . . . . . . . . . . . . . . . . . . . . . . 90</a></nobr></div>
</span></font>

<div style="position:absolute;top:2119;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=5><b>Page 5</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:2232;left:162"><nobr><a href="#91">Contains as a Higher Order Function . . . . . . . . . . . . . . . . . . . . . . . . . . . 91</a></nobr></div>
<div style="position:absolute;top:2259;left:135"><nobr><a href="#94">Choosing a Syntax Handler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94</a></nobr></div>
<div style="position:absolute;top:2286;left:162"><nobr><a href="#95">Looking for a Match . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95</a></nobr></div>
<div style="position:absolute;top:2313;left:162"><nobr><a href="#96">Getting the Right Checker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96</a></nobr></div>
<div style="position:absolute;top:2340;left:162"><nobr><a href="#97">Replace Iteration with First . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97</a></nobr></div>
<div style="position:absolute;top:2367;left:162"><nobr><a href="#98">A Hidden Rule. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98</a></nobr></div>
<div style="position:absolute;top:2394;left:162"><nobr><a href="#99">Providing a Default . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99</a></nobr></div>
<div style="position:absolute;top:2421;left:162"><nobr><a href="#100">The Null Object Pattern . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100</a></nobr></div>
<div style="position:absolute;top:2448;left:162"><nobr><a href="#101">The Null Checker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101</a></nobr></div>
<div style="position:absolute;top:2475;left:135"><nobr><a href="#104">Tagging on the Fly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104</a></nobr></div>
<div style="position:absolute;top:2502;left:162"><nobr><a href="#105">Extracting the Loop. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105</a></nobr></div>
<div style="position:absolute;top:2529;left:162"><nobr><a href="#107">Normalizing with Map . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107</a></nobr></div>
<div style="position:absolute;top:2556;left:135"><nobr><a href="#109">Nitpicking a Pull Request . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109</a></nobr></div>
<div style="position:absolute;top:2583;left:162"><nobr><a href="#110">A Fork in the Code. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110</a></nobr></div>
<div style="position:absolute;top:2610;left:162"><nobr><a href="#111">Learning from Smalltalk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111</a></nobr></div>
<div style="position:absolute;top:2637;left:162"><nobr><a href="#113">Collection Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113</a></nobr></div>
<div style="position:absolute;top:2664;left:162"><nobr><a href="#114">Chainable Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114</a></nobr></div>
<div style="position:absolute;top:2691;left:135"><nobr><a href="#117">Comparing Monthly Revenue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117</a></nobr></div>
<div style="position:absolute;top:2718;left:162"><nobr><a href="#118">Matching on Index. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118</a></nobr></div>
<div style="position:absolute;top:2745;left:162"><nobr><a href="#119">Zipping Things Together . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119</a></nobr></div>
<div style="position:absolute;top:2772;left:162"><nobr><a href="#119">Using Zip to Compare. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119</a></nobr></div>
<div style="position:absolute;top:2799;left:135"><nobr><a href="#121">Transposing Form Input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121</a></nobr></div>
<div style="position:absolute;top:2826;left:162"><nobr><a href="#125">Quick and Dirty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125</a></nobr></div>
<div style="position:absolute;top:2853;left:162"><nobr><a href="#126">Identifying a Need . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126</a></nobr></div>
<div style="position:absolute;top:2880;left:162"><nobr><a href="#128">Introducing Transpose . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128</a></nobr></div>
<div style="position:absolute;top:2907;left:162"><nobr><a href="#130">Implementing Transpose . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130</a></nobr></div>
<div style="position:absolute;top:2934;left:162"><nobr><a href="#130">Transpose in Practice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130</a></nobr></div>
</span></font>

<div style="position:absolute;top:3091;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=6><b>Page 6</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:3204;left:135"><nobr><a href="#132">Ranking a Competition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132</a></nobr></div>
<div style="position:absolute;top:3231;left:162"><nobr><a href="#134">Zipping-in the Ranks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134</a></nobr></div>
<div style="position:absolute;top:3258;left:162"><nobr><a href="#135">Dealing with Ties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135</a></nobr></div>
<div style="position:absolute;top:3285;left:162"><nobr><a href="#136">One Step at a Time . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136</a></nobr></div>
<div style="position:absolute;top:3312;left:162"><nobr><a href="#137">Grouping by Score. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137</a></nobr></div>
<div style="position:absolute;top:3339;left:162"><nobr><a href="#139">Adjusting the Ranks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139</a></nobr></div>
<div style="position:absolute;top:3366;left:162"><nobr><a href="#142">Collapse and Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142</a></nobr></div>
<div style="position:absolute;top:3393;left:162"><nobr><a href="#144">Cleaning Up. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144</a></nobr></div>
<div style="position:absolute;top:3420;left:162"><nobr><a href="#147">Grouping Operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147</a></nobr></div>
<div style="position:absolute;top:3447;left:162"><nobr><a href="#148">Breaking the Chain . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148</a></nobr></div>
<div style="position:absolute;top:3474;left:162"><nobr><a href="#149">The Pipe Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149</a></nobr></div>
<div style="position:absolute;top:3501;left:108"><nobr><b><a href="#152">Afterword</a></b></nobr></div>
<div style="position:absolute;top:3501;left:625"><nobr><b><a href="#152">152</a></b></nobr></div>
</span></font>

<div style="position:absolute;top:4063;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=7><b>Page 7</b></a></font></td></tr></table></div><font size=5 face="Times"><span style="font-size:34px;">
<div style="position:absolute;top:4209;left:108"><nobr><b>A Bit of Theory</b></nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:4335;left:108"><nobr><b>Imperative vs. Declarative Programming</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:4382;left:108"><nobr>You've probably heard the terms imperative (or procedural) and declarative</nobr></div>
<div style="position:absolute;top:4402;left:108"><nobr>programming before, and if you're anything like me, went looking for a precise</nobr></div>
<div style="position:absolute;top:4423;left:108"><nobr>definition of the two only to find some vague hand wavy descriptions that</nobr></div>
<div style="position:absolute;top:4443;left:108"><nobr>didn't give you any concrete answers.</nobr></div>
<div style="position:absolute;top:4477;left:108"><nobr>Over time I've realized that this is because it really isn't black or white. Code</nobr></div>
<div style="position:absolute;top:4497;left:108"><nobr>snippet A can be <i>more </i>declarative than code snippet B, but maybe code snippet</nobr></div>
<div style="position:absolute;top:4517;left:108"><nobr>C is even more declarative than code snippet A.</nobr></div>
<div style="position:absolute;top:4551;left:108"><nobr>Here's my best shot at explaining how I think about imperative and declarative</nobr></div>
<div style="position:absolute;top:4571;left:108"><nobr>programming.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:4618;left:108"><nobr><b>Imperative Programming</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:4659;left:108"><nobr>Imperative programming is a style of programming that focuses on <i>how</i></nobr></div>
<div style="position:absolute;top:4679;left:108"><nobr>something gets done. The code is usually overly concerned with building</nobr></div>
<div style="position:absolute;top:4699;left:108"><nobr>results in intermediate variables and managing control Now with loops and</nobr></div>
<div style="position:absolute;top:4720;left:108"><nobr>conditional statements.</nobr></div>
<div style="position:absolute;top:4753;left:108"><nobr>Say we have a list of users and we want to fetch the email addresses of all users</nobr></div>
<div style="position:absolute;top:4774;left:108"><nobr>who have an email address on file.</nobr></div>
<div style="position:absolute;top:4807;left:108"><nobr>An imperative solution in PHP could look like this:</nobr></div>
</span></font>

<div style="position:absolute;top:5035;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=8><b>Page 8</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:5146;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:5165;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:5184;left:154"><nobr>$emails = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:5223;left:154"><nobr>for <font color="#333333">($i = 0; $i &lt; count($users); $i++) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:5242;left:181"><nobr>$user = $users[$i];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:5280;left:181"><nobr>if <font color="#333333">($user-&gt;email !== </font>null<font color="#333333">) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:5299;left:208"><nobr>$emails[] = $user-&gt;email;</nobr></div>
<div style="position:absolute;top:5318;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:5337;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:5376;left:154"><nobr>return <font color="#333333">$emails;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:5395;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:5446;left:108"><nobr>This probably seems innocent enough, and we've all written code that looks</nobr></div>
<div style="position:absolute;top:5467;left:108"><nobr>like this. But think about what this code is saying:</nobr></div>
<div style="position:absolute;top:5502;left:127"><nobr>1. Create an empty array that we will use to build our result</nobr></div>
<div style="position:absolute;top:5529;left:125"><nobr>2. Create a variable to store our counter, starting at 0</nobr></div>
<div style="position:absolute;top:5556;left:125"><nobr>3. Check our counter variable to make sure it is still less than the number of</nobr></div>
<div style="position:absolute;top:5576;left:149"><nobr>users in the array</nobr></div>
<div style="position:absolute;top:5603;left:157"><nobr>• If so:</nobr></div>
<div style="position:absolute;top:5630;left:181"><nobr>1. Create a reference to the item in the array at the location</nobr></div>
<div style="position:absolute;top:5650;left:203"><nobr>matching our current counter value</nobr></div>
<div style="position:absolute;top:5677;left:179"><nobr>2. Check if the <font style="font-size:13px">email </font>property of the user is equal to <font style="font-size:13px">null</font></nobr></div>
<div style="position:absolute;top:5704;left:211"><nobr>• If not, add that user's email address to the end of our result</nobr></div>
<div style="position:absolute;top:5725;left:230"><nobr>array</nobr></div>
<div style="position:absolute;top:5752;left:179"><nobr>3. Increment our counter by one</nobr></div>
<div style="position:absolute;top:5779;left:179"><nobr>4. Return to step 3</nobr></div>
<div style="position:absolute;top:5806;left:157"><nobr>• If not, return our result array</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:5081;left:108"><nobr>Chapter 1. Imperative vs. Declarative Programming</nobr></div>
<div style="position:absolute;top:5081;left:641"><nobr>8</nobr></div>
</span></font>

<div style="position:absolute;top:6007;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=9><b>Page 9</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:6117;left:108"><nobr>Instead of trying to say <i>&quot;give me the emails of the users who have emails&quot;</i>, the</nobr></div>
<div style="position:absolute;top:6137;left:108"><nobr>solution focuses on implementation details about how many times to repeat</nobr></div>
<div style="position:absolute;top:6157;left:108"><nobr>chunks of code, accessing indexes on data structures, and managing counters.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:6204;left:108"><nobr><b>Declarative Programming</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:6245;left:108"><nobr>Instead of focusing on <i>how </i>the computer should do the work, declarative</nobr></div>
<div style="position:absolute;top:6265;left:108"><nobr>programming focuses on telling the computer <i>what </i>we need it to accomplish.</nobr></div>
<div style="position:absolute;top:6299;left:108"><nobr>Compare the code above to the same operation in SQL:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:6334;left:127"><nobr>SELECT <font color="#333333">email </font>FROM users WHERE <font color="#333333">email </font>IS NOT <font color="#0086b3">NULL</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:6386;left:108"><nobr>We didn't have to write anything about loops, counters, or array indexes. We</nobr></div>
<div style="position:absolute;top:6406;left:108"><nobr>just told the computer <i>what </i>we wanted, not <i>how </i>to get it.</nobr></div>
<div style="position:absolute;top:6440;left:108"><nobr>Under the hood, I'm sure the SQL engine must be doing some sort of iteration</nobr></div>
<div style="position:absolute;top:6460;left:108"><nobr>or keeping track of which records it's checked or which records it hasn't, but I</nobr></div>
<div style="position:absolute;top:6480;left:108"><nobr>don't really know for sure.</nobr></div>
<div style="position:absolute;top:6514;left:108"><nobr>And that's the beauty of it: <i>I don't need to know.</i></nobr></div>
<div style="position:absolute;top:6548;left:108"><nobr>PHP is a much different beast than SQL of course, and we're not going to be</nobr></div>
<div style="position:absolute;top:6568;left:108"><nobr>able to recreate that exact syntax.</nobr></div>
<div style="position:absolute;top:6602;left:108"><nobr>But can we get any closer? Sure we can, using higher order functions!</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:6655;left:108"><nobr><b>Higher Order Functions</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:6703;left:108"><nobr>A higher order function is a function that takes another function as a</nobr></div>
<div style="position:absolute;top:6723;left:108"><nobr>parameter, returns a function, or does both.</nobr></div>
<div style="position:absolute;top:6757;left:108"><nobr>For example, here's a higher order function that wraps a block of code in a</nobr></div>
<div style="position:absolute;top:6777;left:108"><nobr>database transaction:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:6053;left:108"><nobr>9</nobr></div>
<div style="position:absolute;top:6053;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:6979;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=10><b>Page 10</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:7090;left:127"><nobr>public function <font color="#795da3">transaction</font><font color="#333333">($func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:7109;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:7128;left:154"><nobr>$this-&gt;beginTransaction();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:7167;left:154"><nobr>try <font color="#333333">{</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:7186;left:181"><nobr>$result = $func();</nobr></div>
<div style="position:absolute;top:7205;left:181"><nobr>$this-&gt;commitTransaction();</nobr></div>
<div style="position:absolute;top:7224;left:154"><nobr>} <font color="#a71d5d">catch </font>(<font color="#a71d5d">Exception </font>$e) {</nobr></div>
<div style="position:absolute;top:7243;left:181"><nobr>$this-&gt;rollbackTransaction();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:7262;left:181"><nobr>throw <font color="#333333">$e;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:7281;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:7320;left:154"><nobr>return <font color="#333333">$result</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:7339;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:7390;left:108"><nobr>And here's what it would look like to use:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:7425;left:127"><nobr>try <font color="#333333">{</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:7444;left:154"><nobr>$databaseConnection-&gt;transaction(<font color="#a71d5d">function </font>() <font color="#795da3">use </font>($comment) {</nobr></div>
<div style="position:absolute;top:7464;left:181"><nobr>$comment-&gt;save();</nobr></div>
<div style="position:absolute;top:7483;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:7502;left:127"><nobr>} <font color="#a71d5d">catch </font>(<font color="#a71d5d">Exception </font>$e) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:7521;left:154"><nobr>echo <font color="#df5000">&quot;Something went wrong!&quot;</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:7540;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:7591;left:108"><nobr><b>Noticing Patterns</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:7632;left:108"><nobr>Higher order functions are powerful because they let us create abstractions</nobr></div>
<div style="position:absolute;top:7652;left:108"><nobr>around common programming patterns that couldn't otherwise be reused.</nobr></div>
<div style="position:absolute;top:7686;left:108"><nobr>Say we have a list of customers and we need to get a list of their email</nobr></div>
<div style="position:absolute;top:7706;left:108"><nobr>addresses. We can implement that without any higher order functions like this:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:7025;left:108"><nobr>Chapter 2. Higher Order Functions</nobr></div>
<div style="position:absolute;top:7025;left:634"><nobr>10</nobr></div>
</span></font>

<div style="position:absolute;top:7951;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=11><b>Page 11</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:8062;left:127"><nobr>$customerEmails = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:8100;left:127"><nobr>foreach <font color="#333333">($customers </font>as <font color="#333333">$customer) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:8119;left:154"><nobr>$customerEmails[] = $customer-&gt;email;</nobr></div>
<div style="position:absolute;top:8139;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:8177;left:127"><nobr>return <font color="#333333">$customerEmails;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:8228;left:108"><nobr>Now say we also have a list of product inventory and we want to know the total</nobr></div>
<div style="position:absolute;top:8249;left:108"><nobr>value of our stock of each item. We might write something like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:8284;left:127"><nobr>$stockTotals = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:8322;left:127"><nobr>foreach <font color="#333333">($inventoryItems </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:8341;left:154"><nobr>$stockTotals[] = [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:8360;left:181"><nobr>'product' <font color="#333333">=&gt; $item-&gt;productName,</font></nobr></div>
<div style="position:absolute;top:8379;left:181"><nobr>'total_value' <font color="#333333">=&gt; $item-&gt;quantity * $item-&gt;price,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:8398;left:154"><nobr>];</nobr></div>
<div style="position:absolute;top:8418;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:8456;left:127"><nobr>return <font color="#333333">$stockTotals;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:8507;left:108"><nobr>At first glance it might not look like there's much to abstract here, but if you</nobr></div>
<div style="position:absolute;top:8528;left:108"><nobr>look carefully you'll notice there's only one real difference between these two</nobr></div>
<div style="position:absolute;top:8548;left:108"><nobr>examples.</nobr></div>
<div style="position:absolute;top:8582;left:108"><nobr>In both cases, all we're doing is building a new array of items by applying some</nobr></div>
<div style="position:absolute;top:8602;left:108"><nobr>operation to every item in the existing list. The only difference between the</nobr></div>
<div style="position:absolute;top:8622;left:108"><nobr>two examples is the actual operation that we apply.</nobr></div>
<div style="position:absolute;top:8656;left:108"><nobr>In the first example we're just extracting the <font style="font-size:13px">email </font>field from the item:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:7997;left:108"><nobr>11</nobr></div>
<div style="position:absolute;top:7997;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:8923;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=12><b>Page 12</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:9034;left:127"><nobr>$customerEmails = [];</nobr></div>
<div style="position:absolute;top:9072;left:127"><nobr>foreach ($customers as $customer) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:9091;left:154"><nobr>$email = $customer-&gt;email;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:9111;left:154"><nobr>$customerEmails[] = $email;</nobr></div>
<div style="position:absolute;top:9130;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:9168;left:127"><nobr>return $customerEmails;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:9220;left:108"><nobr>In the second example, we create a new associative array from several of the</nobr></div>
<div style="position:absolute;top:9240;left:108"><nobr>item's fields:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:9275;left:127"><nobr>$stockTotals = [];</nobr></div>
<div style="position:absolute;top:9313;left:127"><nobr>foreach ($inventoryItems as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:9332;left:154"><nobr>$stockTotal = [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:9351;left:181"><nobr>'product' <font color="#333333">=&gt; $item-&gt;productName,</font></nobr></div>
<div style="position:absolute;top:9370;left:181"><nobr>'total_value' <font color="#333333">=&gt; $item-&gt;quantity * $item-&gt;price,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:9390;left:154"><nobr>];</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:9409;left:154"><nobr>$stockTotals[] = $stockTotal;</nobr></div>
<div style="position:absolute;top:9428;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:9466;left:127"><nobr>return $stockTotals;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:9518;left:108"><nobr>If we generalize the names of everything except the two chunks of code that</nobr></div>
<div style="position:absolute;top:9538;left:108"><nobr>are different, we get this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:9573;left:127"><nobr>$results = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:9611;left:127"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:9630;left:154"><nobr>$result = $item-&gt;email;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:9649;left:154"><nobr>$results[] = $result;</nobr></div>
<div style="position:absolute;top:9669;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:9707;left:127"><nobr>return <font color="#333333">$results;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:8969;left:108"><nobr>Chapter 2. Higher Order Functions</nobr></div>
<div style="position:absolute;top:8969;left:634"><nobr>12</nobr></div>
</span></font>

<div style="position:absolute;top:9895;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=13><b>Page 13</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:10006;left:127"><nobr>$results = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:10044;left:127"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:10063;left:154"><nobr>$result = [</nobr></div>
<div style="position:absolute;top:10083;left:181"><nobr>'product' =&gt; $item-&gt;productName,</nobr></div>
<div style="position:absolute;top:10102;left:181"><nobr>'total_value' =&gt; $item-&gt;quantity * $item-&gt;price,</nobr></div>
<div style="position:absolute;top:10121;left:154"><nobr>];</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:10140;left:154"><nobr>$results[] = $result;</nobr></div>
<div style="position:absolute;top:10159;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:10197;left:127"><nobr>return <font color="#333333">$results;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:10249;left:108"><nobr>We're close to an abstraction here, but those two pesky chunks of code in the</nobr></div>
<div style="position:absolute;top:10269;left:108"><nobr>middle are preventing us from getting there. We need to get those pieces out</nobr></div>
<div style="position:absolute;top:10289;left:108"><nobr>and replace them with something that can stay the same for both examples.</nobr></div>
<div style="position:absolute;top:10323;left:108"><nobr>We can do that by extracting those chunks of code into anonymous functions.</nobr></div>
<div style="position:absolute;top:10343;left:108"><nobr>Each anonymous function just takes the current item as its parameter, applies</nobr></div>
<div style="position:absolute;top:10364;left:108"><nobr>the operation to that item, and returns it.</nobr></div>
<div style="position:absolute;top:10397;left:108"><nobr>Here's the email example after extracting an anonymous function:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:10432;left:127"><nobr>$func = <font color="#a71d5d">function </font>($customer) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:10452;left:154"><nobr>return <font color="#333333">$customer-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:10471;left:127"><nobr>};</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:10509;left:127"><nobr>$results = [];</nobr></div>
<div style="position:absolute;top:10547;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:10566;left:154"><nobr>$result = $func($item);</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:10585;left:154"><nobr>$results[] = $result;</nobr></div>
<div style="position:absolute;top:10605;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:10643;left:127"><nobr>return $results;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:10694;left:108"><nobr>...and here's the inventory example after the same extraction:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:9941;left:108"><nobr>13</nobr></div>
<div style="position:absolute;top:9941;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:10867;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=14><b>Page 14</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:10978;left:127"><nobr>$func = <font color="#a71d5d">function </font>($item) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:10997;left:154"><nobr>return <font color="#333333">[</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:11016;left:181"><nobr>'product' <font color="#333333">=&gt; $item-&gt;productName,</font></nobr></div>
<div style="position:absolute;top:11035;left:181"><nobr>'total_value' <font color="#333333">=&gt; $item-&gt;quantity * $item-&gt;price,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:11055;left:154"><nobr>];</nobr></div>
<div style="position:absolute;top:11074;left:127"><nobr>};</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:11112;left:127"><nobr>$results = [];</nobr></div>
<div style="position:absolute;top:11150;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:11169;left:154"><nobr>$result = $func($item);</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:11188;left:154"><nobr>$results[] = $result;</nobr></div>
<div style="position:absolute;top:11208;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:11246;left:127"><nobr>return $results;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:11297;left:108"><nobr>Now there's a big block of identical code in both examples that we can extract</nobr></div>
<div style="position:absolute;top:11318;left:108"><nobr>into something reusable. If we bundle that up into its own function, we've</nobr></div>
<div style="position:absolute;top:11338;left:108"><nobr>implemented a higher order function called <font style="font-size:13px">map</font>!</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:11373;left:127"><nobr>function <font color="#795da3">map</font><font color="#333333">($items, $func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:11392;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:11411;left:154"><nobr>$results = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:11449;left:154"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:11469;left:181"><nobr>$results[] = $func($item);</nobr></div>
<div style="position:absolute;top:11488;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:11526;left:154"><nobr>return <font color="#333333">$results;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:11545;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:11583;left:127"><nobr>$customerEmails = map($customers, <font color="#a71d5d">function </font>($customer) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:11602;left:154"><nobr>return <font color="#333333">$customer-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:11622;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:10913;left:108"><nobr>Chapter 2. Higher Order Functions</nobr></div>
<div style="position:absolute;top:10913;left:634"><nobr>14</nobr></div>
</span></font>

<div style="position:absolute;top:11839;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=15><b>Page 15</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:11950;left:127"><nobr>$stockTotals = map($inventoryItems, <font color="#a71d5d">function </font>($item) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:11969;left:154"><nobr>return <font color="#333333">[</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:11988;left:181"><nobr>'product' <font color="#333333">=&gt; $item-&gt;productName,</font></nobr></div>
<div style="position:absolute;top:12007;left:181"><nobr>'total_value' <font color="#333333">=&gt; $item-&gt;quantity * $item-&gt;price,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:12027;left:154"><nobr>];</nobr></div>
<div style="position:absolute;top:12046;left:127"><nobr>});</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:12097;left:108"><nobr><b>Functional Building Blocks</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:12145;left:108"><nobr>Map is just one of dozens of powerful higher order functions for working with</nobr></div>
<div style="position:absolute;top:12165;left:108"><nobr>arrays. We'll talk about a lot of them in later examples, but let's cover some of</nobr></div>
<div style="position:absolute;top:12185;left:108"><nobr>the fundamental ones in depth first.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:12232;left:108"><nobr><b>Each</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:12273;left:108"><nobr><i>Each </i>is no more than a <font style="font-size:13px">foreach </font>loop wrapped inside of a higher order function:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:12308;left:127"><nobr>function <font color="#795da3">each</font><font color="#333333">($items, $func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:12327;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:12346;left:154"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:12365;left:181"><nobr>$func($item);</nobr></div>
<div style="position:absolute;top:12384;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:12403;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:12455;left:108"><nobr>You're probably asking yourself, <i>&quot;why would anyone bother to do this?&quot; </i>Well for</nobr></div>
<div style="position:absolute;top:12475;left:108"><nobr>one, it hides the implementation details of the loop <i>(and we hate loops.)</i></nobr></div>
<div style="position:absolute;top:12509;left:108"><nobr>Imagine a world where PHP didn't have a <font style="font-size:13px">foreach </font>loop. Our implementation of</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:12532;left:108"><nobr>each <font style="font-size:15px">would look something like this:</font></nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:12564;left:127"><nobr>function <font color="#795da3">each</font><font color="#333333">($items, $func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:12583;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:12603;left:154"><nobr>for <font color="#333333">($i = 0; $i &lt; count($items); $i++) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:12622;left:181"><nobr>$func($items[$i]);</nobr></div>
<div style="position:absolute;top:12641;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:12660;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:11885;left:108"><nobr>15</nobr></div>
<div style="position:absolute;top:11885;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:12811;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=16><b>Page 16</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:12921;left:108"><nobr>In that world, having an abstraction around &quot;do this with every item in the</nobr></div>
<div style="position:absolute;top:12941;left:108"><nobr>array&quot; seems pretty reasonable. It would let us take code that looks like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:12976;left:127"><nobr>for <font color="#333333">($i = 0; $i &lt; count($productsToDelete); $i++) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:12995;left:154"><nobr>$productsToDelete[$i]-&gt;delete();</nobr></div>
<div style="position:absolute;top:13014;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:13066;left:108"><nobr>...and rewrite it like this, which is a bit more expressive:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:13101;left:127"><nobr>each($productsToDelete, <font color="#a71d5d">function </font>($product) {</nobr></div>
<div style="position:absolute;top:13120;left:154"><nobr>$product-&gt;delete();</nobr></div>
<div style="position:absolute;top:13139;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:13191;left:108"><nobr><i>Each </i>also becomes an obvious improvement over using <font style="font-size:13px">foreach </font>directly as soon</nobr></div>
<div style="position:absolute;top:13211;left:108"><nobr>as you get into chaining functional operations, which we'll cover later in the</nobr></div>
<div style="position:absolute;top:13231;left:108"><nobr>book.</nobr></div>
<div style="position:absolute;top:13265;left:108"><nobr>A couple things to remember about <font style="font-size:13px">each</font>:</nobr></div>
<div style="position:absolute;top:13300;left:130"><nobr>• If you're tempted to use any sort of collecting variable, <font style="font-size:13px">each </font>is not the</nobr></div>
<div style="position:absolute;top:13321;left:149"><nobr>function you should be using.</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:13353;left:167"><nobr>// Bad! Use `map` instead.</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:13373;left:167"><nobr>each($customers, <font color="#a71d5d">function </font>($customer) <font color="#795da3">use </font>(&amp;$emails) {</nobr></div>
<div style="position:absolute;top:13392;left:194"><nobr>$emails[] = $customer-&gt;email;</nobr></div>
<div style="position:absolute;top:13411;left:167"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:13449;left:167"><nobr>// Good!</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:13468;left:167"><nobr>$emails = map($customers, <font color="#a71d5d">function </font>($customer) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:13487;left:194"><nobr>return <font color="#333333">$customer-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:13506;left:167"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:13558;left:130"><nobr>• Unlike the other basic array operations, <font style="font-size:13px">each </font>doesn't return anything.</nobr></div>
<div style="position:absolute;top:13578;left:149"><nobr>That's a clue that it should be reserved for <i>performing actions</i>, like deleting</nobr></div>
<div style="position:absolute;top:13599;left:149"><nobr>products, shipping orders, sending emails, etc.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:12857;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:12857;left:634"><nobr>16</nobr></div>
</span></font>

<div style="position:absolute;top:13783;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=17><b>Page 17</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:13894;left:167"><nobr>each($orders, <font color="#a71d5d">function </font>($order) {</nobr></div>
<div style="position:absolute;top:13913;left:194"><nobr>$order-&gt;markAsShipped();</nobr></div>
<div style="position:absolute;top:13932;left:167"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:13983;left:108"><nobr><b>Map</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:14024;left:108"><nobr>We've talked about map a bit already, but it's an important one and deserves its</nobr></div>
<div style="position:absolute;top:14045;left:108"><nobr>own reference.</nobr></div>
<div style="position:absolute;top:14078;left:108"><nobr>Map is used to <i>transform </i>each item in an array into something else. Given some</nobr></div>
<div style="position:absolute;top:14099;left:108"><nobr>array of items and a function, map will apply that function to every item and</nobr></div>
<div style="position:absolute;top:14119;left:108"><nobr>spit out a new array of the same size.</nobr></div>
<div style="position:absolute;top:14153;left:108"><nobr>Here's what <font style="font-size:13px">map </font>looks like as a loop:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:14188;left:127"><nobr>function <font color="#795da3">map</font><font color="#333333">($items, $func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:14207;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:14226;left:154"><nobr>$result = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:14264;left:154"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:14283;left:181"><nobr>$result[] = $func($item);</nobr></div>
<div style="position:absolute;top:14302;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:14341;left:154"><nobr>return <font color="#333333">$result;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:14360;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:14411;left:108"><nobr>Remember, every item in the new array has a relationship with the</nobr></div>
<div style="position:absolute;top:14432;left:108"><nobr>corresponding item in the original array. A good way to remember how <font style="font-size:13px">map</font></nobr></div>
<div style="position:absolute;top:14452;left:108"><nobr>works is to think of there being a <i>mapping </i>between each item in the old array</nobr></div>
<div style="position:absolute;top:14472;left:108"><nobr>and the new array.</nobr></div>
<div style="position:absolute;top:14506;left:108"><nobr>Map is a great tool for jobs like:</nobr></div>
<div style="position:absolute;top:14541;left:130"><nobr>• Extracting a field from an array of objects, such as mapping customers</nobr></div>
<div style="position:absolute;top:14562;left:149"><nobr>into their email addresses:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:13829;left:108"><nobr>17</nobr></div>
<div style="position:absolute;top:13829;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:14755;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=18><b>Page 18</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:14866;left:167"><nobr>$emails = map($customers, <font color="#a71d5d">function </font>($customer) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:14885;left:194"><nobr>return <font color="#333333">$customer-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:14904;left:167"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:14956;left:130"><nobr>• Populating an array of objects from raw data, like mapping an array of</nobr></div>
<div style="position:absolute;top:14976;left:149"><nobr>JSON results into an array of domain objects:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:15009;left:167"><nobr>$products = map($productJson, <font color="#a71d5d">function </font>($productData) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:15028;left:194"><nobr>return new <font color="#333333">Product($productData);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:15047;left:167"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:15099;left:130"><nobr>• Converting items into a new format, for example mapping an array of</nobr></div>
<div style="position:absolute;top:15119;left:149"><nobr>prices in cents into a displayable format:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:15152;left:167"><nobr>$displayPrices = map($prices, <font color="#a71d5d">function </font>($price) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:15171;left:194"><nobr>return <font color="#df5000">'$' </font><font color="#333333">. number_format($price * 100, 2);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:15190;left:167"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:15241;left:108"><nobr><b>Map vs. Each</b></nobr></div>
<div style="position:absolute;top:15275;left:108"><nobr>A common mistake I see people make is using <font style="font-size:13px">map </font>when they should have used</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:15298;left:108"><nobr>each<font style="font-size:15px">.</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:15329;left:108"><nobr>Consider our <font style="font-size:13px">each </font>example from before where we were deleting products. You</nobr></div>
<div style="position:absolute;top:15350;left:108"><nobr>could implement the same thing using <font style="font-size:13px">map </font>and it would technically have the</nobr></div>
<div style="position:absolute;top:15370;left:108"><nobr>same eLect:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:15405;left:127"><nobr>map($productsToDelete, <font color="#a71d5d">function </font>($product) {</nobr></div>
<div style="position:absolute;top:15424;left:154"><nobr>$product-&gt;delete();</nobr></div>
<div style="position:absolute;top:15443;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:15495;left:108"><nobr>Although this code works, it's semantically incorrect. We didn't <font style="font-size:13px">map </font>anything</nobr></div>
<div style="position:absolute;top:15515;left:108"><nobr>here. This code is going to go through all the trouble of creating a new array</nobr></div>
<div style="position:absolute;top:15535;left:108"><nobr>for us where every element is <font style="font-size:13px">null </font>and we aren't going to do anything with it.</nobr></div>
<div style="position:absolute;top:15569;left:108"><nobr><i>Map </i>is about transforming one array into another array. If you aren't</nobr></div>
<div style="position:absolute;top:15589;left:108"><nobr>transforming anything, you shouldn't be using <font style="font-size:13px">map</font>.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:14801;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:14801;left:634"><nobr>18</nobr></div>
</span></font>

<div style="position:absolute;top:15727;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=19><b>Page 19</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:15837;left:108"><nobr>As a general rule, you should be using <font style="font-size:13px">each </font>instead of <font style="font-size:13px">map </font>if any of the following</nobr></div>
<div style="position:absolute;top:15857;left:108"><nobr>are true:</nobr></div>
<div style="position:absolute;top:15892;left:127"><nobr>1. Your callback doesn't return anything.</nobr></div>
<div style="position:absolute;top:15919;left:125"><nobr>2. You don't do anything with the return value of <font style="font-size:13px">map</font>.</nobr></div>
<div style="position:absolute;top:15946;left:125"><nobr>3. You're just trying to perform some action with every element in an</nobr></div>
<div style="position:absolute;top:15967;left:149"><nobr>array.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:16013;left:108"><nobr><b>Filter</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:16054;left:108"><nobr>Say we had a list of products and we needed to know which ones were out of</nobr></div>
<div style="position:absolute;top:16075;left:108"><nobr>stock. Without using any higher order functions, we could write that code like</nobr></div>
<div style="position:absolute;top:16095;left:108"><nobr>this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:16130;left:127"><nobr>$outOfStockProducts = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:16168;left:127"><nobr>foreach <font color="#333333">($products </font>as <font color="#333333">$product) {</font></nobr></div>
<div style="position:absolute;top:16187;left:154"><nobr>if <font color="#333333">($product-&gt;isOutOfStock()) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:16206;left:181"><nobr>$outOfStockProducts[] = $product;</nobr></div>
<div style="position:absolute;top:16226;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:16245;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:16283;left:127"><nobr>return <font color="#333333">$outOfStockProducts;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:16335;left:108"><nobr>Similarly, if we wanted the products that cost more than $100, we could write</nobr></div>
<div style="position:absolute;top:16355;left:108"><nobr>this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:16390;left:127"><nobr>$expensiveProducts = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:16428;left:127"><nobr>foreach <font color="#333333">($products </font>as <font color="#333333">$product) {</font></nobr></div>
<div style="position:absolute;top:16447;left:154"><nobr>if <font color="#333333">($product-&gt;price &gt; 100) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:16466;left:181"><nobr>$expensiveProducts[] = $product;</nobr></div>
<div style="position:absolute;top:16485;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:16505;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:16543;left:127"><nobr>return <font color="#333333">$expensiveProducts;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:15773;left:108"><nobr>19</nobr></div>
<div style="position:absolute;top:15773;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:16699;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=20><b>Page 20</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:16809;left:108"><nobr>The only difference between these two examples is the conditional. We can</nobr></div>
<div style="position:absolute;top:16829;left:108"><nobr>abstract that difference away by extracting anonymous functions, like we did</nobr></div>
<div style="position:absolute;top:16849;left:108"><nobr>with <font style="font-size:13px">map</font>:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:16884;left:127"><nobr>$func = <font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:16903;left:154"><nobr>return <font color="#333333">$product-&gt;isOutOfStock();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:16923;left:127"><nobr>};</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:16961;left:127"><nobr>$results = [];</nobr></div>
<div style="position:absolute;top:16999;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:17018;left:154"><nobr>if <font color="#333333">($func($item)) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:17037;left:181"><nobr>$results[] = $item;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:17056;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:17076;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:17114;left:127"><nobr>return $results;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:17167;left:127"><nobr>$func = <font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:17186;left:154"><nobr>return <font color="#333333">$product-&gt;price &gt; 100;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:17205;left:127"><nobr>};</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:17243;left:127"><nobr>$results = [];</nobr></div>
<div style="position:absolute;top:17281;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:17301;left:154"><nobr>if <font color="#333333">($func($item)) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:17320;left:181"><nobr>$results[] = $item;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:17339;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:17358;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:17396;left:127"><nobr>return $results;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:17448;left:108"><nobr>Bundling up what's left gives us an implementation of a higher order function</nobr></div>
<div style="position:absolute;top:17468;left:108"><nobr>called <font style="font-size:13px">filter</font>:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:16745;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:16745;left:634"><nobr>20</nobr></div>
</span></font>

<div style="position:absolute;top:17671;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=21><b>Page 21</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:17782;left:127"><nobr>function <font color="#795da3">filter</font><font color="#333333">($items, $func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:17801;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:17820;left:154"><nobr>$result = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:17859;left:154"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
<div style="position:absolute;top:17878;left:181"><nobr>if <font color="#333333">($func($item)) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:17897;left:208"><nobr>$result[] = $item;</nobr></div>
<div style="position:absolute;top:17916;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:17935;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:17973;left:154"><nobr>return <font color="#333333">$result;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:17992;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:18031;left:127"><nobr>$outOfStockProducts = filter($products, <font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:18050;left:154"><nobr>return <font color="#333333">$product-&gt;isOutOfStock();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:18069;left:127"><nobr>});</nobr></div>
<div style="position:absolute;top:18107;left:127"><nobr>$expensiveProducts = filter($products, <font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:18126;left:154"><nobr>return <font color="#333333">$product-&gt;price &gt; 100;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:18145;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:18197;left:108"><nobr>The <font style="font-size:13px">filter </font>operation is used to <i>4lter out </i>any elements of an array that you don't</nobr></div>
<div style="position:absolute;top:18217;left:108"><nobr>want. You tell <font style="font-size:13px">filter </font>which elements to keep by passing a callback that returns</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:18240;left:108"><nobr>true <font style="font-size:15px">if you want to keep the element, and </font>false <font style="font-size:15px">if you want it removed.</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:18271;left:108"><nobr>It's important to understand that <font style="font-size:13px">filter </font>doesn't actually change or transform</nobr></div>
<div style="position:absolute;top:18292;left:108"><nobr>any of the items in the array; it just strips out the items you don't want. That</nobr></div>
<div style="position:absolute;top:18312;left:108"><nobr>means that the items that make it into the new array are not only the same <i>type</i></nobr></div>
<div style="position:absolute;top:18332;left:108"><nobr>as the ones in the old array, they're the <i>same items.</i></nobr></div>
<div style="position:absolute;top:18366;left:108"><nobr>This is in stark contrast to <font style="font-size:13px">map</font>, which is used to create <i>new </i>items by applying</nobr></div>
<div style="position:absolute;top:18386;left:108"><nobr>some operation to the existing items. You might <font style="font-size:13px">map </font><i>products </i>into <i>prices</i>, but you</nobr></div>
<div style="position:absolute;top:18406;left:108"><nobr>always <font style="font-size:13px">filter </font>products into a new array of products.</nobr></div>
<div style="position:absolute;top:18446;left:108"><nobr><b>Reject</b></nobr></div>
<div style="position:absolute;top:18481;left:108"><nobr>Sometimes it can be more expressive to specify the items we want to <i>discard</i></nobr></div>
<div style="position:absolute;top:18501;left:108"><nobr>instead of the items we want to <i>keep.</i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:17717;left:108"><nobr>21</nobr></div>
<div style="position:absolute;top:17717;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:18643;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=22><b>Page 22</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:18753;left:108"><nobr><i>Reject </i>is a close cousin of <font style="font-size:13px">filter </font>that let's us do just that, simply by Nipping the</nobr></div>
<div style="position:absolute;top:18773;left:108"><nobr>conditional:</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:18808;left:127"><nobr>- function filter($items, $func)</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:18827;left:127"><nobr>+ function reject($items, $func)</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:18846;left:140"><nobr>{</nobr></div>
<div style="position:absolute;top:18865;left:167"><nobr>$result = [];</nobr></div>
<div style="position:absolute;top:18904;left:167"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:18923;left:127"><nobr>-    </nobr></div>
<div style="position:absolute;top:18923;left:194"><nobr>if ($func($item)) {</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:18942;left:127"><nobr>+    </nobr></div>
<div style="position:absolute;top:18942;left:194"><nobr>if (! $func($item)) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:18961;left:221"><nobr>$result[] = $item;</nobr></div>
<div style="position:absolute;top:18980;left:194"><nobr>}</nobr></div>
<div style="position:absolute;top:18999;left:167"><nobr>}</nobr></div>
<div style="position:absolute;top:19038;left:167"><nobr>return $result;</nobr></div>
<div style="position:absolute;top:19057;left:140"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:19108;left:108"><nobr>We can even implement <font style="font-size:13px">reject </font><i>in terms of </i><font style="font-size:13px">filter </font>just by negating the callback:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:19143;left:127"><nobr>function <font color="#795da3">reject</font><font color="#333333">($items, $func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:19162;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:19182;left:154"><nobr>return <font color="#333333">filter($items, </font>function <font color="#333333">($item) </font><font color="#795da3">use </font><font color="#333333">($func) {</font></nobr></div>
<div style="position:absolute;top:19201;left:181"><nobr>return <font color="#333333">! $func($item);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:19220;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:19239;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:19291;left:108"><nobr>Say we needed a list of products that are in stock and our <font style="font-size:13px">Product </font>class only</nobr></div>
<div style="position:absolute;top:19311;left:108"><nobr>exposes an <font style="font-size:13px">outOfStock </font>method. An implementation using <font style="font-size:13px">filter </font>would look like</nobr></div>
<div style="position:absolute;top:19331;left:108"><nobr>this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:19366;left:127"><nobr>$inStockProducts = filter($products, <font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:19385;left:154"><nobr>return <font color="#333333">! $product-&gt;isOutOfStock();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:19404;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:18689;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:18689;left:634"><nobr>22</nobr></div>
</span></font>

<div style="position:absolute;top:19615;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=23><b>Page 23</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:19725;left:108"><nobr>By using <font style="font-size:13px">filter</font>, our code is saying &quot;<i>keep </i>the products that <i>are not </i>out of stock.&quot;</nobr></div>
<div style="position:absolute;top:19745;left:108"><nobr>It's technically correct, but sort of awkward to say. Compare that to an</nobr></div>
<div style="position:absolute;top:19765;left:108"><nobr>implementation that uses <font style="font-size:13px">reject</font>:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:19800;left:127"><nobr>$inStockProducts = reject($products, <font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:19819;left:154"><nobr>return <font color="#333333">$product-&gt;isOutOfStock();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:19839;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:19890;left:108"><nobr>Now our code is saying, &quot;<i>discard </i>the products that <i>are </i>out of stock&quot;. It's a subtle</nobr></div>
<div style="position:absolute;top:19910;left:108"><nobr>difference, but I think the code is clearer as a result.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:19957;left:108"><nobr><b>Reduce</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:19998;left:108"><nobr>Say we had a shopping cart of items and we needed to calculate the total price</nobr></div>
<div style="position:absolute;top:20018;left:108"><nobr>of the cart. One way to do that would be to loop over all of the items in the cart</nobr></div>
<div style="position:absolute;top:20039;left:108"><nobr>and keep a running tally of the total price:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:20074;left:127"><nobr>$totalPrice = 0;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:20112;left:127"><nobr>foreach <font color="#333333">($cart-&gt;items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:20131;left:154"><nobr>$totalPrice = $totalPrice + $item-&gt;price;</nobr></div>
<div style="position:absolute;top:20150;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:20188;left:127"><nobr>return <font color="#333333">$totalPrice;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:20240;left:108"><nobr>Now imagine another situation where we wanted to send an email to a group</nobr></div>
<div style="position:absolute;top:20260;left:108"><nobr>of customers and we needed to generate a comma separated list of their emails</nobr></div>
<div style="position:absolute;top:20281;left:108"><nobr>for the BCC line. We could build that string by looping over the customers and</nobr></div>
<div style="position:absolute;top:20301;left:108"><nobr>concatenating their emails together, like so:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:20336;left:127"><nobr>$bcc = <font color="#df5000">''</font>;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:20374;left:127"><nobr>foreach <font color="#333333">($customers </font>as <font color="#333333">$customer) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:20393;left:154"><nobr>$bcc = $bcc . $customer-&gt;email . <font color="#df5000">', '</font>;</nobr></div>
<div style="position:absolute;top:20412;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:20451;left:127"><nobr>return <font color="#333333">$bcc;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:19661;left:108"><nobr>23</nobr></div>
<div style="position:absolute;top:19661;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:20587;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=24><b>Page 24</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:20697;left:108"><nobr>These examples are of course very similar, so what would it look like to create</nobr></div>
<div style="position:absolute;top:20717;left:108"><nobr>an abstraction around this operation? Let's step through it line-by-line and see</nobr></div>
<div style="position:absolute;top:20737;left:108"><nobr>if we can find a way to extract a higher order function.</nobr></div>
<div style="position:absolute;top:20771;left:108"><nobr>First, let's rename both <font style="font-size:13px">$totalPrice </font>and <font style="font-size:13px">$bcc </font>to something more general like</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:20794;left:108"><nobr>$accumulator <font style="font-size:15px">since we are using it to build up our final result:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:20826;left:127"><nobr>$accumulator = 0;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:20865;left:127"><nobr>foreach ($cart-&gt;items as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:20884;left:154"><nobr>$accumulator = $accumulator + $item-&gt;price;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:20903;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:20941;left:127"><nobr>return <font color="#333333">$accumulator;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:20994;left:127"><nobr>$accumulator = <font color="#df5000">''</font>;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:21032;left:127"><nobr>foreach ($customers as $customer) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:21051;left:154"><nobr>$accumulator = $accumulator . $customer-&gt;email . <font color="#df5000">', '</font>;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:21070;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:21109;left:127"><nobr>return <font color="#333333">$accumulator;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:21160;left:108"><nobr>Comparing the first two lines, there's still a small difference. Unlike <font style="font-size:13px">filter </font>and</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:21183;left:108"><nobr>map <font style="font-size:15px">which both always start with an empty array, one of these examples begins</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:21201;left:108"><nobr>with a <font style="font-size:13px">0 </font>while the other begins with an empty string:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:21236;left:127"><nobr>$accumulator = 0;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:21274;left:127"><nobr>foreach ($cart-&gt;items as $item) {</nobr></div>
<div style="position:absolute;top:21293;left:154"><nobr>$accumulator = $accumulator + $item-&gt;price;</nobr></div>
<div style="position:absolute;top:21312;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:21351;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:20633;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:20633;left:634"><nobr>24</nobr></div>
</span></font>

<div style="position:absolute;top:21559;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=25><b>Page 25</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:21670;left:127"><nobr>$accumulator = <font color="#df5000">''</font>;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:21708;left:127"><nobr>foreach ($customers as $customer) {</nobr></div>
<div style="position:absolute;top:21727;left:154"><nobr>$accumulator = $accumulator . $customer-&gt;email . ', ';</nobr></div>
<div style="position:absolute;top:21747;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:21785;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:21836;left:108"><nobr>We can get around this by extracting the initial value into a separate variable:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:21871;left:127"><nobr>$initial = 0;</nobr></div>
<div style="position:absolute;top:21910;left:127"><nobr>$accumulator = $initial;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:21948;left:127"><nobr>foreach ($cart-&gt;items as $item) {</nobr></div>
<div style="position:absolute;top:21967;left:154"><nobr>$accumulator = $accumulator + $item-&gt;price;</nobr></div>
<div style="position:absolute;top:21986;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:22024;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:22077;left:127"><nobr>$initial = <font color="#df5000">''</font>;</nobr></div>
<div style="position:absolute;top:22116;left:127"><nobr>$accumulator = $initial;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:22154;left:127"><nobr>foreach ($customers as $customer) {</nobr></div>
<div style="position:absolute;top:22173;left:154"><nobr>$accumulator = $accumulator . $customer-&gt;email . ', ';</nobr></div>
<div style="position:absolute;top:22192;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:22230;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:22282;left:108"><nobr>Next if we look at the <font style="font-size:13px">foreach </font>loop, one example is looping over the cart items</nobr></div>
<div style="position:absolute;top:22302;left:108"><nobr>and the other is looping over customers. We can generalize that by pulling out</nobr></div>
<div style="position:absolute;top:22322;left:108"><nobr>a temporary variable called <font style="font-size:13px">$items</font>:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:21605;left:108"><nobr>25</nobr></div>
<div style="position:absolute;top:21605;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:22531;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=26><b>Page 26</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:22642;left:127"><nobr>$items = $cart-&gt;items;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:22661;left:127"><nobr>$initial = 0;</nobr></div>
<div style="position:absolute;top:22699;left:127"><nobr>$accumulator = $initial;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:22738;left:127"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:22757;left:154"><nobr>$accumulator = $accumulator + $item-&gt;price;</nobr></div>
<div style="position:absolute;top:22776;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:22814;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:22867;left:127"><nobr>$items = $customers;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:22886;left:127"><nobr>$initial = '';</nobr></div>
<div style="position:absolute;top:22924;left:127"><nobr>$accumulator = $initial;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:22963;left:127"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:22982;left:154"><nobr>$accumulator = $accumulator . $item-&gt;email . <font color="#df5000">', '</font>;</nobr></div>
<div style="position:absolute;top:23001;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:23039;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:23091;left:108"><nobr>Now the only difference between the two examples is how we are building our</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:23114;left:108"><nobr>$accumulator<font style="font-size:15px">. In the cart example we're </font><i><font style="font-size:15px">adding </font></i><font style="font-size:15px">the item's price to the current</font></nobr></div>
<div style="position:absolute;top:23134;left:108"><nobr>$accumulator<font style="font-size:15px">, while in the email example we are </font><i><font style="font-size:15px">concatenating </font></i><font style="font-size:15px">the customer's</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:23152;left:108"><nobr>email with the <font style="font-size:13px">$accumulator</font>.</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:23187;left:127"><nobr>$items = $cart-&gt;items;</nobr></div>
<div style="position:absolute;top:23206;left:127"><nobr>$initial = 0;</nobr></div>
<div style="position:absolute;top:23244;left:127"><nobr>$accumulator = $initial;</nobr></div>
<div style="position:absolute;top:23282;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:23301;left:154"><nobr>$accumulator = $accumulator + $item-&gt;price;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:23320;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:23359;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:22577;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:22577;left:634"><nobr>26</nobr></div>
</span></font>

<div style="position:absolute;top:23503;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=27><b>Page 27</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:23614;left:127"><nobr>$items = $customers;</nobr></div>
<div style="position:absolute;top:23633;left:127"><nobr>$initial = '';</nobr></div>
<div style="position:absolute;top:23671;left:127"><nobr>$accumulator = $initial;</nobr></div>
<div style="position:absolute;top:23710;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:23729;left:154"><nobr>$accumulator = $accumulator . $item-&gt;email . <font color="#df5000">', '</font>;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:23748;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:23786;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:23838;left:108"><nobr>Normally we would extract these pieces of code into anonymous functions that</nobr></div>
<div style="position:absolute;top:23858;left:108"><nobr>took the current item as their only parameter.</nobr></div>
<div style="position:absolute;top:23892;left:108"><nobr>But in this case, the code we are trying to extract depends on both the current</nobr></div>
<div style="position:absolute;top:23912;left:108"><nobr>item <i>and </i>what we've built up to that point in <font style="font-size:13px">$accumulator</font>.</nobr></div>
<div style="position:absolute;top:23946;left:108"><nobr>We can accommodate this by taking <i>both </i>values as parameters in our</nobr></div>
<div style="position:absolute;top:23966;left:108"><nobr>anonymous functions:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:24001;left:127"><nobr>$items = $cart-&gt;items;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:24020;left:127"><nobr>$callback = <font color="#a71d5d">function </font>($totalPrice, $item) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:24039;left:154"><nobr>return <font color="#333333">$totalPrice + $item-&gt;price;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:24058;left:127"><nobr>};</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:24078;left:127"><nobr>$initial = 0;</nobr></div>
<div style="position:absolute;top:24116;left:127"><nobr>$accumulator = $initial;</nobr></div>
<div style="position:absolute;top:24154;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:24173;left:154"><nobr>$accumulator = $callback($accumulator, $item);</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:24192;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:24231;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:23549;left:108"><nobr>27</nobr></div>
<div style="position:absolute;top:23549;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:24475;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=28><b>Page 28</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:24586;left:127"><nobr>$items = $customers;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:24605;left:127"><nobr>$callback = <font color="#a71d5d">function </font>($bcc, $customer) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:24624;left:154"><nobr>return <font color="#333333">$bcc . $customer-&gt;email . </font><font color="#df5000">', '</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:24643;left:127"><nobr>};</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:24663;left:127"><nobr>$initial = '';</nobr></div>
<div style="position:absolute;top:24701;left:127"><nobr>$accumulator = $initial;</nobr></div>
<div style="position:absolute;top:24739;left:127"><nobr>foreach ($items as $item) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:24758;left:154"><nobr>$accumulator = $callback($accumulator, $item);</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:24777;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:24816;left:127"><nobr>return $accumulator;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:24867;left:108"><nobr>Finally we have two blocks of identical code in both examples:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:24902;left:127"><nobr>$items = $cart-&gt;items;</nobr></div>
<div style="position:absolute;top:24921;left:127"><nobr>$callback = function ($totalPrice, $item) {</nobr></div>
<div style="position:absolute;top:24940;left:154"><nobr>return $totalPrice + $item-&gt;price;</nobr></div>
<div style="position:absolute;top:24960;left:127"><nobr>};</nobr></div>
<div style="position:absolute;top:24979;left:127"><nobr>$initial = 0;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:25017;left:127"><nobr>$accumulator = $initial;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:25055;left:127"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:25074;left:154"><nobr>$accumulator = $callback($accumulator, $item);</nobr></div>
<div style="position:absolute;top:25093;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:25132;left:127"><nobr>return <font color="#333333">$accumulator;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:24521;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:24521;left:634"><nobr>28</nobr></div>
</span></font>

<div style="position:absolute;top:25447;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=29><b>Page 29</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:25558;left:127"><nobr>$items = $customers;</nobr></div>
<div style="position:absolute;top:25577;left:127"><nobr>$callback = function ($bcc, $customer) {</nobr></div>
<div style="position:absolute;top:25596;left:154"><nobr>return $bcc . $customer-&gt;email . ', ';</nobr></div>
<div style="position:absolute;top:25615;left:127"><nobr>};</nobr></div>
<div style="position:absolute;top:25635;left:127"><nobr>$initial = '';</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:25673;left:127"><nobr>$accumulator = $initial;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:25711;left:127"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:25730;left:154"><nobr>$accumulator = $callback($accumulator, $item);</nobr></div>
<div style="position:absolute;top:25749;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:25788;left:127"><nobr>return <font color="#333333">$accumulator;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:25839;left:108"><nobr>We can extract that code into a higher order function called <font style="font-size:13px">reduce</font>, which takes</nobr></div>
<div style="position:absolute;top:25859;left:108"><nobr>all of the variables we extracted as parameters:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:25894;left:127"><nobr>function <font color="#795da3">reduce</font><font color="#333333">($items, $callback, $initial)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:25914;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:25933;left:154"><nobr>$accumulator = $initial;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:25971;left:154"><nobr>foreach <font color="#333333">($items </font>as <font color="#333333">$item) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:25990;left:181"><nobr>$accumulator = $callback($accumulator, $item);</nobr></div>
<div style="position:absolute;top:26009;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:26047;left:154"><nobr>return <font color="#333333">$accumulator;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:26067;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:26105;left:127"><nobr>$totalPrice = reduce($cart-&gt;items, <font color="#a71d5d">function </font>($totalPrice, $item) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:26124;left:154"><nobr>return <font color="#333333">$totalPrice + $item-&gt;price;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:26143;left:127"><nobr>}, 0);</nobr></div>
<div style="position:absolute;top:26181;left:127"><nobr>$bcc = reduce($customers, <font color="#a71d5d">function </font>($bcc, $customer) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:26200;left:154"><nobr>return <font color="#333333">$bcc . $customer-&gt;email . </font><font color="#df5000">', '</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:26220;left:127"><nobr>}, <font color="#df5000">''</font>);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:25493;left:108"><nobr>29</nobr></div>
<div style="position:absolute;top:25493;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:26419;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=30><b>Page 30</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:26528;left:108"><nobr><b>With Great Power</b></nobr></div>
<div style="position:absolute;top:26563;left:108"><nobr>The <font style="font-size:13px">reduce </font>operation is used to take some array of items and <i>reduce </i>it down to a</nobr></div>
<div style="position:absolute;top:26583;left:108"><nobr>single value. It has no opinion about what that single value should be; it could</nobr></div>
<div style="position:absolute;top:26603;left:108"><nobr>be a number, a string, an object, whatever you want, it doesn't matter.</nobr></div>
<div style="position:absolute;top:26637;left:108"><nobr>It can even be used to reduce one array of items into <i>another </i>array, which</nobr></div>
<div style="position:absolute;top:26657;left:108"><nobr>means we can even implement <font style="font-size:13px">map </font>and <font style="font-size:13px">filter </font>in terms of <font style="font-size:13px">reduce</font>.</nobr></div>
<div style="position:absolute;top:26691;left:108"><nobr>Here's what <font style="font-size:13px">map </font>would look like:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:26726;left:127"><nobr>function <font color="#795da3">map</font><font color="#333333">($items, $func)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:26745;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:26764;left:154"><nobr>return <font color="#333333">reduce($items, </font>function <font color="#333333">($mapped, $item) </font><font color="#795da3">use </font><font color="#333333">($func) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:26783;left:181"><nobr>$mapped[] = $func($item);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:26802;left:181"><nobr>return <font color="#333333">$mapped;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:26821;left:154"><nobr>}, []);</nobr></div>
<div style="position:absolute;top:26841;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:26892;left:108"><nobr>Since <font style="font-size:13px">reduce </font>is a pretty low level functional operation that can turn an array</nobr></div>
<div style="position:absolute;top:26912;left:108"><nobr>into just about anything, it's not always very expressive on its own. Sometimes</nobr></div>
<div style="position:absolute;top:26933;left:108"><nobr>when I find myself using <font style="font-size:13px">reduce</font>, what I really want is a higher level abstraction</nobr></div>
<div style="position:absolute;top:26953;left:108"><nobr>built <i>on top of </i><font style="font-size:13px">reduce </font>that communicates what I'm trying to do more clearly.</nobr></div>
<div style="position:absolute;top:26987;left:108"><nobr>For instance, in our total cart price example we could create a new abstraction</nobr></div>
<div style="position:absolute;top:27007;left:108"><nobr>on top of <font style="font-size:13px">reduce </font>called <font style="font-size:13px">sum </font>that simply sums the values returned from some</nobr></div>
<div style="position:absolute;top:27027;left:108"><nobr>callback:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:27062;left:127"><nobr>function <font color="#795da3">sum</font><font color="#333333">($items, $callback)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:27081;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:27100;left:154"><nobr>return <font color="#333333">reduce($items, </font>function <font color="#333333">($total, $item) </font><font color="#795da3">use </font><font color="#333333">($callback) {</font></nobr></div>
<div style="position:absolute;top:27120;left:181"><nobr>return <font color="#333333">$total + $callback($item);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:27139;left:154"><nobr>}, 0);</nobr></div>
<div style="position:absolute;top:27158;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:27196;left:127"><nobr>$totalPrice = sum($cart-&gt;items, <font color="#a71d5d">function </font>($item) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:27215;left:154"><nobr>return <font color="#333333">$item-&gt;price;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:27234;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:26465;left:108"><nobr>Chapter 3. Functional Building Blocks</nobr></div>
<div style="position:absolute;top:26465;left:634"><nobr>30</nobr></div>
</span></font>

<div style="position:absolute;top:27391;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=31><b>Page 31</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:27501;left:108"><nobr>In our BCC list example, we could use <font style="font-size:13px">reduce </font>to write a function like <font style="font-size:13px">join</font></nobr></div>
<div style="position:absolute;top:27521;left:108"><nobr><i>(ignoring the existing join function for a minute) </i>that concatenates all of the values</nobr></div>
<div style="position:absolute;top:27541;left:108"><nobr>returned from a callback:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:27576;left:127"><nobr>function <font color="#795da3">join</font><font color="#333333">($items, $callback)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:27595;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:27615;left:154"><nobr>return <font color="#333333">= reduce($items, </font>function <font color="#333333">($string, $item) </font><font color="#795da3">use </font><font color="#333333">($callback) {</font></nobr></div>
<div style="position:absolute;top:27634;left:181"><nobr>return <font color="#333333">$string . $callback($item);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:27653;left:154"><nobr>}, <font color="#df5000">''</font>);</nobr></div>
<div style="position:absolute;top:27672;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:27710;left:127"><nobr>$bcc = join($customers, <font color="#a71d5d">function </font>($customer) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:27729;left:154"><nobr>return <font color="#333333">$customer-&gt;email . </font><font color="#df5000">', '</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:27748;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:27800;left:108"><nobr>Between the four fundamental operations we've covered so far, <font style="font-size:13px">reduce </font>is</nobr></div>
<div style="position:absolute;top:27820;left:108"><nobr>definitely the trickiest to wrap your head around. For a bit of practice, try and</nobr></div>
<div style="position:absolute;top:27841;left:108"><nobr>reimplement <font style="font-size:13px">filter </font>in terms of <font style="font-size:13px">reduce </font>and see what you come up with.</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:27894;left:108"><nobr><b>Transforming Data</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:27942;left:108"><nobr>So back to our original example, how can we get this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:27977;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:27996;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:28015;left:154"><nobr>$emails = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28053;left:154"><nobr>for <font color="#333333">($i = 0; $i &lt; count($users); $i++) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:28072;left:181"><nobr>$user = $users[$i];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28111;left:181"><nobr>if <font color="#333333">($user-&gt;email !== </font>null<font color="#333333">) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:28130;left:208"><nobr>$emails[] = $user-&gt;email;</nobr></div>
<div style="position:absolute;top:28149;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:28168;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28206;left:154"><nobr>return <font color="#333333">$emails;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:28225;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:27437;left:108"><nobr>31</nobr></div>
<div style="position:absolute;top:27437;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:28363;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=32><b>Page 32</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:28473;left:108"><nobr>...to look more like this?</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28508;left:127"><nobr>SELECT <font color="#333333">email </font>FROM users WHERE <font color="#333333">email </font>IS NOT <font color="#0086b3">NULL</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:28559;left:108"><nobr>For starters, let's switch to a <font style="font-size:13px">foreach </font>loop so there's a little less noise:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28594;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:28614;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:28633;left:154"><nobr>$emails = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28671;left:154"><nobr>foreach <font color="#333333">($users </font>as <font color="#333333">$user) {</font></nobr></div>
<div style="position:absolute;top:28690;left:181"><nobr>if <font color="#333333">($user-&gt;email !== </font>null<font color="#333333">) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:28709;left:208"><nobr>$emails[] = $user-&gt;email;</nobr></div>
<div style="position:absolute;top:28728;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:28747;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28786;left:154"><nobr>return <font color="#333333">$emails;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:28805;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:28856;left:108"><nobr>All of a sudden this is starting to look a little more familiar. Doesn't the</nobr></div>
<div style="position:absolute;top:28877;left:108"><nobr>highlighted code look a lot like what we extracted into <font style="font-size:13px">map </font>previously?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:28912;left:127"><nobr>function getUserEmails($users)</nobr></div>
<div style="position:absolute;top:28931;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:28950;left:154"><nobr>$emails = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:28988;left:154"><nobr>foreach <font color="#333333">($users </font>as <font color="#333333">$user) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:29007;left:181"><nobr>if ($user-&gt;email !== null) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:29026;left:208"><nobr>$emails[] = $user-&gt;email;</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:29046;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:29065;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:29103;left:154"><nobr>return <font color="#333333">$emails;</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:29122;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:29174;left:108"><nobr>But if we try to implement <font style="font-size:13px">getUserEmails </font>using <font style="font-size:13px">map</font>, it doesn't quite work.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:28409;left:108"><nobr>Chapter 4. Transforming Data</nobr></div>
<div style="position:absolute;top:28409;left:634"><nobr>32</nobr></div>
</span></font>

<div style="position:absolute;top:29335;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=33><b>Page 33</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:29445;left:108"><nobr>The point of <font style="font-size:13px">map </font>is to apply a transformation to <i>every </i>element in an array, so it</nobr></div>
<div style="position:absolute;top:29465;left:108"><nobr>always returns an array that is the same size as the original. Our <font style="font-size:13px">getUserEmails</font></nobr></div>
<div style="position:absolute;top:29485;left:108"><nobr>function is only meant to return the <i>subset </i>of items where the <font style="font-size:13px">$email </font>field isn't</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:29508;left:108"><nobr>null<font style="font-size:15px">.</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:29539;left:108"><nobr>When we need a subset, we use <font style="font-size:13px">filter</font>, but filtering isn't quite right either.</nobr></div>
<div style="position:absolute;top:29573;left:108"><nobr>Filter is meant to give you all of the elements in an array that satisfy some</nobr></div>
<div style="position:absolute;top:29593;left:108"><nobr>condition, in our case whether or not <font style="font-size:13px">$email </font>is <font style="font-size:13px">null</font>. The problem is <font style="font-size:13px">filter</font></nobr></div>
<div style="position:absolute;top:29614;left:108"><nobr>would give us the <i>users </i>that have emails, and we want the email addresses</nobr></div>
<div style="position:absolute;top:29634;left:108"><nobr>themselves.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:29680;left:108"><nobr><b>Thinking in Steps</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:29722;left:108"><nobr>The problem we're facing right now is that we're trying to do too many things</nobr></div>
<div style="position:absolute;top:29742;left:108"><nobr>at the same time. When I'm in a situation like this, the first thing I do is try and</nobr></div>
<div style="position:absolute;top:29762;left:108"><nobr>turn <i>&quot;I can't because...&quot; </i>into <i>&quot;I could if...&quot;</i>.</nobr></div>
<div style="position:absolute;top:29796;left:108"><nobr>For example:</nobr></div>
<div style="position:absolute;top:29831;left:142"><nobr><i>I can't use </i><font style="font-size:13px">map </font><i>because it would be applied to every user, not just the users</i></nobr></div>
<div style="position:absolute;top:29851;left:142"><nobr><i>with emails.</i></nobr></div>
<div style="position:absolute;top:29887;left:108"><nobr>...becomes:</nobr></div>
<div style="position:absolute;top:29922;left:142"><nobr><i>I could use </i><font style="font-size:13px">map </font><i>if I was only working with the users that have emails.</i></nobr></div>
<div style="position:absolute;top:29957;left:108"><nobr>Well, getting just the users with email addresses sounds like a problem we <i>can</i></nobr></div>
<div style="position:absolute;top:29978;left:108"><nobr>solve with filter:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30013;left:127"><nobr>$usersWithEmails = filter($users, <font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30032;left:154"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30051;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:30103;left:108"><nobr>And now that we are only dealing with users who <i>do </i>have emails, we can</nobr></div>
<div style="position:absolute;top:30123;left:108"><nobr>remove the condition in our loop:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:29381;left:108"><nobr>33</nobr></div>
<div style="position:absolute;top:29381;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:30307;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=34><b>Page 34</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30418;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30437;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:30456;left:154"><nobr>$usersWithEmails = filter($users, <font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30475;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30495;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:30533;left:154"><nobr>$emails = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30571;left:154"><nobr>foreach <font color="#333333">($usersWithEmails </font>as <font color="#333333">$user) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30590;left:181"><nobr>$emails[] = $user-&gt;email;</nobr></div>
<div style="position:absolute;top:30609;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30648;left:154"><nobr>return <font color="#333333">$emails;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30667;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:30718;left:108"><nobr>Once the condition is gone, we can replace the loop with a <font style="font-size:13px">map</font>:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30753;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30772;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:30792;left:154"><nobr>$usersWithEmails = filter($users, <font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30811;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30830;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:30868;left:154"><nobr>$emails = map($usersWithEmails, <font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30887;left:181"><nobr>return <font color="#333333">$user-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30906;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:30945;left:154"><nobr>return <font color="#333333">$emails;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:30964;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:31015;left:108"><nobr>What we've done here is taken our original solution and split it up into two</nobr></div>
<div style="position:absolute;top:31036;left:108"><nobr>distinct operations, where each operation has one clear responsibility.</nobr></div>
<div style="position:absolute;top:31069;left:108"><nobr>Instead of having one block of code responsible for excluding any users</nobr></div>
<div style="position:absolute;top:31090;left:108"><nobr>without emails <i>and </i>extracting the email from that user, we do the same work</nobr></div>
<div style="position:absolute;top:31110;left:108"><nobr>in two separate steps.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:30353;left:108"><nobr>Chapter 4. Transforming Data</nobr></div>
<div style="position:absolute;top:30353;left:634"><nobr>34</nobr></div>
</span></font>

<div style="position:absolute;top:31279;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=35><b>Page 35</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:31389;left:108"><nobr>As your code gets more complex, splitting things up like this starts to pay oL</nobr></div>
<div style="position:absolute;top:31409;left:108"><nobr>in dividends because debugging a sequence of simple, independent operations</nobr></div>
<div style="position:absolute;top:31429;left:108"><nobr>turns out to be <i>much </i>easier than debugging a single complex operation.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:31476;left:108"><nobr><b>The Problem with Primitives</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:31517;left:108"><nobr>Even though it might still look a bit foreign, what we have now is simpler in a</nobr></div>
<div style="position:absolute;top:31537;left:108"><nobr>number of ways:</nobr></div>
<div style="position:absolute;top:31573;left:127"><nobr>1. We've eliminated the <font style="font-size:13px">if </font>statement by using <font style="font-size:13px">filter </font>to get rid of the users</nobr></div>
<div style="position:absolute;top:31593;left:149"><nobr>that have no email address.</nobr></div>
<div style="position:absolute;top:31620;left:125"><nobr>2. We've eliminated the <font style="font-size:13px">$email </font>collecting variable by using <font style="font-size:13px">map </font>to <i>transform</i></nobr></div>
<div style="position:absolute;top:31640;left:149"><nobr>our array of users into an array of emails.</nobr></div>
<div style="position:absolute;top:31667;left:125"><nobr>3. We've eliminated the loop, opting to treat it as an implementation detail</nobr></div>
<div style="position:absolute;top:31687;left:149"><nobr>of <font style="font-size:13px">filter </font>and <font style="font-size:13px">map</font>.</nobr></div>
<div style="position:absolute;top:31723;left:108"><nobr>The last improvement I'd like to make is to get rid of the <font style="font-size:13px">$usersWithEmails </font>and</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:31746;left:108"><nobr>$emails <font style="font-size:15px">temporary variables.</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:31777;left:108"><nobr>Usually the best way to get rid of a temporary variable is to use a refactoring</nobr></div>
<div style="position:absolute;top:31797;left:108"><nobr>called <font color="#0000ff"><a href="http://refactoring.com/catalog/inlineTemp.html">&quot;Inline Temp&quot;</a></font>, where you replace all occurrences of that variable with</nobr></div>
<div style="position:absolute;top:31817;left:108"><nobr>the expression assigned to it.</nobr></div>
<div style="position:absolute;top:31851;left:108"><nobr>Inlining <font style="font-size:13px">$emails </font>is easy; we just return the result of <font style="font-size:13px">map </font>directly:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:31886;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:31905;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:31924;left:154"><nobr>$usersWithEmails = filter($users, <font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:31943;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:31963;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:32001;left:154"><nobr>return <font color="#333333">map($usersWithEmails, </font>function <font color="#333333">($user) {</font></nobr></div>
<div style="position:absolute;top:32020;left:181"><nobr>return <font color="#333333">$user-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32039;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:32058;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:32110;left:108"><nobr>...but the code starts to get a bit cryptic if we inline the <font style="font-size:13px">$usersWithEmails </font>variable:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:31325;left:108"><nobr>35</nobr></div>
<div style="position:absolute;top:31325;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:32251;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=36><b>Page 36</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:32362;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32381;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:32400;left:154"><nobr>return <font color="#333333">map(filter($users, </font>function <font color="#333333">($user) {</font></nobr></div>
<div style="position:absolute;top:32419;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32439;left:154"><nobr>}), <font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:32458;left:181"><nobr>return <font color="#333333">$user-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32477;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:32496;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:32548;left:108"><nobr>Not very easy to read is it? It looks even worse if we use PHP's built-in array</nobr></div>
<div style="position:absolute;top:32568;left:108"><nobr>functions, since they have an unintuitive parameter order:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:32603;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32622;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:32641;left:154"><nobr>return <font color="#333333">array_map(</font>function <font color="#333333">($user) {</font></nobr></div>
<div style="position:absolute;top:32660;left:181"><nobr>return <font color="#333333">$user-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32679;left:154"><nobr>}, array_filter($users, <font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:32698;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32718;left:154"><nobr>}));</nobr></div>
<div style="position:absolute;top:32737;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:32788;left:108"><nobr>The reason this code is diOcult to understand is because it has to be read <i>inside-</i></nobr></div>
<div style="position:absolute;top:32809;left:108"><nobr><i>out.</i></nobr></div>
<div style="position:absolute;top:32842;left:108"><nobr>This same problem arises when working with strings in PHP. For example,</nobr></div>
<div style="position:absolute;top:32863;left:108"><nobr>here's some code that converts <font style="font-size:13px">snake_case </font>strings to <font style="font-size:13px">camelCase</font>:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:32898;left:127"><nobr>$camelString = lcfirst(</nobr></div>
<div style="position:absolute;top:32917;left:154"><nobr>str_replace(<font color="#df5000">' '</font>, <font color="#df5000">''</font>,</nobr></div>
<div style="position:absolute;top:32936;left:181"><nobr>ucwords(str_replace(<font color="#df5000">'_'</font>, <font color="#df5000">' '</font>, $snakeString))</nobr></div>
<div style="position:absolute;top:32955;left:154"><nobr>)</nobr></div>
<div style="position:absolute;top:32974;left:127"><nobr>);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:33026;left:108"><nobr>Quick, in what order are things happening here? Takes a bit of eLort to parse,</nobr></div>
<div style="position:absolute;top:33046;left:108"><nobr>doesn't it?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:32297;left:108"><nobr>Chapter 4. Transforming Data</nobr></div>
<div style="position:absolute;top:32297;left:634"><nobr>36</nobr></div>
</span></font>

<div style="position:absolute;top:33223;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=37><b>Page 37</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:33333;left:108"><nobr>Since strings and arrays are primitive types, we have to operate on them from</nobr></div>
<div style="position:absolute;top:33353;left:108"><nobr>the outside by passing them as parameters into other functions. This is what</nobr></div>
<div style="position:absolute;top:33373;left:108"><nobr>leads to &quot;inside-out&quot; code, where you need to count the braces to figure out</nobr></div>
<div style="position:absolute;top:33394;left:108"><nobr>what's happening first.</nobr></div>
<div style="position:absolute;top:33427;left:108"><nobr>Compare the &quot;inside-out&quot; example above to this imaginary syntax:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:33462;left:127"><nobr>$camelString = $snakeString-&gt;replace(<font color="#df5000">'_'</font>, <font color="#df5000">' '</font>)</nobr></div>
<div style="position:absolute;top:33481;left:309"><nobr>-&gt;ucwords()</nobr></div>
<div style="position:absolute;top:33501;left:309"><nobr>-&gt;replace(<font color="#df5000">' '</font>, <font color="#df5000">''</font>)</nobr></div>
<div style="position:absolute;top:33520;left:309"><nobr>-&gt;lcfirst();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:33571;left:108"><nobr>Much easier to understand right?</nobr></div>
<div style="position:absolute;top:33605;left:108"><nobr>The difference is that we're treating <font style="font-size:13px">$snakeString </font>as an <i>object </i>instead of a</nobr></div>
<div style="position:absolute;top:33625;left:108"><nobr>primitive type. By calling methods on the object directly instead of passing it</nobr></div>
<div style="position:absolute;top:33646;left:108"><nobr>around as a parameter, all of a sudden our code reads left to right, with the</nobr></div>
<div style="position:absolute;top:33666;left:108"><nobr>operations appearing in the order that they're executed.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:33712;left:108"><nobr><b>Arrays as Objects</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:33754;left:108"><nobr>Imagine for a second that we could call methods directly on an array. How</nobr></div>
<div style="position:absolute;top:33774;left:108"><nobr>would that aLect our <font style="font-size:13px">getUserEmails </font>function?</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:33809;left:140"><nobr>function getUserEmails($users)</nobr></div>
<div style="position:absolute;top:33828;left:140"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:33847;left:127"><nobr>-     $usersWithEmails = filter($users, function ($user) {</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:33866;left:127"><nobr>+     $usersWithEmails = $users-&gt;filter(function ($user) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:33885;left:194"><nobr>return $user-&gt;email !== null;</nobr></div>
<div style="position:absolute;top:33904;left:167"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:33943;left:127"><nobr>-     $emails = map($usersWithEmails, function ($user) {</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:33962;left:127"><nobr>+     $emails = $usersWithEmails-&gt;map(function ($user) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:33981;left:194"><nobr>return $user-&gt;email;</nobr></div>
<div style="position:absolute;top:34000;left:167"><nobr>});</nobr></div>
<div style="position:absolute;top:34038;left:167"><nobr>return $emails;</nobr></div>
<div style="position:absolute;top:34057;left:140"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:33269;left:108"><nobr>37</nobr></div>
<div style="position:absolute;top:33269;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:34195;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=38><b>Page 38</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:34305;left:108"><nobr>If we inline <font style="font-size:13px">$emails </font>again, we're left with the following:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:34340;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:34359;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:34378;left:154"><nobr>$usersWithEmails = $users-&gt;filter(<font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:34397;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:34416;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:34455;left:154"><nobr>return <font color="#333333">$usersWithEmails-&gt;map(</font>function <font color="#333333">($user) {</font></nobr></div>
<div style="position:absolute;top:34474;left:181"><nobr>return <font color="#333333">$user-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:34493;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:34512;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:34564;left:108"><nobr>The difference is that this time <font style="font-size:13px">$usersWithEmails </font>is <i>outside </i>of our call to <font style="font-size:13px">map</font></nobr></div>
<div style="position:absolute;top:34584;left:108"><nobr>instead of inside. Now when we inline it, <font style="font-size:13px">filter </font>appears before <font style="font-size:13px">map</font>, and our</nobr></div>
<div style="position:absolute;top:34604;left:108"><nobr>code reads left to right instead of inside-out:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:34639;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:34658;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:34677;left:154"><nobr>return <font color="#333333">$users-&gt;filter(</font>function <font color="#333333">($user) {</font></nobr></div>
<div style="position:absolute;top:34696;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:34716;left:154"><nobr>})-&gt;map(<font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:34735;left:181"><nobr>return <font color="#333333">$user-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:34754;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:34773;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:34825;left:108"><nobr>Isn't that just delightful? This style of programming is commonly called a</nobr></div>
<div style="position:absolute;top:34845;left:108"><nobr><i>collection pipeline</i>, and we can totally do it in PHP.</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:34899;left:108"><nobr><b>Introducing Collections</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:34946;left:108"><nobr>A <i>collection </i>is an object that bundles up an array and lets us perform array</nobr></div>
<div style="position:absolute;top:34966;left:108"><nobr>operations by calling methods on the collection instead of passing the array</nobr></div>
<div style="position:absolute;top:34987;left:108"><nobr>into functions.</nobr></div>
<div style="position:absolute;top:35020;left:108"><nobr>Here's a simple <font style="font-size:13px">Collection </font>class that just supports <font style="font-size:13px">map </font>and <font style="font-size:13px">filter</font>:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:34241;left:108"><nobr>Chapter 5. Introducing Collections</nobr></div>
<div style="position:absolute;top:34241;left:634"><nobr>38</nobr></div>
</span></font>

<div style="position:absolute;top:35167;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=39><b>Page 39</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35278;left:127"><nobr>class <font color="#795da3">Collection</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35297;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35316;left:154"><nobr>protected <font color="#333333">$items;</font></nobr></div>
<div style="position:absolute;top:35355;left:154"><nobr>public function <font color="#795da3">__construct</font><font color="#333333">($items)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35374;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:35393;left:181"><nobr>$this-&gt;items = $items;</nobr></div>
<div style="position:absolute;top:35412;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35450;left:154"><nobr>public function <font color="#795da3">map</font><font color="#333333">($callback)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35469;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35488;left:181"><nobr>return new static<font color="#333333">(array_map($callback, $this-&gt;items));</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35508;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35546;left:154"><nobr>public function <font color="#795da3">filter</font><font color="#333333">($callback)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35565;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35584;left:181"><nobr>return new static<font color="#333333">(array_filter($this-&gt;items, $callback));</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35603;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35641;left:154"><nobr>public function <font color="#795da3">toArray</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35661;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35680;left:181"><nobr>return <font color="#333333">$this-&gt;items;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35699;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:35718;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:35770;left:108"><nobr>To use this in our <font style="font-size:13px">getUserEmails </font>example, all we need to do is wrap the <font style="font-size:13px">$users</font></nobr></div>
<div style="position:absolute;top:35790;left:108"><nobr>parameter in a new <font style="font-size:13px">Collection</font>, and convert the collection back to an array</nobr></div>
<div style="position:absolute;top:35810;left:108"><nobr>before we return it:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35845;left:127"><nobr>function <font color="#795da3">getUserEmails</font><font color="#333333">($users)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35864;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35883;left:154"><nobr>return <font color="#333333">(</font>new <font color="#333333">Collection($users))-&gt;filter(</font>function <font color="#333333">($user) {</font></nobr></div>
<div style="position:absolute;top:35902;left:181"><nobr>return <font color="#333333">$user-&gt;email !== </font>null<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35922;left:154"><nobr>})-&gt;map(<font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:35941;left:181"><nobr>return <font color="#333333">$user-&gt;email;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:35960;left:154"><nobr>})-&gt;toArray();</nobr></div>
<div style="position:absolute;top:35979;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:35213;left:108"><nobr>39</nobr></div>
<div style="position:absolute;top:35213;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:36139;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=40><b>Page 40</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:36249;left:108"><nobr>Chaining methods after a traditional constructor can look a bit cluttered, so I'll</nobr></div>
<div style="position:absolute;top:36269;left:108"><nobr>often create a <i>named constructor </i>to clean things up:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:36304;left:127"><nobr>class Collection</nobr></div>
<div style="position:absolute;top:36323;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:36342;left:154"><nobr>protected $items;</nobr></div>
<div style="position:absolute;top:36381;left:154"><nobr>public function __construct($items)</nobr></div>
<div style="position:absolute;top:36400;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:36419;left:181"><nobr>$this-&gt;items = $items;</nobr></div>
<div style="position:absolute;top:36438;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:36476;left:154"><nobr>public static function <font color="#795da3">make</font><font color="#333333">($items)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:36495;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:36514;left:181"><nobr>return new static<font color="#333333">($items);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:36534;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:36553;left:154"><nobr>// ...</nobr></div>
<div style="position:absolute;top:36572;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:36623;left:108"><nobr>Using the named constructor saves us a set of parentheses at the call site and</nobr></div>
<div style="position:absolute;top:36644;left:108"><nobr>looks a little tidier to my eyes:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:36679;left:140"><nobr>function getUserEmails($users)</nobr></div>
<div style="position:absolute;top:36698;left:140"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:36717;left:127"><nobr>-     return (new Collection($users))-&gt;filter(function ($user) {</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:36736;left:127"><nobr>+     return Collection::make($users)-&gt;filter(function ($user) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:36755;left:194"><nobr>return $user-&gt;email !== null;</nobr></div>
<div style="position:absolute;top:36774;left:167"><nobr>})-&gt;map(function ($user) {</nobr></div>
<div style="position:absolute;top:36793;left:194"><nobr>return $user-&gt;email;</nobr></div>
<div style="position:absolute;top:36813;left:167"><nobr>})-&gt;toArray();</nobr></div>
<div style="position:absolute;top:36832;left:140"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:36883;left:108"><nobr><b>A Note on Mutability</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:36924;left:108"><nobr>You might have noticed in the examples so far that whenever we apply some</nobr></div>
<div style="position:absolute;top:36944;left:108"><nobr>operation to an array, we always return a <i>new </i>array; we don't actually change</nobr></div>
<div style="position:absolute;top:36964;left:108"><nobr>the original array.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:36185;left:108"><nobr>Chapter 5. Introducing Collections</nobr></div>
<div style="position:absolute;top:36185;left:634"><nobr>40</nobr></div>
</span></font>

<div style="position:absolute;top:37111;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=41><b>Page 41</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:37221;left:108"><nobr>This is most obvious in our <font style="font-size:13px">Collection </font>implementation above, where we</nobr></div>
<div style="position:absolute;top:37241;left:108"><nobr>explicitly return a <font style="font-size:13px">new static </font>in both <font style="font-size:13px">map </font>and <font style="font-size:13px">filter</font>:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:37276;left:127"><nobr>class Collection</nobr></div>
<div style="position:absolute;top:37295;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:37314;left:154"><nobr>// ...</nobr></div>
<div style="position:absolute;top:37353;left:154"><nobr>public function map($callback)</nobr></div>
<div style="position:absolute;top:37372;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:37391;left:181"><nobr>return new static<font color="#333333">(array_map($callback, $this-&gt;items));</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:37410;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:37448;left:154"><nobr>public function filter($callback)</nobr></div>
<div style="position:absolute;top:37467;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:37486;left:181"><nobr>return new static<font color="#333333">(array_filter($this-&gt;items, $callback));</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:37506;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:37544;left:154"><nobr>// ...</nobr></div>
<div style="position:absolute;top:37563;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:37615;left:108"><nobr>Compare that to this implementation where instead of returning a new</nobr></div>
<div style="position:absolute;top:37635;left:108"><nobr>collection, we just replace the <font style="font-size:13px">$items </font>property:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:37670;left:127"><nobr>class Collection</nobr></div>
<div style="position:absolute;top:37689;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:37708;left:154"><nobr>// ...</nobr></div>
<div style="position:absolute;top:37746;left:154"><nobr>public function map($callback)</nobr></div>
<div style="position:absolute;top:37765;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:37785;left:181"><nobr>$this-&gt;items = array_map($callback, $this-&gt;items);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:37804;left:181"><nobr>return <font color="#333333">$this;</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:37823;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:37861;left:154"><nobr>public function filter($callback)</nobr></div>
<div style="position:absolute;top:37880;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:37899;left:181"><nobr>$this-&gt;items = array_filter($this-&gt;items, $callback);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:37918;left:181"><nobr>return <font color="#333333">$this;</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:37938;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:37957;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:37157;left:108"><nobr>41</nobr></div>
<div style="position:absolute;top:37157;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:38083;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=42><b>Page 42</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:38193;left:108"><nobr>This might not seem like a big difference, but it can cause brain-melting,</nobr></div>
<div style="position:absolute;top:38213;left:108"><nobr>spooky-action-at-a-distance bugs that will take all of the &quot;fun&quot; out of <i>fun</i>ctional</nobr></div>
<div style="position:absolute;top:38233;left:108"><nobr>programming.</nobr></div>
<div style="position:absolute;top:38267;left:108"><nobr>Take a look at this code:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:38302;left:127"><nobr>$employees = <font color="#a71d5d">new </font>Collection([</nobr></div>
<div style="position:absolute;top:38321;left:154"><nobr>[<font color="#df5000">'name' </font>=&gt; <font color="#df5000">'Mary'</font>, <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'mary@example.com'</font>, <font color="#df5000">'salaried' </font>=&gt; <font color="#a71d5d">true</font>],</nobr></div>
<div style="position:absolute;top:38340;left:154"><nobr>[<font color="#df5000">'name' </font>=&gt; <font color="#df5000">'John'</font>, <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'john@example.com'</font>, <font color="#df5000">'salaried' </font>=&gt; <font color="#a71d5d">false</font>],</nobr></div>
<div style="position:absolute;top:38359;left:154"><nobr>[<font color="#df5000">'name' </font>=&gt; <font color="#df5000">'Kelly'</font>, <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'kelly@example.com'</font>, <font color="#df5000">'salaried' </font>=&gt; <font color="#a71d5d">true</font>],</nobr></div>
<div style="position:absolute;top:38379;left:127"><nobr>]);</nobr></div>
<div style="position:absolute;top:38417;left:127"><nobr>$employeeEmails = $employees-&gt;map(<font color="#a71d5d">function </font>($employee) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:38436;left:154"><nobr>return <font color="#333333">$employee[</font><font color="#df5000">'email'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:38455;left:127"><nobr>});</nobr></div>
<div style="position:absolute;top:38493;left:127"><nobr>$salariedEmployees = $employees-&gt;filter(<font color="#a71d5d">function </font>($employee) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:38512;left:154"><nobr>return <font color="#333333">$employee[</font><font color="#df5000">'salaried'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:38532;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:38583;left:108"><nobr>Can you spot the bug?</nobr></div>
<div style="position:absolute;top:38617;left:108"><nobr>See that <font style="font-size:13px">map </font>call that gets us the <font style="font-size:13px">$employeeEmails</font>? If we just replace the <font style="font-size:13px">$items</font></nobr></div>
<div style="position:absolute;top:38637;left:108"><nobr>property instead of returning a new collection, that <font style="font-size:13px">$employees </font>variable actually</nobr></div>
<div style="position:absolute;top:38657;left:108"><nobr>becomes a collection of <i>emails </i>as soon as <font style="font-size:13px">map </font>is finished. So when we try to</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:38680;left:108"><nobr>filter <font style="font-size:15px">the list of employees, we're actually filtering a list of emails. </font><i><font style="font-size:15px">Yikes!</font></i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:38711;left:108"><nobr>So yeah, don't do this.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:38758;left:108"><nobr><b>Quacking Like... an Array?</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:38799;left:108"><nobr>The simple collection we've got so far is pretty neat but it's a bit annoying</nobr></div>
<div style="position:absolute;top:38819;left:108"><nobr>having to constantly convert our data back and forth between collections and</nobr></div>
<div style="position:absolute;top:38840;left:108"><nobr>arrays.</nobr></div>
<div style="position:absolute;top:38873;left:108"><nobr>It would be nice if we could build a collection that we could use <i>in place of</i></nobr></div>
<div style="position:absolute;top:38894;left:108"><nobr>an array without our system noticing, and thankfully PHP makes that <i>(mostly)</i></nobr></div>
<div style="position:absolute;top:38914;left:108"><nobr>possible through a handful of interfaces.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:38129;left:108"><nobr>Chapter 5. Introducing Collections</nobr></div>
<div style="position:absolute;top:38129;left:634"><nobr>42</nobr></div>
</span></font>

<div style="position:absolute;top:39055;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=43><b>Page 43</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:39164;left:108"><nobr><b>ArrayAccess</b></nobr></div>
<div style="position:absolute;top:39199;left:108"><nobr>One of the special features of arrays is that you can get the element at a specific</nobr></div>
<div style="position:absolute;top:39219;left:108"><nobr>offset using square bracket notation.</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:39254;left:127"><nobr>$items = [1, 2, 3];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:39292;left:127"><nobr>echo <font color="#333333">$items[2];</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:39311;left:127"><nobr>// =&gt; 3</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:39363;left:108"><nobr>If we try to do that with our <font style="font-size:13px">Collection </font>class, PHP throws a fit:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:39398;left:127"><nobr>$items = Collection::make([1, 2, 3]);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:39436;left:127"><nobr>echo <font color="#333333">$items[2];</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:39455;left:127"><nobr>// =&gt; Fatal error: Cannot use object of type Collection as array!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:39507;left:108"><nobr>We can add support for square bracket notation to our collection by</nobr></div>
<div style="position:absolute;top:39527;left:108"><nobr>implementing the <font style="font-size:13px">ArrayAccess </font>interface, which consists of four methods:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:39562;left:127"><nobr>interface <font color="#795da3">ArrayAccess</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:39581;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:39600;left:154"><nobr>// Allow the collection to respond to `isset($items['key'])` checks</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:39619;left:154"><nobr>abstract public function <font color="#795da3">offsetExists</font><font color="#333333">($offset);</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:39658;left:154"><nobr>// Allow retrieving an item from the collection using `$items['key']`</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:39677;left:154"><nobr>abstract public function <font color="#795da3">offsetGet</font><font color="#333333">($offset);</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:39715;left:154"><nobr>// Allow adding an item to the end of the collection using `$items[] = $foo`</nobr></div>
<div style="position:absolute;top:39734;left:154"><nobr>// as well as at a specific key using `$items['key'] = $foo`</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:39753;left:154"><nobr>abstract public function <font color="#795da3">offsetSet</font><font color="#333333">($offset, $value);</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:39792;left:154"><nobr>// Allow removing an item from the collection using `unset($items['key'])`</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:39811;left:154"><nobr>abstract public function <font color="#795da3">offsetUnset</font><font color="#333333">($offset);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:39830;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:39101;left:108"><nobr>43</nobr></div>
<div style="position:absolute;top:39101;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:40027;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=44><b>Page 44</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:40137;left:108"><nobr>To add these methods to our <font style="font-size:13px">Collection </font>object, we just need to delegate the calls</nobr></div>
<div style="position:absolute;top:40157;left:108"><nobr>to our underlying <font style="font-size:13px">$items </font>property:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40192;left:127"><nobr>class <font color="#795da3">Collection </font>implements <font color="#795da3">ArrayAccess</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40211;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40230;left:154"><nobr>protected <font color="#333333">$items;</font></nobr></div>
<div style="position:absolute;top:40269;left:154"><nobr>public function <font color="#795da3">__construct</font><font color="#333333">($items)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40288;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:40307;left:181"><nobr>$this-&gt;items = $items;</nobr></div>
<div style="position:absolute;top:40326;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40364;left:154"><nobr>public function <font color="#795da3">offsetExists</font><font color="#333333">($offset)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40383;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40402;left:181"><nobr>return <font color="#333333">array_key_exists($this-&gt;items, $offset);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40422;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40460;left:154"><nobr>public function <font color="#795da3">offsetGet</font><font color="#333333">($offset)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40479;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40498;left:181"><nobr>return <font color="#333333">$this-&gt;items[$offset];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40517;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40555;left:154"><nobr>public function <font color="#795da3">offsetSet</font><font color="#333333">($offset, $value)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40575;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40594;left:181"><nobr>if <font color="#333333">($offset === </font>null<font color="#333333">) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40613;left:208"><nobr>$this-&gt;items[] = $value;</nobr></div>
<div style="position:absolute;top:40632;left:181"><nobr>} <font color="#a71d5d">else </font>{</nobr></div>
<div style="position:absolute;top:40651;left:208"><nobr>$this-&gt;items[$offset] = $value;</nobr></div>
<div style="position:absolute;top:40670;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:40689;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40728;left:154"><nobr>public function <font color="#795da3">offsetUnset</font><font color="#333333">($offset)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40747;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:40766;left:181"><nobr>unset<font color="#333333">($this-&gt;items[$offset]);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40785;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:40823;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:40842;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:40073;left:108"><nobr>Chapter 5. Introducing Collections</nobr></div>
<div style="position:absolute;top:40073;left:634"><nobr>44</nobr></div>
</span></font>

<div style="position:absolute;top:40999;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=45><b>Page 45</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:41109;left:108"><nobr>Now we can work with the offsets in our collection exactly as if our collection</nobr></div>
<div style="position:absolute;top:41129;left:108"><nobr>was a raw array:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:41164;left:127"><nobr>$items = Collection::make([1, 2, 3]);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:41202;left:127"><nobr>echo <font color="#333333">$items[2];</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:41221;left:127"><nobr>// =&gt; 3</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:41260;left:127"><nobr>$items[] = 4;</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:41279;left:127"><nobr>// =&gt; [1, 2, 3, 4]</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:41317;left:127"><nobr>isset<font color="#333333">($items[3]);</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:41336;left:127"><nobr>// =&gt; true</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:41374;left:127"><nobr>unset<font color="#333333">($items[0]);</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:41394;left:127"><nobr>// =&gt; [2, 3, 4]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:41444;left:108"><nobr><b>Countable</b></nobr></div>
<div style="position:absolute;top:41479;left:108"><nobr>The <font style="font-size:13px">Countable </font>interface allows an object to be passed to PHP's built-in <font style="font-size:13px">count</font></nobr></div>
<div style="position:absolute;top:41499;left:108"><nobr>function. Not quite as exciting as what we were able to do with <font style="font-size:13px">ArrayAccess</font>, but</nobr></div>
<div style="position:absolute;top:41519;left:108"><nobr>I digress.</nobr></div>
<div style="position:absolute;top:41553;left:108"><nobr>Here's the interface:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:41588;left:127"><nobr>interface <font color="#795da3">Countable</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:41607;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:41626;left:154"><nobr>abstract public function <font color="#795da3">count</font><font color="#333333">();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:41646;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:41697;left:108"><nobr>Here's what it looks like to implement:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:41045;left:108"><nobr>45</nobr></div>
<div style="position:absolute;top:41045;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:41971;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=46><b>Page 46</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:42082;left:127"><nobr>class <font color="#795da3">Collection </font>implements <font color="#795da3">ArrayAccess</font><font color="#333333">, </font><font color="#795da3">Countable</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:42101;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:42120;left:154"><nobr>protected <font color="#333333">$items;</font></nobr></div>
<div style="position:absolute;top:42159;left:154"><nobr>public function <font color="#795da3">__construct</font><font color="#333333">($items)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:42178;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:42197;left:181"><nobr>$this-&gt;items = $items;</nobr></div>
<div style="position:absolute;top:42216;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:42254;left:154"><nobr>public function <font color="#795da3">count</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:42273;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:42292;left:181"><nobr>return <font color="#333333">count($this-&gt;items);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:42312;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:42350;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:42369;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:42421;left:108"><nobr>Now we can get the size of our collection just like it was a regular array, which</nobr></div>
<div style="position:absolute;top:42441;left:108"><nobr>helps us achieve that nice polymorphic eLect we're looking for:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:42476;left:127"><nobr>$items = Collection::make([1, 2, 3]);</nobr></div>
<div style="position:absolute;top:42514;left:127"><nobr>count($items);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:42533;left:127"><nobr>// =&gt; 3</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:42585;left:108"><nobr>As a side benefit, now we have a <font style="font-size:13px">count() </font>method that we can chain with other</nobr></div>
<div style="position:absolute;top:42605;left:108"><nobr>operations.</nobr></div>
<div style="position:absolute;top:42639;left:108"><nobr>For example, we can combine it with <font style="font-size:13px">filter </font>to calculate the number of salaried</nobr></div>
<div style="position:absolute;top:42659;left:108"><nobr>employees:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:42694;left:127"><nobr>$employees = <font color="#a71d5d">new </font>Collection([</nobr></div>
<div style="position:absolute;top:42713;left:154"><nobr>[<font color="#df5000">'name' </font>=&gt; <font color="#df5000">'Mary'</font>, <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'mary@example.com'</font>, <font color="#df5000">'salaried' </font>=&gt; <font color="#a71d5d">true</font>],</nobr></div>
<div style="position:absolute;top:42732;left:154"><nobr>[<font color="#df5000">'name' </font>=&gt; <font color="#df5000">'John'</font>, <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'john@example.com'</font>, <font color="#df5000">'salaried' </font>=&gt; <font color="#a71d5d">false</font>],</nobr></div>
<div style="position:absolute;top:42751;left:154"><nobr>[<font color="#df5000">'name' </font>=&gt; <font color="#df5000">'Kelly'</font>, <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'kelly@example.com'</font>, <font color="#df5000">'salaried' </font>=&gt; <font color="#a71d5d">true</font>],</nobr></div>
<div style="position:absolute;top:42771;left:127"><nobr>]);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:42017;left:108"><nobr>Chapter 5. Introducing Collections</nobr></div>
<div style="position:absolute;top:42017;left:634"><nobr>46</nobr></div>
</span></font>

<div style="position:absolute;top:42943;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=47><b>Page 47</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:43054;left:127"><nobr>$numberOfSalariedEmployees = $employees-&gt;filter(<font color="#a71d5d">function </font>($employee) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:43073;left:154"><nobr>return <font color="#333333">$employee[</font><font color="#df5000">'salaried'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:43092;left:127"><nobr>})-&gt;count();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:43144;left:108"><nobr>If you know you're working with a collection, chaining is pretty much always</nobr></div>
<div style="position:absolute;top:43164;left:108"><nobr>the better way to use <font style="font-size:13px">count()</font>.</nobr></div>
<div style="position:absolute;top:43198;left:108"><nobr>Save the function version for situations where you might have a collection <i>or </i>a</nobr></div>
<div style="position:absolute;top:43218;left:108"><nobr>regular array, because this just looks stupid:</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:43253;left:127"><nobr>// Gross!</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:43272;left:127"><nobr>$numberOfSalariedEmployees = count($employees-&gt;filter(<font color="#a71d5d">function </font>($employee) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:43291;left:154"><nobr>return <font color="#333333">$employee[</font><font color="#df5000">'salaried'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:43311;left:127"><nobr>}));</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:43361;left:108"><nobr><b>IteratorAggregate</b></nobr></div>
<div style="position:absolute;top:43396;left:108"><nobr>There's one other thing we can do with a regular array that we still can't do with</nobr></div>
<div style="position:absolute;top:43416;left:108"><nobr>our collection, and that's iterate over it using a <font style="font-size:13px">foreach </font>loop.</nobr></div>
<div style="position:absolute;top:43450;left:108"><nobr>You might not know this, but you actually <i>can </i>use <font style="font-size:13px">foreach </font>to iterate over an</nobr></div>
<div style="position:absolute;top:43470;left:108"><nobr>object's public properties, no extra programming required:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:43505;left:127"><nobr>class <font color="#795da3">Foo</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:43524;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:43543;left:154"><nobr>public <font color="#333333">$bar = </font><font color="#df5000">'baz'</font><font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:43563;left:154"><nobr>public <font color="#333333">$qux = </font><font color="#df5000">'norf'</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:43582;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:43620;left:127"><nobr>$foo = <font color="#a71d5d">new </font>Foo;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:43658;left:127"><nobr>foreach <font color="#333333">($foo </font>as <font color="#333333">$property =&gt; $value) {</font></nobr></div>
<div style="position:absolute;top:43677;left:154"><nobr>echo <font color="#333333">$property . </font><font color="#df5000">' -&gt; ' </font><font color="#333333">. $value;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:43696;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:43716;left:127"><nobr>// =&gt; bar -&gt; baz</nobr></div>
<div style="position:absolute;top:43735;left:127"><nobr>// =&gt; qux -&gt; norf</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:42989;left:108"><nobr>47</nobr></div>
<div style="position:absolute;top:42989;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:43915;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=48><b>Page 48</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:44025;left:108"><nobr>If you didn't already know this, it's probably because iterating over an object's</nobr></div>
<div style="position:absolute;top:44045;left:108"><nobr>public properties isn't really all that useful.</nobr></div>
<div style="position:absolute;top:44079;left:108"><nobr>What <i>would </i>be useful is if we could tell <font style="font-size:13px">foreach </font>to iterate over our <font style="font-size:13px">$items</font></nobr></div>
<div style="position:absolute;top:44099;left:108"><nobr>property, and the <font style="font-size:13px">IteratorAggregate </font>interface lets do that.</nobr></div>
<div style="position:absolute;top:44133;left:108"><nobr>To implement <font style="font-size:13px">IteratorAggregate</font>, we need to add a <font style="font-size:13px">getIterator </font>method to our</nobr></div>
<div style="position:absolute;top:44153;left:108"><nobr>collection that returns a <font color="#0000ff"><a href="http://php.net/manual/en/class.traversable.php">Traversable</a></font><a href="http://php.net/manual/en/class.traversable.php"></a>.</nobr></div>
<div style="position:absolute;top:44187;left:108"><nobr>The easiest way to do that is to return our <font style="font-size:13px">$items </font>property wrapped up in an</nobr></div>
</span></font>
<font size=3 color="#0000ff" face="Times"><span style="font-size:15px;color:#0000ff">
<div style="position:absolute;top:44207;left:108"><nobr><a href="http://php.net/manual/en/class.arrayiterator.php">ArrayIterator</a><font color="#000000">:</font></nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:44242;left:127"><nobr>class <font color="#795da3">Collection </font>implements <font color="#795da3">ArrayAccess</font><font color="#333333">, </font><font color="#795da3">Countable</font><font color="#333333">, </font><font color="#795da3">IteratorAggregate</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:44261;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:44280;left:154"><nobr>protected <font color="#333333">$items;</font></nobr></div>
<div style="position:absolute;top:44319;left:154"><nobr>public function <font color="#795da3">__construct</font><font color="#333333">($items)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:44338;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:44357;left:181"><nobr>$this-&gt;items = $items;</nobr></div>
<div style="position:absolute;top:44376;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:44414;left:154"><nobr>public function <font color="#795da3">getIterator</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:44433;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:44452;left:181"><nobr>return new <font color="#333333">ArrayIterator($this-&gt;items);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:44472;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:44510;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:44529;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:44581;left:108"><nobr>Now we can pass our collection into <font style="font-size:13px">foreach </font>and iterate over the <font style="font-size:13px">$items </font>just like</nobr></div>
<div style="position:absolute;top:44601;left:108"><nobr>we were directly iterating over a regular array:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:43961;left:108"><nobr>Chapter 5. Introducing Collections</nobr></div>
<div style="position:absolute;top:43961;left:634"><nobr>48</nobr></div>
</span></font>

<div style="position:absolute;top:44887;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=49><b>Page 49</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:44998;left:127"><nobr>$collection = Collection::make([1, 2, 3]);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:45036;left:127"><nobr>foreach <font color="#333333">($collection </font>as <font color="#333333">$item) {</font></nobr></div>
<div style="position:absolute;top:45055;left:154"><nobr>echo <font color="#333333">$item;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:45075;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:45094;left:127"><nobr>// =&gt; 1</nobr></div>
<div style="position:absolute;top:45113;left:127"><nobr>// =&gt; 2</nobr></div>
<div style="position:absolute;top:45132;left:127"><nobr>// =&gt; 3</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:45184;left:108"><nobr>This is pretty cool, but with any luck, when you're done reading this book you'll</nobr></div>
<div style="position:absolute;top:45204;left:108"><nobr>never want to do it.</nobr></div>
<div style="position:absolute;top:45238;left:108"><nobr>Which leads us to...</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:45284;left:108"><nobr><b>The Golden Rule of Collection Programming</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:45325;left:108"><nobr><i>Never use a </i><font style="font-size:13px">foreach </font><i>loop outside of a collection!</i></nobr></div>
<div style="position:absolute;top:45359;left:108"><nobr>Every time you use a <font style="font-size:13px">foreach </font>loop, you're doing it to accomplish something</nobr></div>
<div style="position:absolute;top:45379;left:108"><nobr>else, and I promise you that &quot;something else&quot; already has a name.</nobr></div>
<div style="position:absolute;top:45413;left:108"><nobr>Need to loop over an array to perform some operation on each item and stuL</nobr></div>
<div style="position:absolute;top:45433;left:108"><nobr>the result into another array? You don't need to loop, you need to <i>map</i>.</nobr></div>
<div style="position:absolute;top:45467;left:108"><nobr>Need to loop over an array to strip out the items that don't match some criteria?</nobr></div>
<div style="position:absolute;top:45487;left:108"><nobr>You don't need to loop, you need to <i>4lter</i>.</nobr></div>
<div style="position:absolute;top:45521;left:108"><nobr>Pipeline programming is about operating at a higher level of abstraction.</nobr></div>
<div style="position:absolute;top:45541;left:108"><nobr>Instead of doing things with the items in a collection, you do things <i>to the</i></nobr></div>
<div style="position:absolute;top:45562;left:108"><nobr><i>collection itself.</i></nobr></div>
<div style="position:absolute;top:45595;left:108"><nobr>Map it, filter it, reduce it, sum it, zip it, reverse it, transpose it, Natten it, group</nobr></div>
<div style="position:absolute;top:45616;left:108"><nobr>it, count it, chunk it, sort it, slice it, search it; if you can do it with a <font style="font-size:13px">foreach </font>loop,</nobr></div>
<div style="position:absolute;top:45636;left:108"><nobr>you can do it with a collection method.</nobr></div>
<div style="position:absolute;top:45670;left:108"><nobr>As soon as you elevate arrays from primitive types to objects that can have</nobr></div>
<div style="position:absolute;top:45690;left:108"><nobr>their own behavior, there's no reason to ever use a <font style="font-size:13px">foreach </font>loop outside of the</nobr></div>
<div style="position:absolute;top:45710;left:108"><nobr>collection itself, and I'm going to prove it to you.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:44933;left:108"><nobr>49</nobr></div>
<div style="position:absolute;top:44933;left:517"><nobr>Part 1. A Bit of Theory</nobr></div>
</span></font>

<div style="position:absolute;top:45859;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=50><b>Page 50</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:45969;left:108"><nobr>From this point forward, you won't see a single <font style="font-size:13px">foreach </font>anywhere other than</nobr></div>
<div style="position:absolute;top:45989;left:108"><nobr>encapsulated inside a collection method.</nobr></div>
<div style="position:absolute;top:46023;left:108"><nobr>Let the games begin!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:45905;left:108"><nobr>Chapter 5. Introducing Collections</nobr></div>
<div style="position:absolute;top:45905;left:634"><nobr>50</nobr></div>
</span></font>

<div style="position:absolute;top:46831;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=51><b>Page 51</b></a></font></td></tr></table></div><font size=5 face="Times"><span style="font-size:34px;">
<div style="position:absolute;top:46977;left:108"><nobr><b>A Lot of Practice</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:47103;left:108"><nobr>Now that you have a pretty good grasp of the fundamentals, let's put them to</nobr></div>
<div style="position:absolute;top:47123;left:108"><nobr>use and learn some new tricks along the way.</nobr></div>
<div style="position:absolute;top:47157;left:108"><nobr>We've seen how we could write our own <font style="font-size:13px">Collection</font>, but for these examples</nobr></div>
<div style="position:absolute;top:47177;left:108"><nobr>we're going to use an oL-the-shelf implementation.</nobr></div>
<div style="position:absolute;top:47211;left:108"><nobr>If you're familiar with any of my work outside of this book, you probably know</nobr></div>
<div style="position:absolute;top:47231;left:108"><nobr>that I'm a big fan of the Laravel framework. Laravel ships with a very Nexible</nobr></div>
<div style="position:absolute;top:47251;left:108"><nobr>and feature-rich <font style="font-size:13px">Collection </font>class, and since it's pretty portable and easy to pull</nobr></div>
<div style="position:absolute;top:47272;left:108"><nobr>into other projects, we'll use that implementation going forward.</nobr></div>
<div style="position:absolute;top:47305;left:108"><nobr>You can create a Laravel Collection in three ways:</nobr></div>
<div style="position:absolute;top:47341;left:127"><nobr>1. Passing an array to the traditional constructor:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:47373;left:167"><nobr>$collection = <font color="#a71d5d">new </font>Collection($items);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:47425;left:125"><nobr>2. Using the <font style="font-size:13px">make </font>named constructor:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:47458;left:167"><nobr>$collection = Collection::make($items);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:47509;left:125"><nobr>3. Using the <font style="font-size:13px">collect() </font>helper function:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:47542;left:167"><nobr>$collection = collect($items);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:47594;left:108"><nobr>Personally, I love the terseness of the helper function and since it also saves us</nobr></div>
<div style="position:absolute;top:47614;left:108"><nobr>some space in the code samples, so we'll roll with that approach.</nobr></div>
<div style="position:absolute;top:47648;left:108"><nobr>If you'd like to follow along and play with these examples yourself, you can pull</nobr></div>
<div style="position:absolute;top:47668;left:108"><nobr>in the library we'll be using via Composer:</nobr></div>
</span></font>

<div style="position:absolute;top:47803;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=52><b>Page 52</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:47914;left:127"><nobr>composer require illuminate/support</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:47966;left:108"><nobr>Remember, even though we're using a specific library for these examples, these</nobr></div>
<div style="position:absolute;top:47986;left:108"><nobr>ideas are completely portable and can be applied with any decent collection</nobr></div>
<div style="position:absolute;top:48006;left:108"><nobr>implementation across many programming languages.</nobr></div>
<div style="position:absolute;top:48040;left:108"><nobr>Let's get started!</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:48094;left:108"><nobr><b>Pricing Lamps and Wallets</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:48141;left:108"><nobr>A while back I came across a little programming challenge that Shopify were</nobr></div>
<div style="position:absolute;top:48161;left:108"><nobr>posing to potential student interns.</nobr></div>
<div style="position:absolute;top:48197;left:142"><nobr><i>Given a JSON feed of products from a store, 4gure out how much it would</i></nobr></div>
<div style="position:absolute;top:48217;left:142"><nobr><i>cost to buy every variant of every single lamp and wallet that store has for</i></nobr></div>
<div style="position:absolute;top:48237;left:142"><nobr><i>sale.</i></nobr></div>
<div style="position:absolute;top:48273;left:108"><nobr>Here's an example of what the JSON feed looks like, simplified a bit for brevity:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:48308;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:48327;left:140"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:48346;left:154"><nobr>&quot;title&quot;<font color="#333333">: </font>&quot;Small Rubber Wallet&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:48365;left:154"><nobr>&quot;product_type&quot;<font color="#333333">: </font>&quot;Wallet&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:48384;left:154"><nobr>&quot;variants&quot;<font color="#333333">: [</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:48403;left:167"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Blue&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 29.33 },</nobr></div>
<div style="position:absolute;top:48422;left:167"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Turquoise&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 18.50 }</nobr></div>
<div style="position:absolute;top:48442;left:154"><nobr>]</nobr></div>
<div style="position:absolute;top:48461;left:140"><nobr>},</nobr></div>
<div style="position:absolute;top:48480;left:140"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:48499;left:154"><nobr>&quot;title&quot;<font color="#333333">: </font>&quot;Sleek Cotton Shoes&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:48518;left:154"><nobr>&quot;product_type&quot;<font color="#333333">: </font>&quot;Shoes&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:48537;left:154"><nobr>&quot;variants&quot;<font color="#333333">: [</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:48556;left:167"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Sky Blue&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 20.00 }</nobr></div>
<div style="position:absolute;top:48575;left:154"><nobr>]</nobr></div>
<div style="position:absolute;top:48595;left:140"><nobr>},</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:47849;left:108"><nobr>Chapter 6. Pricing Lamps and Wallets</nobr></div>
<div style="position:absolute;top:47849;left:634"><nobr>52</nobr></div>
</span></font>

<div style="position:absolute;top:48775;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=53><b>Page 53</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:48886;left:140"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:48905;left:154"><nobr>&quot;title&quot;<font color="#333333">: </font>&quot;Intelligent Cotton Wallet&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:48924;left:154"><nobr>&quot;product_type&quot;<font color="#333333">: </font>&quot;Wallet&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:48943;left:154"><nobr>&quot;variants&quot;<font color="#333333">: [</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:48963;left:167"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;White&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 17.97 }</nobr></div>
<div style="position:absolute;top:48982;left:154"><nobr>]</nobr></div>
<div style="position:absolute;top:49001;left:140"><nobr>},</nobr></div>
<div style="position:absolute;top:49020;left:140"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:49039;left:154"><nobr>&quot;title&quot;<font color="#333333">: </font>&quot;Enormous Leather Lamp&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:49058;left:154"><nobr>&quot;product_type&quot;<font color="#333333">: </font>&quot;Lamp&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:49077;left:154"><nobr>&quot;variants&quot;<font color="#333333">: [</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:49096;left:167"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Azure&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 65.99 },</nobr></div>
<div style="position:absolute;top:49116;left:167"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Salmon&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 1.66 }</nobr></div>
<div style="position:absolute;top:49135;left:154"><nobr>]</nobr></div>
<div style="position:absolute;top:49154;left:140"><nobr>},</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:49173;left:140"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:49192;left:127"><nobr>]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:49244;left:108"><nobr>So we know we're going to have a bunch of different products in there, some of</nobr></div>
<div style="position:absolute;top:49264;left:108"><nobr>which have a <font style="font-size:13px">product_type </font>of &quot;Lamp&quot; or &quot;Wallet&quot;, and some of which don't. Each</nobr></div>
<div style="position:absolute;top:49284;left:108"><nobr>product also has a number of <font style="font-size:13px">variants</font>, and the variants are what actually have</nobr></div>
<div style="position:absolute;top:49304;left:108"><nobr>prices.</nobr></div>
<div style="position:absolute;top:49338;left:108"><nobr>First things first, let's grab the products out of the JSON and wrap them in a</nobr></div>
<div style="position:absolute;top:49358;left:108"><nobr>new collection:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:49393;left:127"><nobr>$url = <font color="#df5000">'http://shopicruit.myshopify.com/products.json'</font>;</nobr></div>
<div style="position:absolute;top:49432;left:127"><nobr>$productJson = json_decode(file_get_contents($url), <font color="#a71d5d">true</font>);</nobr></div>
<div style="position:absolute;top:49470;left:127"><nobr>$products = collect($productJson);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:49522;left:108"><nobr>We'll use this imperative solution as a starting point:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:48821;left:108"><nobr>53</nobr></div>
<div style="position:absolute;top:48821;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:49747;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=54><b>Page 54</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:49858;left:127"><nobr>$totalCost = 0;</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:49896;left:127"><nobr>// Loop over every product</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:49915;left:127"><nobr>foreach <font color="#333333">($products </font>as <font color="#333333">$product) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:49935;left:154"><nobr>$productType = $product[<font color="#df5000">'product_type'</font>];</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:49973;left:154"><nobr>// If the product is a lamp or wallet...</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:49992;left:154"><nobr>if <font color="#333333">($productType == </font><font color="#df5000">'Lamp' </font><font color="#333333">|| $productType == </font><font color="#df5000">'Wallet'</font><font color="#333333">) {</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:50030;left:181"><nobr>// Loop over the variants and add up their prices</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:50049;left:181"><nobr>foreach <font color="#333333">($product[</font><font color="#df5000">'variants'</font><font color="#333333">] </font>as <font color="#333333">$productVariant) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:50068;left:208"><nobr>$totalCost += $productVariant[<font color="#df5000">'price'</font>];</nobr></div>
<div style="position:absolute;top:50088;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:50107;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:50126;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:50164;left:127"><nobr>return <font color="#333333">$totalCost;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:50216;left:108"><nobr>So where do we start?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:50262;left:108"><nobr><b>Replace Conditional with Filter</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:50303;left:108"><nobr>Our goal is to take this one big <font style="font-size:13px">foreach </font>loop and figure out how we can break it</nobr></div>
<div style="position:absolute;top:50324;left:108"><nobr>down into a series of simple, independent, chainable steps.</nobr></div>
<div style="position:absolute;top:50357;left:108"><nobr>The first thing that sticks out to me is this <font style="font-size:13px">if </font>statement:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:50392;left:127"><nobr>$totalCost = 0;</nobr></div>
<div style="position:absolute;top:50431;left:127"><nobr>foreach ($products as $product) {</nobr></div>
<div style="position:absolute;top:50450;left:154"><nobr>$productType = $product['product_type'];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:49793;left:108"><nobr>Chapter 6. Pricing Lamps and Wallets</nobr></div>
<div style="position:absolute;top:49793;left:634"><nobr>54</nobr></div>
</span></font>

<div style="position:absolute;top:50719;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=55><b>Page 55</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:50830;left:154"><nobr>if <font color="#333333">($productType == </font><font color="#df5000">'Lamp' </font><font color="#333333">|| $productType == </font><font color="#df5000">'Wallet'</font><font color="#333333">) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:50849;left:181"><nobr>foreach ($product['variants'] as $productVariant) {</nobr></div>
<div style="position:absolute;top:50868;left:208"><nobr>$totalCost += $productVariant['price'];</nobr></div>
<div style="position:absolute;top:50887;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:50907;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:50926;left:127"><nobr>}</nobr></div>
<div style="position:absolute;top:50964;left:127"><nobr>return $totalCost;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:51016;left:108"><nobr>We're looping over <i>all </i>of the products, but we only do any work if the product</nobr></div>
<div style="position:absolute;top:51036;left:108"><nobr>is a lamp or a wallet.</nobr></div>
<div style="position:absolute;top:51070;left:108"><nobr>If we filter out the other products in advance, we can totally eliminate that</nobr></div>
<div style="position:absolute;top:51090;left:108"><nobr>conditional:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:51125;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(<font color="#a71d5d">function </font>($product) {</nobr></div>
<div style="position:absolute;top:51144;left:154"><nobr>$productType = $product[<font color="#df5000">'product_type'</font>];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:51163;left:154"><nobr>return <font color="#333333">$productType == </font><font color="#df5000">'Lamp' </font><font color="#333333">|| $productType == </font><font color="#df5000">'Wallet'</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:51182;left:127"><nobr>});</nobr></div>
<div style="position:absolute;top:51220;left:127"><nobr>$totalCost = 0;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:51259;left:127"><nobr>foreach <font color="#333333">($lampsAndWallets </font>as <font color="#333333">$product) {</font></nobr></div>
<div style="position:absolute;top:51278;left:154"><nobr>foreach <font color="#333333">($product[</font><font color="#df5000">'variants'</font><font color="#333333">] </font>as <font color="#333333">$productVariant) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:51297;left:181"><nobr>$totalCost += $productVariant[<font color="#df5000">'price'</font>];</nobr></div>
<div style="position:absolute;top:51316;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:51335;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:51373;left:127"><nobr>return <font color="#333333">$totalCost;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:51424;left:108"><nobr><b>Replace || with Contains</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:51466;left:108"><nobr>See this line where we check if the <font style="font-size:13px">$productType </font>is a &quot;Lamp&quot; or a &quot;Wallet&quot;?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:51501;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(function ($product) {</nobr></div>
<div style="position:absolute;top:51520;left:154"><nobr>$productType = $product['product_type'];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:51539;left:154"><nobr>return <font color="#333333">$productType == </font><font color="#df5000">'Lamp' </font><font color="#333333">|| $productType == </font><font color="#df5000">'Wallet'</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:51558;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:50765;left:108"><nobr>55</nobr></div>
<div style="position:absolute;top:50765;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:51691;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=56><b>Page 56</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:51801;left:108"><nobr>A little trick I use to simplify comparisons like this is to use an <font style="font-size:13px">in_array </font>check:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:51836;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(<font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:51855;left:154"><nobr>return <font color="#333333">in_array([</font><font color="#df5000">'Lamp'</font><font color="#333333">, </font><font color="#df5000">'Wallet'</font><font color="#333333">], $product[</font><font color="#df5000">'product_type'</font><font color="#333333">]);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:51874;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:51926;left:108"><nobr>Instead of checking if the product type is an <i>x </i>or a <i>y </i>or a <i>z</i>, <font style="font-size:13px">in_array </font>let's us say</nobr></div>
<div style="position:absolute;top:51946;left:108"><nobr>&quot;here's a list of the product types we want, is this product in that list?&quot;</nobr></div>
<div style="position:absolute;top:51980;left:108"><nobr>The collection equivalent of <font style="font-size:13px">in_array </font>is <font style="font-size:13px">contains</font>, and it's a nice improvement</nobr></div>
<div style="position:absolute;top:52000;left:108"><nobr>because it removes any ambiguity about parameter order:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:52035;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(<font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:52054;left:154"><nobr>return <font color="#333333">collect([</font><font color="#df5000">'Lamp'</font><font color="#333333">, </font><font color="#df5000">'Wallet'</font><font color="#333333">])-&gt;contains($product[</font><font color="#df5000">'product_type'</font><font color="#333333">]);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:52073;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:52124;left:108"><nobr><b>Reduce to Sum</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:52165;left:108"><nobr>Looking at what we have now, what's the next thing we can break out into it's</nobr></div>
<div style="position:absolute;top:52186;left:108"><nobr>own simple step?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:52221;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(function ($product) {</nobr></div>
<div style="position:absolute;top:52240;left:154"><nobr>return collect(['Lamp', 'Wallet'])-&gt;contains($product['product_type']);</nobr></div>
<div style="position:absolute;top:52259;left:127"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:52297;left:127"><nobr>$totalCost = 0;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:52335;left:127"><nobr>foreach <font color="#333333">($lampsAndWallets </font>as <font color="#333333">$product) {</font></nobr></div>
<div style="position:absolute;top:52354;left:154"><nobr>foreach <font color="#333333">($product[</font><font color="#df5000">'variants'</font><font color="#333333">] </font>as <font color="#333333">$productVariant) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:52374;left:181"><nobr>$totalCost += $productVariant[<font color="#df5000">'price'</font>];</nobr></div>
<div style="position:absolute;top:52393;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:52412;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:52450;left:127"><nobr>return <font color="#333333">$totalCost;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:51737;left:108"><nobr>Chapter 6. Pricing Lamps and Wallets</nobr></div>
<div style="position:absolute;top:51737;left:634"><nobr>56</nobr></div>
</span></font>

<div style="position:absolute;top:52663;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=57><b>Page 57</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:52773;left:108"><nobr>In highlighted code above, I can see at least two separate concerns:</nobr></div>
<div style="position:absolute;top:52808;left:127"><nobr>1. Getting the price of each product variant.</nobr></div>
<div style="position:absolute;top:52835;left:125"><nobr>2. Summing the prices to get a total cost.</nobr></div>
<div style="position:absolute;top:52870;left:108"><nobr>If we split these up, we can use <font style="font-size:13px">reduce </font>to replace step 2:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:52906;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(function ($product) {</nobr></div>
<div style="position:absolute;top:52925;left:154"><nobr>return collect(['Lamp', 'Wallet'])-&gt;contains($product['product_type']);</nobr></div>
<div style="position:absolute;top:52944;left:127"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:52982;left:127"><nobr>// Get all of the product variant prices</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:53001;left:127"><nobr>$prices = collect();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:53039;left:127"><nobr>foreach <font color="#333333">($lampsAndWallets </font>as <font color="#333333">$product) {</font></nobr></div>
<div style="position:absolute;top:53059;left:154"><nobr>foreach <font color="#333333">($product[</font><font color="#df5000">'variants'</font><font color="#333333">] </font>as <font color="#333333">$productVariant) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:53078;left:181"><nobr>$prices[] = $productVariant[<font color="#df5000">'price'</font>];</nobr></div>
<div style="position:absolute;top:53097;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:53116;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:53154;left:127"><nobr>// Sum the prices to get a total cost</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:53173;left:127"><nobr>$totalCost = $prices-&gt;reduce(<font color="#a71d5d">function </font>($total, $price) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:53192;left:154"><nobr>return <font color="#333333">$total + $price;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:53212;left:127"><nobr>}, 0);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:53250;left:127"><nobr>return <font color="#333333">$totalCost;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:53301;left:108"><nobr>Remember what I said earlier about how you can often replace <font style="font-size:13px">reduce </font>with a</nobr></div>
<div style="position:absolute;top:53322;left:108"><nobr>more expressive operation? Here we can just use <font style="font-size:13px">sum </font>which turns our <font style="font-size:13px">reduce </font>call</nobr></div>
<div style="position:absolute;top:53342;left:108"><nobr>into one simple line:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:53377;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(function ($product) {</nobr></div>
<div style="position:absolute;top:53396;left:154"><nobr>return collect(['Lamp', 'Wallet'])-&gt;contains($product['product_type']);</nobr></div>
<div style="position:absolute;top:53415;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:52709;left:108"><nobr>57</nobr></div>
<div style="position:absolute;top:52709;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:53635;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=58><b>Page 58</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:53746;left:127"><nobr>// Get all of the product variant prices</nobr></div>
<div style="position:absolute;top:53765;left:127"><nobr>$prices = collect();</nobr></div>
<div style="position:absolute;top:53803;left:127"><nobr>foreach ($lampsAndWallets as $product) {</nobr></div>
<div style="position:absolute;top:53823;left:154"><nobr>foreach ($product['variants'] as $productVariant) {</nobr></div>
<div style="position:absolute;top:53842;left:181"><nobr>$prices[] = $productVariant['price'];</nobr></div>
<div style="position:absolute;top:53861;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:53880;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:53899;left:127"><nobr>return <font color="#333333">$prices-&gt;sum();</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:53950;left:108"><nobr><b>Replace Nested Loop with FlatMap</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:53991;left:108"><nobr>So what about this chunk in the middle?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:54026;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(function ($product) {</nobr></div>
<div style="position:absolute;top:54045;left:154"><nobr>return collect(['Lamp', 'Wallet'])-&gt;contains($product['product_type']);</nobr></div>
<div style="position:absolute;top:54064;left:127"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:54103;left:127"><nobr>$prices = collect();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:54141;left:127"><nobr>foreach <font color="#333333">($lampsAndWallets </font>as <font color="#333333">$product) {</font></nobr></div>
<div style="position:absolute;top:54160;left:154"><nobr>foreach <font color="#333333">($product[</font><font color="#df5000">'variants'</font><font color="#333333">] </font>as <font color="#333333">$productVariant) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:54179;left:181"><nobr>$prices[] = $productVariant[<font color="#df5000">'price'</font>];</nobr></div>
<div style="position:absolute;top:54198;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:54217;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:54256;left:127"><nobr>return $prices-&gt;sum();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:54307;left:108"><nobr>It looks like we're trying to <i>map </i>product variants into their prices, but we're</nobr></div>
<div style="position:absolute;top:54328;left:108"><nobr>starting with a collection of products, not a collection of variants. So how can</nobr></div>
<div style="position:absolute;top:54348;left:108"><nobr>we build one big collection of variants to map into their prices?</nobr></div>
<div style="position:absolute;top:54382;left:108"><nobr>One thing that gets us a little bit closer is to map each <i>product </i>into just its</nobr></div>
<div style="position:absolute;top:54402;left:108"><nobr>variants:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:54437;left:127"><nobr>$variants = $lampsAndWallets-&gt;map(<font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:54456;left:154"><nobr>return <font color="#333333">$product[</font><font color="#df5000">'variants'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:54475;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:53681;left:108"><nobr>Chapter 6. Pricing Lamps and Wallets</nobr></div>
<div style="position:absolute;top:53681;left:634"><nobr>58</nobr></div>
</span></font>

<div style="position:absolute;top:54607;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=59><b>Page 59</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:54717;left:108"><nobr>The issue we have now is that we're stuck with a collection of <i>arrays </i>of variants,</nobr></div>
<div style="position:absolute;top:54737;left:108"><nobr>not just one big list of variants:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:54772;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:54791;left:140"><nobr>//  ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:54810;left:140"><nobr>[</nobr></div>
<div style="position:absolute;top:54829;left:154"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Blue&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 29.33 },</nobr></div>
<div style="position:absolute;top:54849;left:154"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Turquoise&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 18.50 }</nobr></div>
<div style="position:absolute;top:54868;left:140"><nobr>],</nobr></div>
<div style="position:absolute;top:54887;left:140"><nobr>[</nobr></div>
<div style="position:absolute;top:54906;left:154"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Sky Blue&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 20.00 }</nobr></div>
<div style="position:absolute;top:54925;left:140"><nobr>],</nobr></div>
<div style="position:absolute;top:54944;left:140"><nobr>[</nobr></div>
<div style="position:absolute;top:54963;left:154"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;White&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 17.97 }</nobr></div>
<div style="position:absolute;top:54982;left:140"><nobr>],</nobr></div>
<div style="position:absolute;top:55002;left:154"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Azure&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 65.99 },</nobr></div>
<div style="position:absolute;top:55021;left:154"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Salmon&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 1.66 }</nobr></div>
<div style="position:absolute;top:55040;left:140"><nobr>],</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:55059;left:140"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:55078;left:127"><nobr>]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:55130;left:108"><nobr>Fortunately for us, there's a method for this!</nobr></div>
<div style="position:absolute;top:55163;left:108"><nobr><i>Flatten </i>is a collection operation that Nattens an arbitrarily deep collection to</nobr></div>
<div style="position:absolute;top:55184;left:108"><nobr>a single level. It takes a <font style="font-size:13px">$depth </font>parameter (defaulting to infinity) that's used to</nobr></div>
<div style="position:absolute;top:55204;left:108"><nobr>control how many levels it should Natten.</nobr></div>
<div style="position:absolute;top:55238;left:108"><nobr>Since we only need to Natten one level, so we can Natten our product variant</nobr></div>
<div style="position:absolute;top:55258;left:108"><nobr>collection like so:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:55293;left:127"><nobr>$variants = $lampsAndWallets-&gt;map(function ($product) {</nobr></div>
<div style="position:absolute;top:55312;left:154"><nobr>return $product['variants'];</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:55331;left:127"><nobr>})-&gt;flatten(1);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:55383;left:108"><nobr>Using <font style="font-size:13px">map </font>and <font style="font-size:13px">flatten </font>together like this is so common that a lot of collection</nobr></div>
<div style="position:absolute;top:55403;left:108"><nobr>implementations oLer single method called <font style="font-size:13px">flatMap </font>that combines them:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:54653;left:108"><nobr>59</nobr></div>
<div style="position:absolute;top:54653;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:55579;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=60><b>Page 60</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:55690;left:127"><nobr>$variants = $lampsAndWallets-&gt;flatMap(<font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:55709;left:154"><nobr>return <font color="#333333">$product[</font><font color="#df5000">'variants'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:55728;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:55780;left:108"><nobr>This gives us the Nat collection of product variants we've been looking for:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:55815;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:55834;left:140"><nobr>//  ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:55853;left:140"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Blue&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 29.33 },</nobr></div>
<div style="position:absolute;top:55872;left:140"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Turquoise&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 18.50 },</nobr></div>
<div style="position:absolute;top:55891;left:140"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Sky Blue&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 20.00 },</nobr></div>
<div style="position:absolute;top:55911;left:140"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;White&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 17.97 },</nobr></div>
<div style="position:absolute;top:55930;left:140"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Azure&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 65.99 },</nobr></div>
<div style="position:absolute;top:55949;left:140"><nobr>{ <font color="#df5000">&quot;title&quot;</font>: <font color="#df5000">&quot;Salmon&quot;</font>, <font color="#df5000">&quot;price&quot;</font>: 1.66 },</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:55968;left:140"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:55987;left:127"><nobr>]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:56039;left:108"><nobr>Now that we have all of the product variants in a single collection, we can use</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:56062;left:108"><nobr>map <font style="font-size:15px">to get their prices and get rid of both </font>foreach <font style="font-size:15px">loops:</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:56094;left:127"><nobr>$lampsAndWallets = $products-&gt;filter(function ($product) {</nobr></div>
<div style="position:absolute;top:56113;left:154"><nobr>return collect(['Lamp', 'Wallet'])-&gt;contains($product['product_type']);</nobr></div>
<div style="position:absolute;top:56132;left:127"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:56170;left:127"><nobr>$variants = $lampsAndWallets-&gt;flatMap(<font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:56190;left:154"><nobr>return <font color="#333333">$product[</font><font color="#df5000">'variants'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:56209;left:127"><nobr>});</nobr></div>
<div style="position:absolute;top:56247;left:127"><nobr>$prices = $variants-&gt;map(<font color="#a71d5d">function </font>($productVariant) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:56266;left:154"><nobr>return <font color="#333333">$productVariant[</font><font color="#df5000">'price'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:56285;left:127"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:56323;left:127"><nobr>return $prices-&gt;sum();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:56375;left:108"><nobr>At this point, we can collapse this whole thing into a single pipeline:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:55625;left:108"><nobr>Chapter 6. Pricing Lamps and Wallets</nobr></div>
<div style="position:absolute;top:55625;left:634"><nobr>60</nobr></div>
</span></font>

<div style="position:absolute;top:56551;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=61><b>Page 61</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:56662;left:127"><nobr>return <font color="#333333">$products-&gt;filter(</font>function <font color="#333333">($product) {</font></nobr></div>
<div style="position:absolute;top:56681;left:154"><nobr>return <font color="#333333">collect([</font><font color="#df5000">'Lamp'</font><font color="#333333">, </font><font color="#df5000">'Wallet'</font><font color="#333333">])-&gt;contains($product[</font><font color="#df5000">'product_type'</font><font color="#333333">]);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:56700;left:127"><nobr>})-&gt;flatMap(<font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:56719;left:154"><nobr>return <font color="#333333">$product[</font><font color="#df5000">'variants'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:56739;left:127"><nobr>})-&gt;map(<font color="#a71d5d">function </font>($productVariant) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:56758;left:154"><nobr>return <font color="#333333">$productVariant[</font><font color="#df5000">'price'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:56777;left:127"><nobr>})-&gt;sum();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:56828;left:108"><nobr>This is already pretty fantastic, but believe it or not we can still make this</nobr></div>
<div style="position:absolute;top:56849;left:108"><nobr>shorter.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:56895;left:108"><nobr><b>Plucking for Fun and Pro:t</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:56936;left:108"><nobr>Much like <font style="font-size:13px">flatMap </font>is a shortcut for mapping a collection and then Nattening it</nobr></div>
<div style="position:absolute;top:56957;left:108"><nobr>by one, <font style="font-size:13px">pluck </font>is a shortcut for mapping a single field out of each element in a</nobr></div>
<div style="position:absolute;top:56977;left:108"><nobr>collection.</nobr></div>
<div style="position:absolute;top:57011;left:108"><nobr>For example, if we had a collection of users and we needed to get their email</nobr></div>
<div style="position:absolute;top:57031;left:108"><nobr>addresses, we could write it like this using <font style="font-size:13px">map</font>:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:57066;left:127"><nobr>$emails = $users-&gt;map(<font color="#a71d5d">function </font>($user) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:57085;left:154"><nobr>return <font color="#333333">$user[</font><font color="#df5000">'email'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:57104;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:57156;left:108"><nobr>...or we could write it like this using <font style="font-size:13px">pluck</font>:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:57191;left:127"><nobr>$emails = $users-&gt;pluck(<font color="#df5000">'email'</font>);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:57242;left:108"><nobr>In our case, we can use <font style="font-size:13px">pluck </font>to get the prices of the product variants:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:57277;left:127"><nobr>return $products-&gt;filter(function ($product) {</nobr></div>
<div style="position:absolute;top:57297;left:154"><nobr>return collect(['Lamp', 'Wallet'])-&gt;contains($product['product_type']);</nobr></div>
<div style="position:absolute;top:57316;left:127"><nobr>})-&gt;flatMap(function ($product) {</nobr></div>
<div style="position:absolute;top:57335;left:154"><nobr>return $product['variants'];</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:57354;left:127"><nobr>})-&gt;pluck(<font color="#df5000">'price'</font>)-&gt;sum();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:56597;left:108"><nobr>61</nobr></div>
<div style="position:absolute;top:56597;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:57523;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=62><b>Page 62</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:57633;left:108"><nobr>Let me also tell you a little secret about <font style="font-size:13px">sum</font>: It takes an optional parameter that</nobr></div>
<div style="position:absolute;top:57653;left:108"><nobr>works just like <font style="font-size:13px">pluck</font>!</nobr></div>
<div style="position:absolute;top:57687;left:108"><nobr>So we can replace <font style="font-size:13px">-&gt;pluck('price')-&gt;sum() </font>with just <font style="font-size:13px">-&gt;sum('price')</font>, leaving us</nobr></div>
<div style="position:absolute;top:57707;left:108"><nobr>with this as our final solution:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:57742;left:127"><nobr>return <font color="#333333">$products-&gt;filter(</font>function <font color="#333333">($product) {</font></nobr></div>
<div style="position:absolute;top:57761;left:154"><nobr>return <font color="#333333">collect([</font><font color="#df5000">'Lamp'</font><font color="#333333">, </font><font color="#df5000">'Wallet'</font><font color="#333333">])-&gt;contains($product[</font><font color="#df5000">'product_type'</font><font color="#333333">]);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:57780;left:127"><nobr>})-&gt;flatMap(<font color="#a71d5d">function </font>($product) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:57799;left:154"><nobr>return <font color="#333333">$product[</font><font color="#df5000">'variants'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:57819;left:127"><nobr>})-&gt;sum(<font color="#df5000">'price'</font>);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:57870;left:108"><nobr>Not a single loop, conditional, or temporary variables to be found. Pretty</nobr></div>
<div style="position:absolute;top:57890;left:108"><nobr>elegant if you ask me!</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:57944;left:108"><nobr><b>CSV Surgery 101</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:57992;left:108"><nobr>That last example was a bit of a monster, so here's one that's more of a quick</nobr></div>
<div style="position:absolute;top:58012;left:108"><nobr>tip.</nobr></div>
<div style="position:absolute;top:58046;left:108"><nobr>Recently I was working on a project where I needed to import some data from</nobr></div>
<div style="position:absolute;top:58066;left:108"><nobr>a spreadsheet, and the customer had some data mushed together in a single</nobr></div>
<div style="position:absolute;top:58086;left:108"><nobr>column that I needed to extract.</nobr></div>
<div style="position:absolute;top:58120;left:108"><nobr>The annoying part was that the data was a little inconsistent, with any given</nobr></div>
<div style="position:absolute;top:58140;left:108"><nobr>entry being in one of three formats:</nobr></div>
<div style="position:absolute;top:58176;left:127"><nobr>1. <font style="font-size:13px">{DepartmentName}_{SupervisorName}_{ShiftId}</font></nobr></div>
<div style="position:absolute;top:58203;left:125"><nobr>2. <font style="font-size:13px">{DepartmentName}_{ShiftId}</font></nobr></div>
<div style="position:absolute;top:58230;left:125"><nobr>3. <font style="font-size:13px">{ShiftId}</font></nobr></div>
<div style="position:absolute;top:58265;left:108"><nobr>Thankfully all I needed was the <font style="font-size:13px">ShiftId </font>from each entry. So given a list of these</nobr></div>
<div style="position:absolute;top:58285;left:108"><nobr>strings, how can we get the <font style="font-size:13px">ShiftId </font>from each one?</nobr></div>
<div style="position:absolute;top:58319;left:108"><nobr>Let's assume we're starting with an array that contains just the data from this</nobr></div>
<div style="position:absolute;top:58339;left:108"><nobr>column:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:57569;left:108"><nobr>Chapter 7. CSV Surgery 101</nobr></div>
<div style="position:absolute;top:57569;left:634"><nobr>62</nobr></div>
</span></font>

<div style="position:absolute;top:58495;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=63><b>Page 63</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:58606;left:127"><nobr>$shifts = [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:58625;left:154"><nobr>'Shipping_Steve_A7'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58644;left:154"><nobr>'Sales_B9'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58663;left:154"><nobr>'Support_Tara_K11'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58683;left:154"><nobr>'J15'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58702;left:154"><nobr>'Warehouse_B2'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58721;left:154"><nobr>'Shipping_Dave_A6'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:58740;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:58792;left:108"><nobr>...and we want to end up with an array that looks like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:58827;left:127"><nobr>$shiftIds = [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:58846;left:154"><nobr>'A7'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58865;left:154"><nobr>'B9'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58884;left:154"><nobr>'K11'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58903;left:154"><nobr>'J15'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58922;left:154"><nobr>'B2'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:58941;left:154"><nobr>'A6'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:58960;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:59012;left:108"><nobr>Since we're <i>transforming </i>every element in the first array into a corresponding</nobr></div>
<div style="position:absolute;top:59032;left:108"><nobr>element in the second array, I think we can safely say this is going to be some</nobr></div>
<div style="position:absolute;top:59053;left:108"><nobr>kind of <font style="font-size:13px">map </font>operation:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:59088;left:127"><nobr>$shiftIds = collect($shifts)-&gt;map(<font color="#a71d5d">function </font>($shift) {</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:59107;left:154"><nobr>// How do we get the shift ID?</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:59126;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:59177;left:108"><nobr>So what transformation do we need to apply to get that <font style="font-size:13px">ShiftId </font>piece?</nobr></div>
<div style="position:absolute;top:59211;left:108"><nobr>The <font style="font-size:13px">ShiftId </font>always comes after the <i>last </i>underscore, so one approach would be</nobr></div>
<div style="position:absolute;top:59231;left:108"><nobr>to find the position of the last underscore, then grab the substring from that</nobr></div>
<div style="position:absolute;top:59252;left:108"><nobr>position onwards.</nobr></div>
<div style="position:absolute;top:59285;left:108"><nobr>We can do that with <font style="font-size:13px">strrpos </font>to find the last underscore and <font style="font-size:13px">substr </font>to extract the</nobr></div>
<div style="position:absolute;top:59306;left:108"><nobr>substring:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:58541;left:108"><nobr>63</nobr></div>
<div style="position:absolute;top:58541;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:59467;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=64><b>Page 64</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:59578;left:127"><nobr>$shiftIds = collect($shifts)-&gt;map(function ($shift) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:59597;left:154"><nobr>$underscorePosition = strrpos($shift, <font color="#df5000">'_'</font>);</nobr></div>
<div style="position:absolute;top:59616;left:154"><nobr>$substringOffset = $underscorePosition + 1;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:59635;left:154"><nobr>return <font color="#333333">substr($shift, $substringOffset);</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:59655;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:59706;left:108"><nobr>If we run this against our data set above, we get this result:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:59741;left:127"><nobr>$shifts = [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:59760;left:154"><nobr>'A7'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:59779;left:154"><nobr>'B9'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:59799;left:154"><nobr>'K11'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:59818;left:154"><nobr>'15'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:59837;left:154"><nobr>'B2'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:59856;left:154"><nobr>'A6'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:59875;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:59927;left:108"><nobr>Can you spot the error?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:59962;left:127"><nobr>$shifts = [</nobr></div>
<div style="position:absolute;top:59981;left:154"><nobr>'A7',</nobr></div>
<div style="position:absolute;top:60000;left:154"><nobr>'B9',</nobr></div>
<div style="position:absolute;top:60019;left:154"><nobr>'K11',</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:60038;left:154"><nobr>'15'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:60057;left:154"><nobr>'B2',</nobr></div>
<div style="position:absolute;top:60076;left:154"><nobr>'A6',</nobr></div>
<div style="position:absolute;top:60096;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:60147;left:108"><nobr>That line should be <font style="font-size:13px">J15</font>, but we lost the <i>J</i>!</nobr></div>
<div style="position:absolute;top:60181;left:108"><nobr>The problem is that <font style="font-size:13px">strrpos </font>returns <font style="font-size:13px">false </font>if no underscore is found, and since</nobr></div>
<div style="position:absolute;top:60201;left:108"><nobr>we have to add 1 to the underscore position to grab the substring from the</nobr></div>
<div style="position:absolute;top:60221;left:108"><nobr>right offset, we end up truncating the first character of any shift that has no</nobr></div>
<div style="position:absolute;top:60242;left:108"><nobr>underscores:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:59513;left:108"><nobr>Chapter 7. CSV Surgery 101</nobr></div>
<div style="position:absolute;top:59513;left:634"><nobr>64</nobr></div>
</span></font>

<div style="position:absolute;top:60439;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=65><b>Page 65</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:60550;left:127"><nobr>$shift = <font color="#df5000">'J15'</font>;</nobr></div>
<div style="position:absolute;top:60588;left:127"><nobr>$underscorePosition = strrpos($shift, <font color="#df5000">'_'</font>);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:60607;left:127"><nobr>// =&gt; false</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:60646;left:127"><nobr>$substringOffset = $underscorePosition + 1;</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:60665;left:127"><nobr>// =&gt; false + 1 == 1</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:60703;left:127"><nobr>$shiftId = substr($shift, $substringOffset);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:60722;left:127"><nobr>// =&gt; 'J15' from position 1 to end == '15'</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:60774;left:108"><nobr>So if we're going to use this approach, we need to check for underscores first:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:60809;left:127"><nobr>$shiftIds = collect($shifts)-&gt;map(function ($shift) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:60828;left:154"><nobr>if <font color="#333333">(strrpos($shift, </font><font color="#df5000">'_'</font><font color="#333333">) !== </font>false<font color="#333333">) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:60847;left:181"><nobr>$underscorePosition = strrpos($shift, '_');</nobr></div>
<div style="position:absolute;top:60866;left:181"><nobr>$substringOffset = $underscorePosition + 1;</nobr></div>
<div style="position:absolute;top:60885;left:181"><nobr>return substr($shift, $substringOffset);</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:60904;left:154"><nobr>} <font color="#a71d5d">else </font>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:60924;left:181"><nobr>return <font color="#333333">$shift;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:60943;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:60962;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:61013;left:108"><nobr>I'm sorry but this code is gross. We can do better!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:61060;left:108"><nobr><b>Everything is Better as a Collection</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:61101;left:108"><nobr>It's really easy to make mistakes when you're keeping track of character offsets</nobr></div>
<div style="position:absolute;top:61121;left:108"><nobr>and dealing with substrings. Let's shift our thinking a little bit and solve this</nobr></div>
<div style="position:absolute;top:61142;left:108"><nobr>problem in a better way.</nobr></div>
<div style="position:absolute;top:61175;left:108"><nobr>Remember the three different formats we started with?</nobr></div>
<div style="position:absolute;top:61211;left:127"><nobr>1. <font style="font-size:13px">{DepartmentName}_{SupervisorName}_{ShiftId}</font></nobr></div>
<div style="position:absolute;top:61238;left:125"><nobr>2. <font style="font-size:13px">{DepartmentName}_{ShiftId}</font></nobr></div>
<div style="position:absolute;top:61265;left:125"><nobr>3. <font style="font-size:13px">{ShiftId}</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:60485;left:108"><nobr>65</nobr></div>
<div style="position:absolute;top:60485;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:61411;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=66><b>Page 66</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:61521;left:108"><nobr>Each one of these formats is made up of some number of <i>parts</i>, separated by</nobr></div>
<div style="position:absolute;top:61541;left:108"><nobr>an underscore. We just want the <i>last part.</i></nobr></div>
<div style="position:absolute;top:61575;left:108"><nobr>Instead of looking for the last underscore, let's just split the string into its parts</nobr></div>
<div style="position:absolute;top:61595;left:108"><nobr>using <font style="font-size:13px">explode</font>:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:61630;left:127"><nobr>$shiftIds = collect($shifts)-&gt;map(function ($shift) {</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:61649;left:154"><nobr>// $shift =&gt; 'Shipping_Steve_A7'</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:61668;left:154"><nobr>$parts = explode(<font color="#df5000">'_'</font>, $shift);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:61687;left:154"><nobr>// $parts =&gt; ['Shipping', 'Steve', 'A7']</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:61707;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:61758;left:108"><nobr>The nice thing about <font style="font-size:13px">explode </font>is if you give it a string that doesn't contain the</nobr></div>
<div style="position:absolute;top:61778;left:108"><nobr>delimiter you specify, it just gives you your string back:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:61813;left:127"><nobr>explode(<font color="#df5000">'_'</font>, <font color="#df5000">'J15'</font>);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:61833;left:127"><nobr>// =&gt; 'J15'</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:61884;left:108"><nobr>Since all we need now is the last element in the array, we <i>could </i>grab it using</nobr></div>
<div style="position:absolute;top:61904;left:108"><nobr>PHP's <font style="font-size:13px">end </font>function:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:61939;left:127"><nobr>$shiftIds = collect($shifts)-&gt;map(function ($shift) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:61959;left:154"><nobr>$parts = explode(<font color="#df5000">'_'</font>, $shift);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:61978;left:154"><nobr>return <font color="#333333">end($parts);</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:61997;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62048;left:108"><nobr>...or we could store the parts in a collection and use the <font style="font-size:13px">last </font>method:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:62083;left:127"><nobr>$shiftIds = collect($shifts)-&gt;map(function ($shift) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:62103;left:154"><nobr>return <font color="#333333">collect(explode(</font><font color="#df5000">'_'</font><font color="#333333">, $shift))-&gt;last();</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:62122;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62173;left:108"><nobr>I like the collection version because we can do it one line and <font style="font-size:13px">last </font>is a bit more</nobr></div>
<div style="position:absolute;top:62194;left:108"><nobr>expressive than <font style="font-size:13px">end</font>.</nobr></div>
<div style="position:absolute;top:62227;left:108"><nobr>Collections are a <i>great </i>tool for a lot of string processing situations. We'll cover</nobr></div>
<div style="position:absolute;top:62248;left:108"><nobr>another use case in the next example!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:61457;left:108"><nobr>Chapter 7. CSV Surgery 101</nobr></div>
<div style="position:absolute;top:61457;left:634"><nobr>66</nobr></div>
</span></font>

<div style="position:absolute;top:62383;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=67><b>Page 67</b></a></font></td></tr></table></div><font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:62493;left:108"><nobr><b>Binary to Decimal</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62540;left:108"><nobr>I've been learning <font color="#0000ff"><a href="http://elixir-lang.org/">Elixir </a></font><i>(the functional programming language) </i>through the</nobr></div>
<div style="position:absolute;top:62560;left:108"><nobr>exercises at <font color="#0000ff"><a href="http://exercism.io/">exercism.io </a></font>and one of the challenges was to take a string of binary</nobr></div>
<div style="position:absolute;top:62581;left:108"><nobr>and convert it to its decimal counterpart.</nobr></div>
<div style="position:absolute;top:62614;left:108"><nobr>So given a string like <font style="font-size:13px">&quot;100110101&quot;</font>, we need to write a function that spits out <font style="font-size:13px">309</font>.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:62661;left:108"><nobr><b>A Quick Refresher</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62702;left:108"><nobr>If you haven't done a ton of work with binary in the past, here's the 30 second</nobr></div>
<div style="position:absolute;top:62722;left:108"><nobr>crash course.</nobr></div>
<div style="position:absolute;top:62756;left:108"><nobr>In decimal, or base 10, every column represents a power of 10, so in the</nobr></div>
<div style="position:absolute;top:62780;left:108"><nobr>number 3716, the 6 is in the ones column <i>(10</i></nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62776;left:413"><nobr><i>0</i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62780;left:421"><nobr><i>)</i>, the 1 is in the tens column <i>(10</i></nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62776;left:634"><nobr><i>1</i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62780;left:640"><nobr><i>)</i>,</nobr></div>
<div style="position:absolute;top:62805;left:108"><nobr>the 7 is in the hundreds column <i>(10</i></nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62800;left:362"><nobr><i>2</i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62805;left:369"><nobr><i>)</i>, and the 3 is in the thousands column</nobr></div>
<div style="position:absolute;top:62829;left:108"><nobr><i>(10</i></nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62825;left:128"><nobr><i>3</i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62829;left:135"><nobr><i>)</i>.</nobr></div>
<div style="position:absolute;top:62867;left:108"><nobr>That means 3716 is equivalent to (3 x 10</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62862;left:380"><nobr>3</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62867;left:387"><nobr>) + (7 x 10</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62862;left:450"><nobr>2</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62867;left:457"><nobr>) + (1 x 10</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62862;left:518"><nobr>1</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62867;left:523"><nobr>) + (6 x 10</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62862;left:588"><nobr>0</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62867;left:596"><nobr>).</nobr></div>
<div style="position:absolute;top:62900;left:108"><nobr>Binary works the same way except its a base 2 system, so every column</nobr></div>
<div style="position:absolute;top:62921;left:108"><nobr>represents a power of 2 instead of a power of 10.</nobr></div>
<div style="position:absolute;top:62958;left:108"><nobr>So the binary number 11010 is the same as (1 x 2</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62954;left:439"><nobr>4</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62958;left:446"><nobr>)+(1x2</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62954;left:500"><nobr>3</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62958;left:507"><nobr>)+(0x2</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62954;left:565"><nobr>2</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62958;left:572"><nobr>)+(1x2</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62954;left:627"><nobr>1</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62958;left:632"><nobr>) +</nobr></div>
<div style="position:absolute;top:62983;left:108"><nobr>(0 x 2</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:62978;left:146"><nobr>0</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:62983;left:154"><nobr>), or 26 in decimal.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:63029;left:108"><nobr><b>Using a For Loop</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:63070;left:108"><nobr>One way we could solve this would be to iterate over the characters in the</nobr></div>
<div style="position:absolute;top:63091;left:108"><nobr>binary string, convert each character to decimal, and add them together.</nobr></div>
<div style="position:absolute;top:63124;left:108"><nobr>That solution might look something like this:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:62429;left:108"><nobr>67</nobr></div>
<div style="position:absolute;top:62429;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:63355;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=68><b>Page 68</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:63466;left:127"><nobr>function <font color="#795da3">binaryToDecimal</font><font color="#333333">($binary)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:63485;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:63504;left:154"><nobr>$total = 0;</nobr></div>
<div style="position:absolute;top:63523;left:154"><nobr>$exponent = strlen($binary) - 1;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:63562;left:154"><nobr>for <font color="#333333">($i = 0; $i &lt; strlen($binary); $i++) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:63581;left:181"><nobr>$decimal = $binary[$i] * (2 ** $exponent);</nobr></div>
<div style="position:absolute;top:63600;left:181"><nobr>$total += $decimal;</nobr></div>
<div style="position:absolute;top:63619;left:181"><nobr>$exponent--;</nobr></div>
<div style="position:absolute;top:63638;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:63676;left:154"><nobr>return <font color="#333333">$total;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:63696;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:63747;left:108"><nobr>This sort of code look familiar? Just the potential for oL-by-one errors here is</nobr></div>
<div style="position:absolute;top:63767;left:108"><nobr>enough to make me run for the hills!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:63814;left:108"><nobr><b>Breaking It Down</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:63855;left:108"><nobr>The most important thing I want you to learn from this book is how to stop</nobr></div>
<div style="position:absolute;top:63875;left:108"><nobr>trying to do so many things at once and instead solve problems in small, simple</nobr></div>
<div style="position:absolute;top:63896;left:108"><nobr>steps.</nobr></div>
<div style="position:absolute;top:63929;left:108"><nobr>Let's imagine for a second that we weren't allowed to use temporary variables</nobr></div>
<div style="position:absolute;top:63950;left:108"><nobr>to keep track of things oL to the side. How can we solve this problem if we're</nobr></div>
<div style="position:absolute;top:63970;left:108"><nobr>only allowed to perform operations on the entire data set as a whole?</nobr></div>
<div style="position:absolute;top:64004;left:108"><nobr>We can't do much useful work with the binary string directly, but what if we</nobr></div>
<div style="position:absolute;top:64024;left:108"><nobr>split the string into columns first? We can do that using <font style="font-size:13px">str_split</font>, and then</nobr></div>
<div style="position:absolute;top:64044;left:108"><nobr>wrap the result in a collection:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:64079;left:127"><nobr>function <font color="#795da3">binaryToDecimal</font><font color="#333333">($binary)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:64098;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:64117;left:154"><nobr>// $binary =&gt; &quot;11010&quot;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:64137;left:154"><nobr>$columns = collect(str_split($binary));</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:64156;left:154"><nobr>// $columns =&gt; [&quot;1&quot;, &quot;1&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;]</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:64175;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:63401;left:108"><nobr>Chapter 8. Binary to Decimal</nobr></div>
<div style="position:absolute;top:63401;left:634"><nobr>68</nobr></div>
</span></font>

<div style="position:absolute;top:64327;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=69><b>Page 69</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:64437;left:108"><nobr>Ok, so we've got a collection of the columns in our string. What can we do next</nobr></div>
<div style="position:absolute;top:64457;left:108"><nobr>that will get us a step closer to the solution?</nobr></div>
<div style="position:absolute;top:64491;left:108"><nobr>Well in our original solution, we talked about converting or <i>transforming </i>the</nobr></div>
<div style="position:absolute;top:64511;left:108"><nobr>binary values to their decimal values, which sounds like something we could</nobr></div>
<div style="position:absolute;top:64531;left:108"><nobr>do with <font style="font-size:13px">map </font>right?</nobr></div>
<div style="position:absolute;top:64565;left:108"><nobr>The problem is we need to know which exponent is associated with each</nobr></div>
<div style="position:absolute;top:64585;left:108"><nobr>column, but it looks like all we have is the column value itself.</nobr></div>
<div style="position:absolute;top:64619;left:108"><nobr>There <i>is </i>one other piece of data we have hidden out of site here though: the</nobr></div>
<div style="position:absolute;top:64639;left:108"><nobr>column <i>keys.</i></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:64674;left:127"><nobr>$columns = [</nobr></div>
<div style="position:absolute;top:64693;left:154"><nobr>0 =&gt; <font color="#df5000">&quot;1&quot;</font>,</nobr></div>
<div style="position:absolute;top:64713;left:154"><nobr>1 =&gt; <font color="#df5000">&quot;1&quot;</font>,</nobr></div>
<div style="position:absolute;top:64732;left:154"><nobr>2 =&gt; <font color="#df5000">&quot;0&quot;</font>,</nobr></div>
<div style="position:absolute;top:64751;left:154"><nobr>3 =&gt; <font color="#df5000">&quot;1&quot;</font>,</nobr></div>
<div style="position:absolute;top:64770;left:154"><nobr>4 =&gt; <font color="#df5000">&quot;0&quot;</font>,</nobr></div>
<div style="position:absolute;top:64789;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:64841;left:108"><nobr>Those column keys do look like the exponents we need, but they're backwards.</nobr></div>
<div style="position:absolute;top:64861;left:108"><nobr>The first column has a key of <font style="font-size:13px">0 </font>but we need it to have a key of <font style="font-size:13px">4</font>...</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:64908;left:108"><nobr><b>Reversing the Collection</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:64949;left:108"><nobr>So how do we fix a backwards collection? We <i>reverse </i>it!</nobr></div>
<div style="position:absolute;top:64982;left:108"><nobr>The Laravel Collection object has a <font style="font-size:13px">reverse </font>method, but it reverses the <i>keys </i>as</nobr></div>
<div style="position:absolute;top:65003;left:108"><nobr>well:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:65038;left:127"><nobr>$columns-&gt;reverse();</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:65057;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:65076;left:127"><nobr>//   4 =&gt; &quot;0&quot;,</nobr></div>
<div style="position:absolute;top:65095;left:127"><nobr>//   3 =&gt; &quot;1&quot;,</nobr></div>
<div style="position:absolute;top:65114;left:127"><nobr>//   2 =&gt; &quot;0&quot;,</nobr></div>
<div style="position:absolute;top:65133;left:127"><nobr>//   1 =&gt; &quot;1&quot;,</nobr></div>
<div style="position:absolute;top:65152;left:127"><nobr>//   0 =&gt; &quot;1&quot;,</nobr></div>
<div style="position:absolute;top:65172;left:127"><nobr>// ]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:64373;left:108"><nobr>69</nobr></div>
<div style="position:absolute;top:64373;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:65299;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=70><b>Page 70</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:65409;left:108"><nobr>Thankfully we can get around this by using the <font style="font-size:13px">values </font>method on the reversed</nobr></div>
<div style="position:absolute;top:65429;left:108"><nobr>collection, which re-keys the collection back to a normal 0-based index:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:65464;left:127"><nobr>function binaryToDecimal($binary)</nobr></div>
<div style="position:absolute;top:65483;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:65502;left:154"><nobr>// $binary =&gt; &quot;11010&quot;</nobr></div>
<div style="position:absolute;top:65521;left:154"><nobr>$columns = collect(str_split($binary))</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:65541;left:235"><nobr>-&gt;reverse()</nobr></div>
<div style="position:absolute;top:65560;left:235"><nobr>-&gt;values();</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:65579;left:235"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:65598;left:235"><nobr>//   0 =&gt; &quot;0&quot;,</nobr></div>
<div style="position:absolute;top:65617;left:235"><nobr>//   1 =&gt; &quot;1&quot;,</nobr></div>
<div style="position:absolute;top:65636;left:235"><nobr>//   2 =&gt; &quot;0&quot;,</nobr></div>
<div style="position:absolute;top:65655;left:235"><nobr>//   3 =&gt; &quot;1&quot;,</nobr></div>
<div style="position:absolute;top:65674;left:235"><nobr>//   4 =&gt; &quot;1&quot;,</nobr></div>
<div style="position:absolute;top:65694;left:235"><nobr>// ]</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:65713;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:65764;left:108"><nobr>Now that we've got our columns matched up with their exponents, we're ready</nobr></div>
<div style="position:absolute;top:65785;left:108"><nobr>to convert each column to decimal.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:65831;left:108"><nobr><b>Mapping with Keys</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:65872;left:108"><nobr>So far any time we've used <font style="font-size:13px">map </font>we've only taken a single parameter in the</nobr></div>
<div style="position:absolute;top:65893;left:108"><nobr>callback, but the Laravel Collection actually gives us the <i>key </i>as the second</nobr></div>
<div style="position:absolute;top:65913;left:108"><nobr>parameter as well.</nobr></div>
<div style="position:absolute;top:65947;left:108"><nobr>This makes it really easy for us to map the binary values to their corresponding</nobr></div>
<div style="position:absolute;top:65967;left:108"><nobr>decimal value:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:66002;left:127"><nobr>function binaryToDecimal($binary)</nobr></div>
<div style="position:absolute;top:66021;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:66040;left:154"><nobr>// $binary =&gt; &quot;11010&quot;</nobr></div>
<div style="position:absolute;top:66059;left:154"><nobr>$columns = collect(str_split($binary))</nobr></div>
<div style="position:absolute;top:66078;left:235"><nobr>-&gt;reverse()</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:65345;left:108"><nobr>Chapter 8. Binary to Decimal</nobr></div>
<div style="position:absolute;top:65345;left:634"><nobr>70</nobr></div>
</span></font>

<div style="position:absolute;top:66271;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=71><b>Page 71</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:66382;left:235"><nobr>-&gt;values()</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:66401;left:235"><nobr>-&gt;map(<font color="#a71d5d">function </font>($column, $exponent) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:66420;left:262"><nobr>return <font color="#333333">$column * (2 ** $exponent);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:66439;left:235"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:66459;left:235"><nobr>// =&gt; [0, 2, 0, 8, 16]</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:66478;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:66529;left:108"><nobr>Once we've got all of the decimal values, we can calculate the total using <font style="font-size:13px">sum </font>like</nobr></div>
<div style="position:absolute;top:66550;left:108"><nobr>we did in the Shopify example:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:66585;left:127"><nobr>function <font color="#795da3">binaryToDecimal</font><font color="#333333">($binary)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:66604;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:66623;left:154"><nobr>return <font color="#333333">collect(str_split($binary))</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:66642;left:235"><nobr>-&gt;reverse()</nobr></div>
<div style="position:absolute;top:66661;left:235"><nobr>-&gt;values()</nobr></div>
<div style="position:absolute;top:66680;left:235"><nobr>-&gt;map(<font color="#a71d5d">function </font>($column, $exponent) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:66699;left:262"><nobr>return <font color="#333333">$column * (2 ** $exponent);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:66718;left:235"><nobr>})-&gt;sum();</nobr></div>
<div style="position:absolute;top:66738;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:66789;left:108"><nobr>The nicest thing about this refactoring to me is that there's no more temporary</nobr></div>
<div style="position:absolute;top:66809;left:108"><nobr>state. No taking some data and storing it oL to the side to keep track of</nobr></div>
<div style="position:absolute;top:66830;left:108"><nobr>something while the code goes to do some other work.</nobr></div>
<div style="position:absolute;top:66863;left:108"><nobr>The biggest problem with temporary variables is that they force you to hold</nobr></div>
<div style="position:absolute;top:66884;left:108"><nobr>the entire function in your head at all times to reason about how the function</nobr></div>
<div style="position:absolute;top:66904;left:108"><nobr>works.</nobr></div>
<div style="position:absolute;top:66938;left:108"><nobr>Contrast that with our pipeline solution. Every single operation is entirely</nobr></div>
<div style="position:absolute;top:66958;left:108"><nobr>standalone. I don't need to understand the value of some temporary variable 6</nobr></div>
<div style="position:absolute;top:66978;left:108"><nobr>lines up to know what <font style="font-size:13px">reverse </font>is really doing; it only depends on the output of</nobr></div>
<div style="position:absolute;top:66998;left:108"><nobr>the previous operation and nothing else. To me, that's elegance.</nobr></div>
<div style="position:absolute;top:67032;left:108"><nobr>Alternatively, you could've just used PHP's <font color="#0000ff"><a href="http://php.net/manual/en/function.bindec.php">built-in </a></font><font color="#0000ff" style="font-size:13px"><a href="http://php.net/manual/en/function.bindec.php">bindec </a></font>function ;)</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:66317;left:108"><nobr>71</nobr></div>
<div style="position:absolute;top:66317;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:67243;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=72><b>Page 72</b></a></font></td></tr></table></div><font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:67353;left:108"><nobr><b>What's Your GitHub Score?</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:67400;left:108"><nobr>Here's one that originally came out of an interview question someone shared</nobr></div>
<div style="position:absolute;top:67420;left:108"><nobr>on Reddit.</nobr></div>
<div style="position:absolute;top:67454;left:108"><nobr>GitHub provides a public API endpoint that returns all of a user's recent public</nobr></div>
<div style="position:absolute;top:67474;left:108"><nobr>activity. The JSON response it gives you is an array of objects shaped generally</nobr></div>
<div style="position:absolute;top:67495;left:108"><nobr>like this (simplified a bit for brevity):</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:67530;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:67549;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:67568;left:167"><nobr>&quot;id&quot;<font color="#333333">: </font>&quot;3898913063&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:67587;left:167"><nobr>&quot;type&quot;<font color="#333333">: </font>&quot;PushEvent&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:67606;left:167"><nobr>&quot;public&quot;<font color="#333333">: </font><font color="#0086b3">true</font><font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:67625;left:167"><nobr>&quot;actor&quot;<font color="#333333">: </font>&quot;adamwathan&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:67644;left:167"><nobr>&quot;repo&quot;<font color="#333333">: </font>&quot;tightenco/jigsaw&quot;<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:67663;left:167"><nobr>&quot;payload&quot;<font color="#333333">: { </font><font color="#969896">/* ... */ </font><font color="#333333">}</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:67683;left:154"><nobr>},</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:67702;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:67721;left:127"><nobr>]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:67772;left:108"><nobr>Check it out for yourself by making a <font style="font-size:13px">GET </font>request to this URL:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:67807;left:127"><nobr>https://api.github.com/users/{your-username}/events</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:67859;left:108"><nobr>The interview task was to take these events and determine a user's &quot;GitHub</nobr></div>
<div style="position:absolute;top:67879;left:108"><nobr>Score&quot;, based on the following rules:</nobr></div>
<div style="position:absolute;top:67915;left:127"><nobr>1. Each <font style="font-size:13px">PushEvent </font>is worth 5 points.</nobr></div>
<div style="position:absolute;top:67942;left:125"><nobr>2. Each <font style="font-size:13px">CreateEvent </font>is worth 4 points.</nobr></div>
<div style="position:absolute;top:67969;left:125"><nobr>3. Each <font style="font-size:13px">IssuesEvent </font>is worth 3 points.</nobr></div>
<div style="position:absolute;top:67996;left:125"><nobr>4. Each <font style="font-size:13px">CommitCommentEvent </font>is worth 2 points.</nobr></div>
<div style="position:absolute;top:68023;left:125"><nobr>5. All other events are worth 1 point.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:67289;left:108"><nobr>Chapter 9. What's Your GitHub Score?</nobr></div>
<div style="position:absolute;top:67289;left:634"><nobr>72</nobr></div>
</span></font>

<div style="position:absolute;top:68215;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=73><b>Page 73</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:68324;left:108"><nobr><b>Loops and Conditionals</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:68365;left:108"><nobr>First let's take a look at an imperative approach to solving this problem:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:68400;left:127"><nobr>function <font color="#795da3">githubScore</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68419;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:68439;left:154"><nobr>// Grab the events from the API, in the real world you'd probably use</nobr></div>
<div style="position:absolute;top:68458;left:154"><nobr>// Guzzle or similar here, but keeping it simple for the sake of brevity.</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68477;left:154"><nobr>$url = <font color="#df5000">&quot;https://api.github.com/users/{$username}/events&quot;</font>;</nobr></div>
<div style="position:absolute;top:68496;left:154"><nobr>$events = json_decode(file_get_contents($url), <font color="#a71d5d">true</font>);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:68534;left:154"><nobr>// Get all of the event types</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68553;left:154"><nobr>$eventTypes = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:68592;left:154"><nobr>foreach <font color="#333333">($events </font>as <font color="#333333">$event) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68611;left:181"><nobr>$eventTypes[] = $event[<font color="#df5000">'type'</font>];</nobr></div>
<div style="position:absolute;top:68630;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:68668;left:154"><nobr>// Loop over the event types and add up the corresponding scores</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68687;left:154"><nobr>$score = 0;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:68725;left:154"><nobr>foreach <font color="#333333">($eventTypes </font>as <font color="#333333">$eventType) {</font></nobr></div>
<div style="position:absolute;top:68745;left:181"><nobr>switch <font color="#333333">($eventType) {</font></nobr></div>
<div style="position:absolute;top:68764;left:208"><nobr>case <font color="#df5000">'PushEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68783;left:235"><nobr>$score += 5;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:68802;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:68821;left:208"><nobr>case <font color="#df5000">'CreateEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68840;left:235"><nobr>$score += 4;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:68859;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:68878;left:208"><nobr>case <font color="#df5000">'IssuesEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68898;left:235"><nobr>$score += 3;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:68917;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:68936;left:208"><nobr>case <font color="#df5000">'CommitCommentEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:68955;left:235"><nobr>$score += 2;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:68974;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:68261;left:108"><nobr>73</nobr></div>
<div style="position:absolute;top:68261;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:69187;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=74><b>Page 74</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:69298;left:208"><nobr>default<font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:69317;left:235"><nobr>$score += 1;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:69336;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:69355;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:69375;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:69413;left:154"><nobr>return <font color="#333333">$score;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:69432;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:69484;left:108"><nobr>Let's start cleaning!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:69530;left:108"><nobr><b>Replace Collecting Loop with Pluck</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:69571;left:108"><nobr>First things first, let's wrap the GitHub events in a collection:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:69606;left:140"><nobr>function githubScore($username)</nobr></div>
<div style="position:absolute;top:69625;left:140"><nobr>{</nobr></div>
<div style="position:absolute;top:69645;left:167"><nobr>$url = &quot;https://api.github.com/users/{$username}/events&quot;;</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:69664;left:127"><nobr>-     $events = json_decode(file_get_contents($url), true);</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:69683;left:127"><nobr>+     $events = collect(json_decode(file_get_contents($url), true));</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:69721;left:167"><nobr>// ...</nobr></div>
<div style="position:absolute;top:69740;left:140"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:69792;left:108"><nobr>Now let's take a look at this first loop:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:69827;left:127"><nobr>function githubScore($username)</nobr></div>
<div style="position:absolute;top:69846;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:69865;left:154"><nobr>$url = &quot;https://api.github.com/users/{$username}/events&quot;;</nobr></div>
<div style="position:absolute;top:69884;left:154"><nobr>$events = collect(json_decode(file_get_contents($url), true));</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:69922;left:154"><nobr>$eventTypes = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:69961;left:154"><nobr>foreach <font color="#333333">($events </font>as <font color="#333333">$event) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:69980;left:181"><nobr>$eventTypes[] = $event[<font color="#df5000">'type'</font>];</nobr></div>
<div style="position:absolute;top:69999;left:154"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:69233;left:108"><nobr>Chapter 9. What's Your GitHub Score?</nobr></div>
<div style="position:absolute;top:69233;left:634"><nobr>74</nobr></div>
</span></font>

<div style="position:absolute;top:70159;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=75><b>Page 75</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:70270;left:154"><nobr>$score = 0;</nobr></div>
<div style="position:absolute;top:70308;left:154"><nobr>foreach ($eventTypes as $eventType) {</nobr></div>
<div style="position:absolute;top:70327;left:181"><nobr>switch ($eventType) {</nobr></div>
<div style="position:absolute;top:70347;left:208"><nobr>case 'PushEvent':</nobr></div>
<div style="position:absolute;top:70366;left:235"><nobr>$score += 5;</nobr></div>
<div style="position:absolute;top:70385;left:235"><nobr>break;</nobr></div>
<div style="position:absolute;top:70404;left:208"><nobr>// ...</nobr></div>
<div style="position:absolute;top:70423;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:70442;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:70480;left:154"><nobr>return $score;</nobr></div>
<div style="position:absolute;top:70500;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:70551;left:108"><nobr>We know by know that any time we're <i>transforming </i>each item in an array into</nobr></div>
<div style="position:absolute;top:70571;left:108"><nobr>something new we can use <font style="font-size:13px">map </font>right? In this case, the transformation is so</nobr></div>
<div style="position:absolute;top:70592;left:108"><nobr>simple that we can even use <font style="font-size:13px">pluck</font>, so let's swap that out:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:70627;left:127"><nobr>function githubScore($username)</nobr></div>
<div style="position:absolute;top:70646;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:70665;left:154"><nobr>$url = &quot;https://api.github.com/users/{$username}/events&quot;;</nobr></div>
<div style="position:absolute;top:70684;left:154"><nobr>$events = collect(json_decode(file_get_contents($url), true));</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:70722;left:154"><nobr>$eventTypes = $events-&gt;pluck(<font color="#df5000">'type'</font>);</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:70761;left:154"><nobr>$score = 0;</nobr></div>
<div style="position:absolute;top:70799;left:154"><nobr>foreach ($eventTypes as $eventType) {</nobr></div>
<div style="position:absolute;top:70818;left:181"><nobr>switch ($eventType) {</nobr></div>
<div style="position:absolute;top:70837;left:208"><nobr>case 'PushEvent':</nobr></div>
<div style="position:absolute;top:70856;left:235"><nobr>$score += 5;</nobr></div>
<div style="position:absolute;top:70875;left:235"><nobr>break;</nobr></div>
<div style="position:absolute;top:70894;left:208"><nobr>// ...</nobr></div>
<div style="position:absolute;top:70914;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:70933;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:70971;left:154"><nobr>return $score;</nobr></div>
<div style="position:absolute;top:70990;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:70205;left:108"><nobr>75</nobr></div>
<div style="position:absolute;top:70205;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:71131;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=76><b>Page 76</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:71241;left:108"><nobr>Already four lines gone and a lot more expressive, nice!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:71287;left:108"><nobr><b>Extract Score Conversion with Map</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:71329;left:108"><nobr>How about this second big loop with the <font style="font-size:13px">switch </font>statement?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:71364;left:127"><nobr>function githubScore($username)</nobr></div>
<div style="position:absolute;top:71383;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:71402;left:154"><nobr>$url = &quot;https://api.github.com/users/{$username}/events&quot;;</nobr></div>
<div style="position:absolute;top:71421;left:154"><nobr>$events = collect(json_decode(file_get_contents($url), true));</nobr></div>
<div style="position:absolute;top:71459;left:154"><nobr>$eventTypes = $events-&gt;pluck('type');</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:71497;left:154"><nobr>$score = 0;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:71536;left:154"><nobr>foreach <font color="#333333">($eventTypes </font>as <font color="#333333">$eventType) {</font></nobr></div>
<div style="position:absolute;top:71555;left:181"><nobr>switch <font color="#333333">($eventType) {</font></nobr></div>
<div style="position:absolute;top:71574;left:208"><nobr>case <font color="#df5000">'PushEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:71593;left:235"><nobr>$score += 5;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:71612;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:71631;left:208"><nobr>case <font color="#df5000">'CreateEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:71650;left:235"><nobr>$score += 4;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:71670;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:71689;left:208"><nobr>case <font color="#df5000">'IssuesEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:71708;left:235"><nobr>$score += 3;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:71727;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:71746;left:208"><nobr>case <font color="#df5000">'CommitCommentEvent'</font><font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:71765;left:235"><nobr>$score += 2;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:71784;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
<div style="position:absolute;top:71803;left:208"><nobr>default<font color="#333333">:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:71823;left:235"><nobr>$score += 1;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:71842;left:235"><nobr>break<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:71861;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:71880;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:71918;left:154"><nobr>return <font color="#333333">$score;</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:71937;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:71177;left:108"><nobr>Chapter 9. What's Your GitHub Score?</nobr></div>
<div style="position:absolute;top:71177;left:634"><nobr>76</nobr></div>
</span></font>

<div style="position:absolute;top:72103;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=77><b>Page 77</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:72213;left:108"><nobr>We're trying to sum up a bunch of scores here, but we're doing it using a</nobr></div>
<div style="position:absolute;top:72233;left:108"><nobr>collection of event types.</nobr></div>
<div style="position:absolute;top:72267;left:108"><nobr>Maybe this would be simpler if we could just sum a collection of scores instead?</nobr></div>
<div style="position:absolute;top:72287;left:108"><nobr>Let's convert the event types to scores using <font style="font-size:13px">map</font>, then just return the <font style="font-size:13px">sum </font>of that</nobr></div>
<div style="position:absolute;top:72307;left:108"><nobr>collection:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:72342;left:127"><nobr>function githubScore($username)</nobr></div>
<div style="position:absolute;top:72361;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:72381;left:154"><nobr>$url = &quot;https://api.github.com/users/{$username}/events&quot;;</nobr></div>
<div style="position:absolute;top:72400;left:154"><nobr>$events = collect(json_decode(file_get_contents($url), true));</nobr></div>
<div style="position:absolute;top:72438;left:154"><nobr>$eventTypes = $events-&gt;pluck('type');</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:72476;left:154"><nobr>$scores = $eventTypes-&gt;map(<font color="#a71d5d">function </font>($eventType) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:72495;left:181"><nobr>switch <font color="#333333">($eventType) {</font></nobr></div>
<div style="position:absolute;top:72514;left:208"><nobr>case <font color="#df5000">'PushEvent'</font><font color="#333333">:</font></nobr></div>
<div style="position:absolute;top:72534;left:235"><nobr>return <font color="#333333">5;</font></nobr></div>
<div style="position:absolute;top:72553;left:208"><nobr>case <font color="#df5000">'CreateEvent'</font><font color="#333333">:</font></nobr></div>
<div style="position:absolute;top:72572;left:235"><nobr>return <font color="#333333">4;</font></nobr></div>
<div style="position:absolute;top:72591;left:208"><nobr>case <font color="#df5000">'IssuesEvent'</font><font color="#333333">:</font></nobr></div>
<div style="position:absolute;top:72610;left:235"><nobr>return <font color="#333333">3;</font></nobr></div>
<div style="position:absolute;top:72629;left:208"><nobr>case <font color="#df5000">'CommitCommentEvent'</font><font color="#333333">:</font></nobr></div>
<div style="position:absolute;top:72648;left:235"><nobr>return <font color="#333333">2;</font></nobr></div>
<div style="position:absolute;top:72667;left:208"><nobr>default<font color="#333333">:</font></nobr></div>
<div style="position:absolute;top:72687;left:235"><nobr>return <font color="#333333">1;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:72706;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:72725;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:72763;left:154"><nobr>return <font color="#333333">$scores-&gt;sum();</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:72782;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:72834;left:108"><nobr>This is a little bit better, but that nasty <font style="font-size:13px">switch </font>statement is really cramping our</nobr></div>
<div style="position:absolute;top:72854;left:108"><nobr>style. Let's tackle that next.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:72149;left:108"><nobr>77</nobr></div>
<div style="position:absolute;top:72149;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:73075;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=78><b>Page 78</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:73184;left:108"><nobr><b>Replace Switch with Lookup Table</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:73225;left:108"><nobr>Almost any time you have a <font style="font-size:13px">switch </font>statement like this, you can replace it with</nobr></div>
<div style="position:absolute;top:73246;left:108"><nobr>an associative array lookup, where the <font style="font-size:13px">case </font>becomes the array key:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:73281;left:127"><nobr>function githubScore($username)</nobr></div>
<div style="position:absolute;top:73300;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:73319;left:154"><nobr>$url = &quot;https://api.github.com/users/{$username}/events&quot;;</nobr></div>
<div style="position:absolute;top:73338;left:154"><nobr>$events = collect(json_decode(file_get_contents($url), true));</nobr></div>
<div style="position:absolute;top:73376;left:154"><nobr>$eventTypes = $events-&gt;pluck('type');</nobr></div>
<div style="position:absolute;top:73414;left:154"><nobr>$scores = $eventTypes-&gt;map(function ($eventType) {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:73434;left:181"><nobr>$eventScores = [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:73453;left:208"><nobr>'PushEvent' <font color="#333333">=&gt; 5,</font></nobr></div>
<div style="position:absolute;top:73472;left:208"><nobr>'CreateEvent' <font color="#333333">=&gt; 4,</font></nobr></div>
<div style="position:absolute;top:73491;left:208"><nobr>'IssuesEvent' <font color="#333333">=&gt; 3,</font></nobr></div>
<div style="position:absolute;top:73510;left:208"><nobr>'CommitCommentEvent' <font color="#333333">=&gt; 2,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:73529;left:181"><nobr>];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:73567;left:181"><nobr>return <font color="#333333">$eventScores[$eventType];</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:73587;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:73625;left:154"><nobr>return $scores-&gt;sum();</nobr></div>
<div style="position:absolute;top:73644;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:73696;left:108"><nobr>This feels cleaner to me because <i>looking up </i>the score for an event seems like a</nobr></div>
<div style="position:absolute;top:73716;left:108"><nobr>much more natural model of what we're trying to do vs. a conditional structure</nobr></div>
<div style="position:absolute;top:73736;left:108"><nobr>like <font style="font-size:13px">switch</font>.</nobr></div>
<div style="position:absolute;top:73770;left:108"><nobr>The problem is we've lost the default case, where all other events are given a</nobr></div>
<div style="position:absolute;top:73790;left:108"><nobr>score of 1.</nobr></div>
<div style="position:absolute;top:73824;left:108"><nobr>To get that behavior back, we need to check if our event exists in the lookup</nobr></div>
<div style="position:absolute;top:73844;left:108"><nobr>table before trying to access it:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:73121;left:108"><nobr>Chapter 9. What's Your GitHub Score?</nobr></div>
<div style="position:absolute;top:73121;left:634"><nobr>78</nobr></div>
</span></font>

<div style="position:absolute;top:74047;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=79><b>Page 79</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:74158;left:127"><nobr>function githubScore($username)</nobr></div>
<div style="position:absolute;top:74177;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:74196;left:154"><nobr>// ...</nobr></div>
<div style="position:absolute;top:74235;left:154"><nobr>$scores = $eventTypes-&gt;map(function ($eventType) {</nobr></div>
<div style="position:absolute;top:74254;left:181"><nobr>$eventScores = [</nobr></div>
<div style="position:absolute;top:74273;left:208"><nobr>'PushEvent' =&gt; 5,</nobr></div>
<div style="position:absolute;top:74292;left:208"><nobr>'CreateEvent' =&gt; 4,</nobr></div>
<div style="position:absolute;top:74311;left:208"><nobr>'IssuesEvent' =&gt; 3,</nobr></div>
<div style="position:absolute;top:74330;left:208"><nobr>'CommitCommentEvent' =&gt; 2,</nobr></div>
<div style="position:absolute;top:74349;left:181"><nobr>];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:74388;left:181"><nobr>if <font color="#333333">(! </font>isset<font color="#333333">($eventScores[$eventType])) {</font></nobr></div>
<div style="position:absolute;top:74407;left:208"><nobr>return <font color="#333333">1;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:74426;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:74464;left:181"><nobr>return $eventScores[$eventType];</nobr></div>
<div style="position:absolute;top:74483;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:74521;left:154"><nobr>return $scores-&gt;sum();</nobr></div>
<div style="position:absolute;top:74541;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:74592;left:108"><nobr>All of a sudden this doesn't really seem better than the <font style="font-size:13px">switch </font>statement, but</nobr></div>
<div style="position:absolute;top:74612;left:108"><nobr>fear not, there's still hope!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:74659;left:108"><nobr><b>Associative Collections</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:74700;left:108"><nobr><i>Everything is better as a collection, </i>remember?</nobr></div>
<div style="position:absolute;top:74734;left:108"><nobr>So far we've only used collections for traditional numeric arrays, but</nobr></div>
<div style="position:absolute;top:74754;left:108"><nobr>collections oLer us a lot of power when working with associative arrays as well.</nobr></div>
<div style="position:absolute;top:74788;left:108"><nobr>Have you ever heard of the &quot;Tell, Don't Ask&quot; principle? The general idea is</nobr></div>
<div style="position:absolute;top:74808;left:108"><nobr>that you should avoid asking an object a question about itself to make another</nobr></div>
<div style="position:absolute;top:74828;left:108"><nobr>decision about something you are going to do with that object. Instead, you</nobr></div>
<div style="position:absolute;top:74849;left:108"><nobr>should push that responsibility <i>into </i>that object, so you can just tell it what you</nobr></div>
<div style="position:absolute;top:74869;left:108"><nobr>need without asking questions first.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:74093;left:108"><nobr>79</nobr></div>
<div style="position:absolute;top:74093;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:75019;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=80><b>Page 80</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:75129;left:108"><nobr>How is that relevant in this example? I'm glad you asked! Let's take a look at</nobr></div>
<div style="position:absolute;top:75149;left:108"><nobr>that <font style="font-size:13px">if </font>statement again:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:75184;left:127"><nobr>$eventScores = [</nobr></div>
<div style="position:absolute;top:75203;left:154"><nobr>'PushEvent' =&gt; 5,</nobr></div>
<div style="position:absolute;top:75222;left:154"><nobr>'CreateEvent' =&gt; 4,</nobr></div>
<div style="position:absolute;top:75241;left:154"><nobr>'IssuesEvent' =&gt; 3,</nobr></div>
<div style="position:absolute;top:75261;left:154"><nobr>'CommitCommentEvent' =&gt; 2,</nobr></div>
<div style="position:absolute;top:75280;left:127"><nobr>];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:75318;left:127"><nobr>if <font color="#333333">(! </font>isset<font color="#333333">($eventScores[$eventType])) {</font></nobr></div>
<div style="position:absolute;top:75337;left:154"><nobr>return <font color="#333333">1;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:75356;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:75394;left:127"><nobr>return $eventScores[$eventType];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:75446;left:108"><nobr>Here we are asking the lookup table if it has a value for a certain key, and if it</nobr></div>
<div style="position:absolute;top:75466;left:108"><nobr>doesn't we return a default value.</nobr></div>
<div style="position:absolute;top:75500;left:108"><nobr>Collections let us apply the &quot;Tell, Don't Ask&quot; principle in this situation with the</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:75523;left:108"><nobr>get <font style="font-size:15px">method, which takes a key to look up </font><i><font style="font-size:15px">and a default value to return if that key</font></i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:75541;left:108"><nobr><i>doesn't exist!</i></nobr></div>
<div style="position:absolute;top:75574;left:108"><nobr>If we wrap <font style="font-size:13px">$eventScores </font>in a collection, we can refactor the above code like so:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:75609;left:127"><nobr>$eventScores = collect([</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:75628;left:154"><nobr>'PushEvent' <font color="#333333">=&gt; 5,</font></nobr></div>
<div style="position:absolute;top:75648;left:154"><nobr>'CreateEvent' <font color="#333333">=&gt; 4,</font></nobr></div>
<div style="position:absolute;top:75667;left:154"><nobr>'IssuesEvent' <font color="#333333">=&gt; 3,</font></nobr></div>
<div style="position:absolute;top:75686;left:154"><nobr>'CommitCommentEvent' <font color="#333333">=&gt; 2,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:75705;left:127"><nobr>]);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:75743;left:127"><nobr>return <font color="#333333">$eventScores-&gt;get($eventType, 1);</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:75795;left:108"><nobr>Collapsing that down and putting it back into context of the entire function</nobr></div>
<div style="position:absolute;top:75815;left:108"><nobr>gives us this:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:75065;left:108"><nobr>Chapter 9. What's Your GitHub Score?</nobr></div>
<div style="position:absolute;top:75065;left:634"><nobr>80</nobr></div>
</span></font>

<div style="position:absolute;top:75991;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=81><b>Page 81</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:76102;left:127"><nobr>function <font color="#795da3">githubScore</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:76121;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:76140;left:154"><nobr>$url = <font color="#df5000">&quot;https://api.github.com/users/{$username}/events&quot;</font>;</nobr></div>
<div style="position:absolute;top:76159;left:154"><nobr>$events = collect(json_decode(file_get_contents($url), <font color="#a71d5d">true</font>));</nobr></div>
<div style="position:absolute;top:76198;left:154"><nobr>$eventTypes = $events-&gt;pluck(<font color="#df5000">'type'</font>);</nobr></div>
<div style="position:absolute;top:76236;left:154"><nobr>$scores = $eventTypes-&gt;map(<font color="#a71d5d">function </font>($eventType) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:76255;left:181"><nobr>return <font color="#333333">collect([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:76274;left:208"><nobr>'PushEvent' <font color="#333333">=&gt; 5,</font></nobr></div>
<div style="position:absolute;top:76293;left:208"><nobr>'CreateEvent' <font color="#333333">=&gt; 4,</font></nobr></div>
<div style="position:absolute;top:76312;left:208"><nobr>'IssuesEvent' <font color="#333333">=&gt; 3,</font></nobr></div>
<div style="position:absolute;top:76332;left:208"><nobr>'CommitCommentEvent' <font color="#333333">=&gt; 2,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:76351;left:181"><nobr>])-&gt;get($eventType, 1);</nobr></div>
<div style="position:absolute;top:76370;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:76408;left:154"><nobr>return <font color="#333333">$scores-&gt;sum();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:76427;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:76479;left:108"><nobr>Now we can collapse that entire thing down into a single pipeline:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:76514;left:127"><nobr>function <font color="#795da3">githubScore</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:76533;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:76552;left:154"><nobr>$url = <font color="#df5000">&quot;https://api.github.com/users/{$username}/events&quot;</font>;</nobr></div>
<div style="position:absolute;top:76571;left:154"><nobr>$events = collect(json_decode(file_get_contents($url), <font color="#a71d5d">true</font>));</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:76609;left:154"><nobr>return <font color="#333333">$events-&gt;pluck(</font><font color="#df5000">'type'</font><font color="#333333">)-&gt;map(</font>function <font color="#333333">($eventType) {</font></nobr></div>
<div style="position:absolute;top:76629;left:181"><nobr>return <font color="#333333">collect([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:76648;left:208"><nobr>'PushEvent' <font color="#333333">=&gt; 5,</font></nobr></div>
<div style="position:absolute;top:76667;left:208"><nobr>'CreateEvent' <font color="#333333">=&gt; 4,</font></nobr></div>
<div style="position:absolute;top:76686;left:208"><nobr>'IssuesEvent' <font color="#333333">=&gt; 3,</font></nobr></div>
<div style="position:absolute;top:76705;left:208"><nobr>'CommitCommentEvent' <font color="#333333">=&gt; 2,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:76724;left:181"><nobr>])-&gt;get($eventType, 1);</nobr></div>
<div style="position:absolute;top:76743;left:154"><nobr>})-&gt;sum();</nobr></div>
<div style="position:absolute;top:76762;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:76037;left:108"><nobr>81</nobr></div>
<div style="position:absolute;top:76037;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:76963;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=82><b>Page 82</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:77072;left:108"><nobr><b>Extracting Helper Functions</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:77113;left:108"><nobr>Sometimes the bodies of operations like <font style="font-size:13px">map </font>can grow to several lines, like</nobr></div>
<div style="position:absolute;top:77134;left:108"><nobr>looking up the event score has here.</nobr></div>
<div style="position:absolute;top:77167;left:108"><nobr>We haven't talked about this much so far, but just because we're working with</nobr></div>
<div style="position:absolute;top:77188;left:108"><nobr>collection pipelines doesn't mean we should throw out other good practices</nobr></div>
<div style="position:absolute;top:77208;left:108"><nobr>like extracting logic into small functions.</nobr></div>
<div style="position:absolute;top:77242;left:108"><nobr>In this case, I would extract both the API call and the score lookup into separate</nobr></div>
<div style="position:absolute;top:77262;left:108"><nobr>functions, giving a solution like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:77297;left:127"><nobr>function <font color="#795da3">githubScore</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:77316;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:77335;left:154"><nobr>return <font color="#333333">fetchEvents($username)-&gt;pluck(</font><font color="#df5000">'type'</font><font color="#333333">)-&gt;map(</font>function <font color="#333333">($eventType) {</font></nobr></div>
<div style="position:absolute;top:77354;left:181"><nobr>return <font color="#333333">lookupEventScore($eventType);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:77373;left:154"><nobr>})-&gt;sum();</nobr></div>
<div style="position:absolute;top:77392;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:77431;left:127"><nobr>function <font color="#795da3">fetchEvents</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:77450;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:77469;left:154"><nobr>$url = <font color="#df5000">&quot;https://api.github.com/users/{$username}/events&quot;</font>;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:77488;left:154"><nobr>return <font color="#333333">collect(json_decode(file_get_contents($url), </font>true<font color="#333333">));</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:77507;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:77545;left:127"><nobr>function <font color="#795da3">lookupEventScore</font><font color="#333333">($eventType)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:77565;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:77584;left:154"><nobr>return <font color="#333333">collect([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:77603;left:181"><nobr>'PushEvent' <font color="#333333">=&gt; 5,</font></nobr></div>
<div style="position:absolute;top:77622;left:181"><nobr>'CreateEvent' <font color="#333333">=&gt; 4,</font></nobr></div>
<div style="position:absolute;top:77641;left:181"><nobr>'IssuesEvent' <font color="#333333">=&gt; 3,</font></nobr></div>
<div style="position:absolute;top:77660;left:181"><nobr>'CommitCommentEvent' <font color="#333333">=&gt; 2,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:77679;left:154"><nobr>])-&gt;get($eventType, 1);</nobr></div>
<div style="position:absolute;top:77698;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:77009;left:108"><nobr>Chapter 9. What's Your GitHub Score?</nobr></div>
<div style="position:absolute;top:77009;left:634"><nobr>82</nobr></div>
</span></font>

<div style="position:absolute;top:77935;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=83><b>Page 83</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:78044;left:108"><nobr><b>Encapsulating in a Class</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:78085;left:108"><nobr>What would it look like to fetch someone's GitHub score in a typical modern</nobr></div>
<div style="position:absolute;top:78106;left:108"><nobr>PHP web app? Surely we wouldn't just have a bunch of global functions Noating</nobr></div>
<div style="position:absolute;top:78126;left:108"><nobr>around calling each other right?</nobr></div>
<div style="position:absolute;top:78160;left:108"><nobr>One approach is to create a class that works kind of like a namespace and</nobr></div>
<div style="position:absolute;top:78180;left:108"><nobr>exposes static functions so you can control their visibility:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78215;left:127"><nobr>class <font color="#795da3">GitHubScore</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78234;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78253;left:154"><nobr>public static function <font color="#795da3">forUser</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78272;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78291;left:181"><nobr>return self<font color="#333333">::fetchEvents($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78310;left:208"><nobr>-&gt;pluck(<font color="#df5000">'type'</font>)</nobr></div>
<div style="position:absolute;top:78330;left:208"><nobr>-&gt;map(<font color="#a71d5d">function </font>($eventType) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78349;left:235"><nobr>return self<font color="#333333">::lookupScore($eventType);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78368;left:208"><nobr>})-&gt;sum();</nobr></div>
<div style="position:absolute;top:78387;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78425;left:154"><nobr>private static function <font color="#795da3">fetchEvents</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78444;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:78463;left:181"><nobr>$url = <font color="#df5000">&quot;https://api.github.com/users/{$this-&gt;username}/events&quot;</font>;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78483;left:181"><nobr>return <font color="#333333">collect(json_decode(file_get_contents($url), </font>true<font color="#333333">));</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78502;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78540;left:154"><nobr>private static function <font color="#795da3">lookupScore</font><font color="#333333">($eventType)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78559;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:78578;left:181"><nobr>return <font color="#333333">collect([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:78597;left:208"><nobr>'PushEvent' <font color="#333333">=&gt; 5,</font></nobr></div>
<div style="position:absolute;top:78616;left:208"><nobr>'CreateEvent' <font color="#333333">=&gt; 4,</font></nobr></div>
<div style="position:absolute;top:78636;left:208"><nobr>'IssuesEvent' <font color="#333333">=&gt; 3,</font></nobr></div>
<div style="position:absolute;top:78655;left:208"><nobr>'CommitCommentEvent' <font color="#333333">=&gt; 2,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:78674;left:181"><nobr>])-&gt;get($eventType, 1);</nobr></div>
<div style="position:absolute;top:78693;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:78712;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:77981;left:108"><nobr>83</nobr></div>
<div style="position:absolute;top:77981;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:78907;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=84><b>Page 84</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:79017;left:108"><nobr>With this class, I could make a call like <font style="font-size:13px">GitHubScore::forUser('adamwathan') </font>and</nobr></div>
<div style="position:absolute;top:79037;left:108"><nobr>get a score back.</nobr></div>
<div style="position:absolute;top:79071;left:108"><nobr>One of the issues with this approach is that because we're not working with</nobr></div>
<div style="position:absolute;top:79091;left:108"><nobr>actual objects, we can't keep track of any state anymore. Instead, you end up</nobr></div>
<div style="position:absolute;top:79111;left:108"><nobr>passing the same parameter around in a bunch of places because you don't</nobr></div>
<div style="position:absolute;top:79132;left:108"><nobr>really have anywhere to store that data.</nobr></div>
<div style="position:absolute;top:79165;left:108"><nobr>It's not too bad in this example, but you can see here we have to pass <font style="font-size:13px">$username</font></nobr></div>
<div style="position:absolute;top:79186;left:108"><nobr>into <font style="font-size:13px">fetchEvents </font>since otherwise the method has no way of knowing which</nobr></div>
<div style="position:absolute;top:79206;left:108"><nobr>user's activity to fetch:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:79241;left:127"><nobr>class GitHubScore</nobr></div>
<div style="position:absolute;top:79260;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:79279;left:154"><nobr>public static function forUser($username)</nobr></div>
<div style="position:absolute;top:79298;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:79317;left:181"><nobr>return self<font color="#333333">::fetchEvents($username)</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:79336;left:208"><nobr>-&gt;pluck('type')</nobr></div>
<div style="position:absolute;top:79356;left:208"><nobr>-&gt;map(function ($eventType) {</nobr></div>
<div style="position:absolute;top:79375;left:235"><nobr>return self::lookupScore($event['type']);</nobr></div>
<div style="position:absolute;top:79394;left:208"><nobr>})-&gt;sum();</nobr></div>
<div style="position:absolute;top:79413;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:79451;left:154"><nobr>private static function <font color="#795da3">fetchEvents</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:79470;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:79489;left:181"><nobr>$url = &quot;https://api.github.com/users/{$this-&gt;username}/events&quot;;</nobr></div>
<div style="position:absolute;top:79509;left:181"><nobr>return collect(json_decode(file_get_contents($url), true));</nobr></div>
<div style="position:absolute;top:79528;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:79566;left:154"><nobr>// ...</nobr></div>
<div style="position:absolute;top:79585;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:79637;left:108"><nobr>This can get ugly pretty fast when you've extracted a handful of small methods</nobr></div>
<div style="position:absolute;top:79657;left:108"><nobr>that need access to the same data.</nobr></div>
<div style="position:absolute;top:79691;left:108"><nobr>A neat trick I use in situations like this is to create what I've been calling <i>private</i></nobr></div>
<div style="position:absolute;top:79711;left:108"><nobr><i>instances.</i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:78953;left:108"><nobr>Chapter 9. What's Your GitHub Score?</nobr></div>
<div style="position:absolute;top:78953;left:634"><nobr>84</nobr></div>
</span></font>

<div style="position:absolute;top:79879;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=85><b>Page 85</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:79989;left:108"><nobr>Instead of doing all of the work with static methods, I create an instance of the</nobr></div>
<div style="position:absolute;top:80009;left:108"><nobr>class in the first static method, then delegate all of the work to that instance.</nobr></div>
<div style="position:absolute;top:80043;left:108"><nobr>Here's what it looks like:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80078;left:127"><nobr>class <font color="#795da3">GitHubScore</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80097;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80116;left:154"><nobr>private <font color="#333333">$username;</font></nobr></div>
<div style="position:absolute;top:80154;left:154"><nobr>private function <font color="#795da3">__construct</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80173;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:80193;left:181"><nobr>$this-&gt;username = $username;</nobr></div>
<div style="position:absolute;top:80212;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80250;left:154"><nobr>public static function <font color="#795da3">forUser</font><font color="#333333">($username)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80269;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80288;left:181"><nobr>return <font color="#333333">(</font>new self<font color="#333333">($username))-&gt;score();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80307;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80346;left:154"><nobr>private function <font color="#795da3">score</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80365;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:80384;left:181"><nobr>$this-&gt;events()-&gt;pluck(<font color="#df5000">'type'</font>)-&gt;map(<font color="#a71d5d">function </font>($eventType) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80403;left:208"><nobr>return <font color="#333333">$this-&gt;lookupScore($eventType);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80422;left:181"><nobr>})-&gt;sum();</nobr></div>
<div style="position:absolute;top:80441;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80479;left:154"><nobr>private function <font color="#795da3">events</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80499;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:80518;left:181"><nobr>$url = <font color="#df5000">&quot;https://api.github.com/users/{$this-&gt;username}/events&quot;</font>;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80537;left:181"><nobr>return <font color="#333333">collect(json_decode(file_get_contents($url), </font>true<font color="#333333">));</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80556;left:154"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:79925;left:108"><nobr>85</nobr></div>
<div style="position:absolute;top:79925;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:80851;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=86><b>Page 86</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:80962;left:154"><nobr>private function <font color="#795da3">lookupScore</font><font color="#333333">($eventType)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:80981;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:81000;left:181"><nobr>return <font color="#333333">collect([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:81019;left:208"><nobr>'PushEvent' <font color="#333333">=&gt; 5,</font></nobr></div>
<div style="position:absolute;top:81039;left:208"><nobr>'CreateEvent' <font color="#333333">=&gt; 4,</font></nobr></div>
<div style="position:absolute;top:81058;left:208"><nobr>'IssuesEvent' <font color="#333333">=&gt; 3,</font></nobr></div>
<div style="position:absolute;top:81077;left:208"><nobr>'CommitCommentEvent' <font color="#333333">=&gt; 2,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:81096;left:181"><nobr>])-&gt;get($eventType, 1);</nobr></div>
<div style="position:absolute;top:81115;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:81134;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:81186;left:108"><nobr>You get the same convenient static API, but internally you get to work with an</nobr></div>
<div style="position:absolute;top:81206;left:108"><nobr>object that has it's own state, which keeps your method signatures short and</nobr></div>
<div style="position:absolute;top:81226;left:108"><nobr>simple. Pretty neat stuL!</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:81280;left:108"><nobr><b>Formatting a Pull Request Comment</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:81328;left:108"><nobr>That last example was pretty heavy, so here's another quick one.</nobr></div>
<div style="position:absolute;top:81361;left:108"><nobr>I run a small SaaS application called <font color="#0000ff"><a href="https://nitpick-ci.com">Nitpick CI </a></font>that looks for PSR-2 violations</nobr></div>
<div style="position:absolute;top:81382;left:108"><nobr>in GitHub pull requests and points them out by commenting on the oLending</nobr></div>
<div style="position:absolute;top:81402;left:108"><nobr>lines.</nobr></div>
<div style="position:absolute;top:81436;left:108"><nobr>A single line of code can have multiple PSR-2 violations, so at one point in the</nobr></div>
<div style="position:absolute;top:81456;left:108"><nobr>review process I need to take the violations for a given line and turn them into</nobr></div>
<div style="position:absolute;top:81476;left:108"><nobr>a single comment that I can post to GitHub.</nobr></div>
<div style="position:absolute;top:81510;left:108"><nobr>The violation messages for one line start as a simple collection like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:81545;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:81564;left:154"><nobr>'Opening brace must be the last content on the line'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:81583;left:154"><nobr>'Closing brace must be on a line by itself'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:81602;left:154"><nobr>'Each PHP statement must be on a line by itself'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:81621;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:81673;left:108"><nobr>GitHub comments support Markdown, and I'd like to display these messages as</nobr></div>
<div style="position:absolute;top:81693;left:108"><nobr>an unordered list, so from that array I need to generate this string:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:80897;left:108"><nobr>Chapter 10. Formatting a Pull Request Comment</nobr></div>
<div style="position:absolute;top:80897;left:634"><nobr>86</nobr></div>
</span></font>

<div style="position:absolute;top:81823;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=87><b>Page 87</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:81934;left:127"><nobr>&quot;- Opening brace must be the last content on the line\n- Closing brace must</nobr></div>
<div style="position:absolute;top:81953;left:127"><nobr>be on a line by itself\n- Each PHP statement must be on a line by itself\n&quot;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:82005;left:108"><nobr>Let's get to work!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:82051;left:108"><nobr><b>Concatenating in a Loop</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:82093;left:108"><nobr>Here's how we might've solved this problem using a procedural style:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:82128;left:127"><nobr>private function <font color="#795da3">buildComment</font><font color="#333333">($messages)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:82147;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:82166;left:154"><nobr>$comment = <font color="#df5000">''</font>;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:82204;left:154"><nobr>foreach <font color="#333333">($messages </font>as <font color="#333333">$message) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:82223;left:181"><nobr>$comment .= <font color="#df5000">&quot;- {$message}\n&quot;</font>;</nobr></div>
<div style="position:absolute;top:82242;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:82281;left:154"><nobr>return <font color="#333333">$comment;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:82300;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:82351;left:108"><nobr><b>Map and Implode</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:82392;left:108"><nobr>...and here's how we can solve it using collections:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:82427;left:127"><nobr>private function <font color="#795da3">buildComment</font><font color="#333333">($messages)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:82446;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:82465;left:154"><nobr>return <font color="#333333">$messages-&gt;map(</font>function <font color="#333333">($message) {</font></nobr></div>
<div style="position:absolute;top:82484;left:181"><nobr>return <font color="#df5000">&quot;- {$message}\n&quot;</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:82503;left:154"><nobr>})-&gt;implode(<font color="#df5000">''</font>);</nobr></div>
<div style="position:absolute;top:82522;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:82574;left:108"><nobr>Both solutions are pretty short and easy to follow, but I love that the collection</nobr></div>
<div style="position:absolute;top:82594;left:108"><nobr>solution is made up of single, independent operations.</nobr></div>
<div style="position:absolute;top:82628;left:108"><nobr>In the concatenation-based solution, the function only makes sense as a whole,</nobr></div>
<div style="position:absolute;top:82648;left:108"><nobr>but with the pipeline approach, every step is a complete and encapsulated</nobr></div>
<div style="position:absolute;top:82669;left:108"><nobr>transformation that can stand on its own.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:81869;left:108"><nobr>87</nobr></div>
<div style="position:absolute;top:81869;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:82795;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=88><b>Page 88</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:82905;left:108"><nobr>It's subtle, but as problems grow in complexity, being able to slice them up into</nobr></div>
<div style="position:absolute;top:82925;left:108"><nobr>discrete operations that each work on the entire data set at once really helps</nobr></div>
<div style="position:absolute;top:82945;left:108"><nobr>make code easier to understand.</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:82999;left:108"><nobr><b>Stealing Mail</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:83047;left:108"><nobr>In a recent project, I needed to write some tests that made sure certain emails</nobr></div>
<div style="position:absolute;top:83067;left:108"><nobr>were being sent to the right email addresses.</nobr></div>
<div style="position:absolute;top:83101;left:108"><nobr>To do this, I wrote my own fake in-memory mail implementation that would</nobr></div>
<div style="position:absolute;top:83121;left:108"><nobr>intercept and store emails, allowing me to inspect them and make assertions</nobr></div>
<div style="position:absolute;top:83141;left:108"><nobr>against them.</nobr></div>
<div style="position:absolute;top:83175;left:108"><nobr>To make sure that emails were being sent to the correct people, I needed a</nobr></div>
<div style="position:absolute;top:83195;left:108"><nobr>method that took an email address as a parameter and checked to see if any of</nobr></div>
<div style="position:absolute;top:83215;left:108"><nobr>the sent messages contained that address in their recipients list.</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:83250;left:127"><nobr>public function <font color="#795da3">test_new_users_are_sent_a_welcome_email</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:83269;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:83289;left:154"><nobr>$mailer = <font color="#a71d5d">new </font>InMemoryMailer;</nobr></div>
<div style="position:absolute;top:83308;left:154"><nobr>Mail::swap($mailer);</nobr></div>
<div style="position:absolute;top:83346;left:154"><nobr>$this-&gt;post(<font color="#df5000">'register'</font>, [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:83365;left:181"><nobr>'name' <font color="#333333">=&gt; </font>'John Doe'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:83384;left:181"><nobr>'email' <font color="#333333">=&gt; </font>'john@example.com'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:83403;left:181"><nobr>'password' <font color="#333333">=&gt; </font>'secret'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:83422;left:154"><nobr>]);</nobr></div>
<div style="position:absolute;top:83461;left:154"><nobr>$this-&gt;assertTrue($mailer-&gt;hasMessageFor(<font color="#df5000">'john@example.com'</font>));</nobr></div>
<div style="position:absolute;top:83480;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:83531;left:108"><nobr>Here's the relevant bits of the fake mailer:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:82841;left:108"><nobr>Chapter 11. Stealing Mail</nobr></div>
<div style="position:absolute;top:82841;left:634"><nobr>88</nobr></div>
</span></font>

<div style="position:absolute;top:83767;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=89><b>Page 89</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:83878;left:127"><nobr>class <font color="#795da3">InMemoryMailer</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:83897;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:83916;left:154"><nobr>private <font color="#333333">$messages = [];</font></nobr></div>
<div style="position:absolute;top:83955;left:154"><nobr>public function <font color="#795da3">hasMessageFor</font><font color="#333333">($email)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:83974;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:83993;left:181"><nobr>// ???</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:84012;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:84050;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:84069;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:84121;left:108"><nobr>For our purposes we'll say each message in the <font style="font-size:13px">$messages </font>array is just an</nobr></div>
<div style="position:absolute;top:84141;left:108"><nobr>associative array shaped like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:84176;left:127"><nobr>$message = [</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:84195;left:154"><nobr>'subject' <font color="#333333">=&gt; </font>'An example email subject!'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:84214;left:154"><nobr>'recipients' <font color="#333333">=&gt; [</font>'jane@example.com'<font color="#333333">, </font>'john@example.com'<font color="#333333">, </font>'mary@example.com'<font color="#333333">],</font></nobr></div>
<div style="position:absolute;top:84234;left:154"><nobr>'body' <font color="#333333">=&gt; </font>'An example email body.'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:84253;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:84304;left:108"><nobr>So how could we implement the <font style="font-size:13px">hasMessageFor </font>method? Here's an imperative</nobr></div>
<div style="position:absolute;top:84325;left:108"><nobr>solution for us to use as a starting point:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:84360;left:127"><nobr>public function <font color="#795da3">hasMessageFor</font><font color="#333333">($email)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:84379;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:84398;left:154"><nobr>foreach <font color="#333333">($this-&gt;messages </font>as <font color="#333333">$message) {</font></nobr></div>
<div style="position:absolute;top:84417;left:181"><nobr>foreach <font color="#333333">($message[</font><font color="#df5000">'recipients'</font><font color="#333333">] </font>as <font color="#333333">$recipient) {</font></nobr></div>
<div style="position:absolute;top:84436;left:208"><nobr>if <font color="#333333">($recipient == $email) {</font></nobr></div>
<div style="position:absolute;top:84455;left:235"><nobr>return true<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:84474;left:208"><nobr>}</nobr></div>
<div style="position:absolute;top:84493;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:84513;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:84551;left:154"><nobr>return false<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:84570;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:83813;left:108"><nobr>89</nobr></div>
<div style="position:absolute;top:83813;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:84739;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=90><b>Page 90</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:84848;left:108"><nobr><b>Replace Nested Check with Contains</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:84889;left:108"><nobr>The nested control structures in this solution have got to go. Let's tackle this</nobr></div>
<div style="position:absolute;top:84910;left:108"><nobr>nested <font style="font-size:13px">foreach </font>loop first:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:84945;left:127"><nobr>public function hasMessageFor($email)</nobr></div>
<div style="position:absolute;top:84964;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:84983;left:154"><nobr>foreach ($this-&gt;messages as $message) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:85002;left:181"><nobr>foreach <font color="#333333">($message[</font><font color="#df5000">'recipients'</font><font color="#333333">] </font>as <font color="#333333">$recipient) {</font></nobr></div>
<div style="position:absolute;top:85021;left:208"><nobr>if <font color="#333333">($recipient == $email) {</font></nobr></div>
<div style="position:absolute;top:85040;left:235"><nobr>return true<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:85059;left:208"><nobr>}</nobr></div>
<div style="position:absolute;top:85078;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:85098;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:85136;left:154"><nobr>return false;</nobr></div>
<div style="position:absolute;top:85155;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:85207;left:108"><nobr>All we're really trying to do here is check if <font style="font-size:13px">$email </font>is in the recipients list of the</nobr></div>
<div style="position:absolute;top:85227;left:108"><nobr>current message. Or put another way, does the recipients list <i>contain </i>the email</nobr></div>
<div style="position:absolute;top:85247;left:108"><nobr>address we're looking for?</nobr></div>
<div style="position:absolute;top:85281;left:108"><nobr>Remember the <font style="font-size:13px">contains </font>method we touched on way back in the first example?</nobr></div>
<div style="position:absolute;top:85301;left:108"><nobr>If we wrap the recipients list in a collection, we can use <font style="font-size:13px">contains </font>here to get rid</nobr></div>
<div style="position:absolute;top:85321;left:108"><nobr>of the second loop:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:85356;left:127"><nobr>public function hasMessageFor($email)</nobr></div>
<div style="position:absolute;top:85375;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:85395;left:154"><nobr>foreach ($this-&gt;messages as $message) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:85414;left:181"><nobr>if <font color="#333333">(collect($message[</font><font color="#df5000">'recipients'</font><font color="#333333">])-&gt;contains($email)) {</font></nobr></div>
<div style="position:absolute;top:85433;left:208"><nobr>return true<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:85452;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:85471;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:85509;left:154"><nobr>return false;</nobr></div>
<div style="position:absolute;top:85528;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:85580;left:108"><nobr>That's one loop gone, now what about the first one?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:84785;left:108"><nobr>Chapter 11. Stealing Mail</nobr></div>
<div style="position:absolute;top:84785;left:634"><nobr>90</nobr></div>
</span></font>

<div style="position:absolute;top:85711;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=91><b>Page 91</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:85820;left:108"><nobr><b>Contains as a Higher Order Function</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:85861;left:108"><nobr>If I had to describe what we're really trying to do here, I'd say something like:</nobr></div>
<div style="position:absolute;top:85897;left:142"><nobr><i>Check to see if our messages list contains a message with this email address in</i></nobr></div>
<div style="position:absolute;top:85917;left:142"><nobr><i>its recipients list.</i></nobr></div>
<div style="position:absolute;top:85952;left:108"><nobr>Up to this point we've used <font style="font-size:13px">contains </font>to look for a specific <i>value</i>, but checking to</nobr></div>
<div style="position:absolute;top:85972;left:108"><nobr>see if something contains &quot;a message with this email address in its recipients</nobr></div>
<div style="position:absolute;top:85993;left:108"><nobr>list&quot; is a bit more sophisticated than that.</nobr></div>
<div style="position:absolute;top:86026;left:108"><nobr>Thankfully, <font style="font-size:13px">contains </font>is a lot more powerful than you might think! Not only can</nobr></div>
<div style="position:absolute;top:86047;left:108"><nobr>you pass <font style="font-size:13px">contains </font>a value to check for, you can also pass a <i>closure.</i></nobr></div>
<div style="position:absolute;top:86080;left:108"><nobr>When we pass a closure, we're saying <i>&quot;check if the collection contains any items</i></nobr></div>
<div style="position:absolute;top:86101;left:108"><nobr><i>where this expression is true.&quot; </i>The closure gets called for every item in the</nobr></div>
<div style="position:absolute;top:86121;left:108"><nobr>collection, and takes the item <i>key </i>as its first parameter and the item <i>value </i>as its</nobr></div>
<div style="position:absolute;top:86141;left:108"><nobr>second parameter.</nobr></div>
<div style="position:absolute;top:86175;left:108"><nobr>For example, we could check if a collection of names contained any names</nobr></div>
<div style="position:absolute;top:86195;left:108"><nobr>longer than 8 characters like so:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:86230;left:127"><nobr>$names = collect([<font color="#df5000">'Adam'</font>, <font color="#df5000">'Katharine'</font>, <font color="#df5000">'Jane'</font>, <font color="#df5000">'Steven'</font>]);</nobr></div>
<div style="position:absolute;top:86269;left:127"><nobr>$names-&gt;contains(<font color="#a71d5d">function </font>($i, $name) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:86288;left:154"><nobr>return <font color="#333333">strlen($name) &gt; 8;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:86307;left:127"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:86326;left:127"><nobr>// =&gt; true</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:86377;left:108"><nobr>Using this new super power, we can replace the loop that iterates over our</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:86400;left:108"><nobr>$messages <font style="font-size:15px">with a </font>contains <font style="font-size:15px">call that checks if any messages were sent to the</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:86418;left:108"><nobr>specified email address:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:85757;left:108"><nobr>91</nobr></div>
<div style="position:absolute;top:85757;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:86683;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=92><b>Page 92</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:86794;left:127"><nobr>public function <font color="#795da3">hasMessageFor</font><font color="#333333">($email)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:86813;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:86832;left:154"><nobr>return <font color="#333333">collect($this-&gt;messages)-&gt;contains(</font>function <font color="#333333">($i, $message) </font><font color="#795da3">use </font><font color="#333333">($email) {</font></nobr></div>
<div style="position:absolute;top:86851;left:181"><nobr>if <font color="#333333">(collect($message[</font><font color="#df5000">'recipients'</font><font color="#333333">])-&gt;contains($email)) {</font></nobr></div>
<div style="position:absolute;top:86871;left:208"><nobr>return true<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:86890;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:86909;left:181"><nobr>return false<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:86928;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:86947;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:86999;left:108"><nobr>We can simplify the closure too, since we're just returning <font style="font-size:13px">true </font>or <font style="font-size:13px">false </font>based</nobr></div>
<div style="position:absolute;top:87019;left:108"><nobr>on the result of some condition:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:87054;left:140"><nobr>public function hasMessageFor($email)</nobr></div>
<div style="position:absolute;top:87073;left:140"><nobr>{</nobr></div>
<div style="position:absolute;top:87092;left:167"><nobr>return collect($this-&gt;messages)-&gt;contains(function ($i, $message) use ($email) {</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:87111;left:127"><nobr>-    </nobr></div>
<div style="position:absolute;top:87111;left:194"><nobr>if (collect($message['recipients'])-&gt;contains($email)) {</nobr></div>
<div style="position:absolute;top:87130;left:127"><nobr>-    </nobr></div>
<div style="position:absolute;top:87130;left:221"><nobr>return true;</nobr></div>
<div style="position:absolute;top:87150;left:127"><nobr>-    </nobr></div>
<div style="position:absolute;top:87150;left:194"><nobr>}</nobr></div>
<div style="position:absolute;top:87169;left:127"><nobr>-    </nobr></div>
<div style="position:absolute;top:87169;left:194"><nobr>return false;</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:87188;left:127"><nobr>+    </nobr></div>
<div style="position:absolute;top:87188;left:194"><nobr>return (collect($message['recipients'])-&gt;contains($email);</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:87207;left:167"><nobr>});</nobr></div>
<div style="position:absolute;top:87226;left:140"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:87278;left:108"><nobr>Whenever possible, I try to make sure I'm working with a collection rather than</nobr></div>
<div style="position:absolute;top:87298;left:108"><nobr>array as early in the process as possible, so since we control the <font style="font-size:13px">InMemoryMailer</font></nobr></div>
<div style="position:absolute;top:87318;left:108"><nobr>class, I would just make <font style="font-size:13px">$messages </font>a collection from the beginning:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:87353;left:127"><nobr>class <font color="#795da3">InMemoryMailer</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:87372;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:87391;left:154"><nobr>private <font color="#333333">$messages;</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:86729;left:108"><nobr>Chapter 11. Stealing Mail</nobr></div>
<div style="position:absolute;top:86729;left:634"><nobr>92</nobr></div>
</span></font>

<div style="position:absolute;top:87655;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=93><b>Page 93</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:87766;left:154"><nobr>public function <font color="#795da3">__construct</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:87785;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:87804;left:181"><nobr>$this-&gt;messages = <font color="#a71d5d">new </font>Collection;</nobr></div>
<div style="position:absolute;top:87823;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:87862;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:87881;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:87932;left:108"><nobr>That saves us a handful of characters in <font style="font-size:13px">hasMessageFor </font>and leaves us with this</nobr></div>
<div style="position:absolute;top:87953;left:108"><nobr>solution, completely free of loops and conditionals:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:87988;left:127"><nobr>public function <font color="#795da3">hasMessageFor</font><font color="#333333">($email)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:88007;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:88026;left:154"><nobr>return <font color="#333333">$this-&gt;messages-&gt;contains(</font>function <font color="#333333">($i, $message) </font><font color="#795da3">use </font><font color="#333333">($email) {</font></nobr></div>
<div style="position:absolute;top:88045;left:181"><nobr>return <font color="#333333">collect($message[</font><font color="#df5000">'recipients'</font><font color="#333333">])-&gt;contains($email);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:88064;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:88083;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:88135;left:108"><nobr>For the sake of keeping the example short, we just used a simple associative</nobr></div>
<div style="position:absolute;top:88155;left:108"><nobr>array for each <font style="font-size:13px">$message</font>, but in the actual implementation I had a dedicated</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:88178;left:108"><nobr>Message <font style="font-size:15px">object that let me simplify the code a bit further:</font></nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:88210;left:127"><nobr>public function <font color="#795da3">hasMessageFor</font><font color="#333333">($email)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:88230;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:88249;left:154"><nobr>return <font color="#333333">$this-&gt;messages-&gt;contains(</font>function <font color="#333333">($i, $message) </font><font color="#795da3">use </font><font color="#333333">($email) {</font></nobr></div>
<div style="position:absolute;top:88268;left:181"><nobr>return <font color="#333333">$message-&gt;hasRecipient($email);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:88287;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:88306;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:88358;left:108"><nobr>Inside the <font style="font-size:13px">Message </font>object, <font style="font-size:13px">hasRecipient </font>just contains the code we previously had</nobr></div>
<div style="position:absolute;top:88378;left:108"><nobr>inline:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:88413;left:127"><nobr>class <font color="#795da3">Message</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:88432;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:88451;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:87701;left:108"><nobr>93</nobr></div>
<div style="position:absolute;top:87701;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:88627;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=94><b>Page 94</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:88738;left:154"><nobr>public function <font color="#795da3">hasRecipient</font><font color="#333333">($email)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:88757;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:88776;left:181"><nobr>return <font color="#333333">$this-&gt;recipients-&gt;contains($email);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:88795;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:88815;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:88866;left:108"><nobr>Much more declarative than our original loop-based solution, and much more</nobr></div>
<div style="position:absolute;top:88886;left:108"><nobr>expressive as a result!</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:88940;left:108"><nobr><b>Choosing a Syntax Handler</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:88988;left:108"><nobr>Here's another example from <font color="#0000ff"><a href="https://nitpick-ci.com">Nitpick CI</a></font><a href="https://nitpick-ci.com"></a>.</nobr></div>
<div style="position:absolute;top:89021;left:108"><nobr>Nitpick focuses on checking PHP files for PSR-2 violations, but I built it to be</nobr></div>
<div style="position:absolute;top:89042;left:108"><nobr>extensible so that I could easily check other languages down the road.</nobr></div>
<div style="position:absolute;top:89075;left:108"><nobr>To support this, the <font style="font-size:13px">Nitpicker </font>object that co-ordinates the bulk of the analysis</nobr></div>
<div style="position:absolute;top:89096;left:108"><nobr>holds on to a collection of <i>style checkers. </i>Any time a file needs to be checked for</nobr></div>
<div style="position:absolute;top:89116;left:108"><nobr>style violations, the <font style="font-size:13px">Nitpicker </font>looks up the appropriate style checker and asks it</nobr></div>
<div style="position:absolute;top:89136;left:108"><nobr>for any violations it finds in the file.</nobr></div>
<div style="position:absolute;top:89170;left:108"><nobr>A style checker needs to provide two methods:</nobr></div>
<div style="position:absolute;top:89205;left:127"><nobr>1. A <font style="font-size:13px">canCheck </font>method that takes a <font style="font-size:13px">ChangedFile </font>object, and returns true or</nobr></div>
<div style="position:absolute;top:89226;left:149"><nobr>false depending on whether that style checker can check that particular</nobr></div>
<div style="position:absolute;top:89246;left:149"><nobr>file.</nobr></div>
<div style="position:absolute;top:89273;left:125"><nobr>2. A <font style="font-size:13px">check </font>method that takes a <font style="font-size:13px">ChangedFile </font>object, and returns a collection of</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:89296;left:149"><nobr>Violation <font style="font-size:15px">objects, representing style violations inside the file.</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:89328;left:108"><nobr>After a file is checked, I create a new <font style="font-size:13px">CheckedFile </font>object, passing the original file</nobr></div>
<div style="position:absolute;top:89349;left:108"><nobr>and the detected violations into the constructor.</nobr></div>
<div style="position:absolute;top:89382;left:108"><nobr>If I don't happen to have a style checker that can check that file, I just create a</nobr></div>
<div style="position:absolute;top:89403;left:108"><nobr>new <font style="font-size:13px">CheckedFile </font>with an empty collection of violations.</nobr></div>
<div style="position:absolute;top:89436;left:108"><nobr>Here's what checking a file looks like at a high level:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:88673;left:108"><nobr>Chapter 12. Choosing a Syntax Handler</nobr></div>
<div style="position:absolute;top:88673;left:634"><nobr>94</nobr></div>
</span></font>

<div style="position:absolute;top:89599;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=95><b>Page 95</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:89710;left:127"><nobr>class <font color="#795da3">Nitpicker</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:89729;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:89748;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:89787;left:154"><nobr>private function <font color="#795da3">checkFile</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:89806;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:89825;left:181"><nobr>if <font color="#333333">($this-&gt;hasCheckerFor($file)) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:89844;left:208"><nobr>$checker = $this-&gt;getCheckerFor($file);</nobr></div>
<div style="position:absolute;top:89863;left:208"><nobr>$violations = $checker-&gt;check($file);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:89882;left:208"><nobr>return new <font color="#333333">CheckedFile($file, $violations);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:89901;left:181"><nobr>} <font color="#a71d5d">else </font>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:89920;left:208"><nobr>return new <font color="#333333">CheckedFile($file, []);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:89940;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:89959;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:89997;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:90016;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:90068;left:108"><nobr>Let's look at how <font style="font-size:13px">hasCheckerFor </font>and <font style="font-size:13px">getCheckerFor </font>could be implemented.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:90114;left:108"><nobr><b>Looking for a Match</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:90155;left:108"><nobr>Before we can check a file, we need to make sure we actually have a checker</nobr></div>
<div style="position:absolute;top:90176;left:108"><nobr>capable of doing the checking, right? Here's how we might implement</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:90199;left:108"><nobr>hasCheckerFor <font style="font-size:15px">using an imperative approach:</font></nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:90231;left:127"><nobr>private function <font color="#795da3">hasCheckerFor</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:90250;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:90269;left:154"><nobr>foreach <font color="#333333">($this-&gt;checkers </font>as <font color="#333333">$checker) {</font></nobr></div>
<div style="position:absolute;top:90288;left:181"><nobr>if <font color="#333333">($checker-&gt;canCheck($file)) {</font></nobr></div>
<div style="position:absolute;top:90307;left:208"><nobr>return true<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:90327;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:90346;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:90384;left:154"><nobr>return false<font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:90403;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:89645;left:108"><nobr>95</nobr></div>
<div style="position:absolute;top:89645;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:90571;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=96><b>Page 96</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:90681;left:108"><nobr>This is the same pattern we ran into in the &quot;Finding an Email&quot; example, and we</nobr></div>
<div style="position:absolute;top:90701;left:108"><nobr>can refactor it to use <font style="font-size:13px">contains </font>in the same way:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:90736;left:127"><nobr>private function <font color="#795da3">hasCheckerFor</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:90755;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:90774;left:154"><nobr>return <font color="#333333">$this-&gt;checkers-&gt;contains(</font>function <font color="#333333">($i, $checker) </font><font color="#795da3">use </font><font color="#333333">($file)) {</font></nobr></div>
<div style="position:absolute;top:90793;left:181"><nobr>return <font color="#333333">$checker-&gt;canCheck($file);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:90813;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:90832;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:90883;left:108"><nobr>Instead of looping over all of the checkers manually to see if there's any that</nobr></div>
<div style="position:absolute;top:90904;left:108"><nobr>can do the check, we just ask:</nobr></div>
<div style="position:absolute;top:90937;left:108"><nobr><i>&quot;Does our collection of checkers contain a checker that can check this 4le?&quot;</i></nobr></div>
<div style="position:absolute;top:90971;left:108"><nobr>Great! Now how about actually retrieving the checker we need?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:91018;left:108"><nobr><b>Getting the Right Checker</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:91059;left:108"><nobr>Using an imperative style, getting the matching checker looks a lot like</nobr></div>
<div style="position:absolute;top:91079;left:108"><nobr>checking to see if we have a matching checker in the first place:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:91114;left:127"><nobr>private function <font color="#795da3">getCheckerFor</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:91133;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:91152;left:154"><nobr>foreach <font color="#333333">($this-&gt;checkers </font>as <font color="#333333">$checker) {</font></nobr></div>
<div style="position:absolute;top:91171;left:181"><nobr>if <font color="#333333">($checker-&gt;canCheck($file)) {</font></nobr></div>
<div style="position:absolute;top:91191;left:208"><nobr>return <font color="#333333">$checker;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:91210;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:91229;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:91248;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:91300;left:108"><nobr>Instead of returning <font style="font-size:13px">true </font>or <font style="font-size:13px">false </font>when we find a matching checker, we just</nobr></div>
<div style="position:absolute;top:91320;left:108"><nobr>return the <font style="font-size:13px">$checker </font>itself.</nobr></div>
<div style="position:absolute;top:91354;left:108"><nobr>So how can we refactor this using collection methods?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:90617;left:108"><nobr>Chapter 12. Choosing a Syntax Handler</nobr></div>
<div style="position:absolute;top:90617;left:634"><nobr>96</nobr></div>
</span></font>

<div style="position:absolute;top:91543;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=97><b>Page 97</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:91652;left:108"><nobr><b>Replace Iteration with First</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:91693;left:108"><nobr>The collection class has a <font style="font-size:13px">first </font>method that returns the first element in the</nobr></div>
<div style="position:absolute;top:91714;left:108"><nobr>collection:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:91749;left:127"><nobr>collect([1, 2, 3])-&gt;first();</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:91768;left:127"><nobr>// =&gt; 1</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:91819;left:108"><nobr>Okay, so what? <i>Well, </i>just like <font style="font-size:13px">contains</font>, <font style="font-size:13px">first </font>can also take a closure.</nobr></div>
<div style="position:absolute;top:91853;left:108"><nobr>When you pass a closure to <font style="font-size:13px">first</font>, you're saying &quot;give me the first element</nobr></div>
<div style="position:absolute;top:91873;left:108"><nobr>where this callback returns true.&quot;</nobr></div>
<div style="position:absolute;top:91907;left:108"><nobr>For example, here's how we could find the first name in a collection that starts</nobr></div>
<div style="position:absolute;top:91927;left:108"><nobr>with the letter B:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:91962;left:127"><nobr>$names = collect([<font color="#df5000">'Adam'</font>, <font color="#df5000">'Tracy'</font>, <font color="#df5000">'Ben'</font>, <font color="#df5000">'Beatrice'</font>, <font color="#df5000">'Kyle'</font>]);</nobr></div>
<div style="position:absolute;top:91981;left:127"><nobr>$names-&gt;first(<font color="#a71d5d">function </font>($i, $name) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:92001;left:154"><nobr>return <font color="#333333">$name[0] == </font><font color="#df5000">'B'</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:92020;left:127"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:92039;left:127"><nobr>// =&gt; 'Ben'</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:92090;left:108"><nobr>Just like <font style="font-size:13px">contains</font>, the callback takes the element key as the first parameter, and</nobr></div>
<div style="position:absolute;top:92111;left:108"><nobr>the value as the second parameter.</nobr></div>
<div style="position:absolute;top:92144;left:108"><nobr>So using <font style="font-size:13px">first</font>, we can refactor <font style="font-size:13px">getCheckerFor </font>to look like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:92179;left:127"><nobr>private function <font color="#795da3">getCheckerFor</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:92199;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:92218;left:154"><nobr>return <font color="#333333">$this-&gt;checkers-&gt;first(</font>function <font color="#333333">($i, $checker) </font><font color="#795da3">use </font><font color="#333333">($file) {</font></nobr></div>
<div style="position:absolute;top:92237;left:181"><nobr>return <font color="#333333">$checker-&gt;canCheck($file);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:92256;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:92275;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:92327;left:108"><nobr>Thinking of this variation of <font style="font-size:13px">first </font>as more like a &quot;first where&quot; makes this a</nobr></div>
<div style="position:absolute;top:92347;left:108"><nobr>pretty expressive solution.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:91589;left:108"><nobr>97</nobr></div>
<div style="position:absolute;top:91589;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:92515;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=98><b>Page 98</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:92624;left:108"><nobr><b>A Hidden Rule</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:92665;left:108"><nobr>Something that bothers me about this code is that we have a bit of an unwritten</nobr></div>
<div style="position:absolute;top:92686;left:108"><nobr>rule in place.</nobr></div>
<div style="position:absolute;top:92719;left:108"><nobr>Our <font style="font-size:13px">getCheckerFor </font>method assumes there's always a matching checker in that</nobr></div>
<div style="position:absolute;top:92740;left:108"><nobr>list, because it's expected we never call it unless we call <font style="font-size:13px">hasCheckerFor </font>first to</nobr></div>
<div style="position:absolute;top:92760;left:108"><nobr>verify there's a match. This is a bit of a code smell to me, so what can we do</nobr></div>
<div style="position:absolute;top:92780;left:108"><nobr>about it?</nobr></div>
<div style="position:absolute;top:92814;left:108"><nobr>By default, <font style="font-size:13px">first </font>will return <font style="font-size:13px">null </font>if it doesn't find a match. Our imperative</nobr></div>
<div style="position:absolute;top:92834;left:108"><nobr>solution was doing the same thing, since PHP will always return <font style="font-size:13px">null </font>from a</nobr></div>
<div style="position:absolute;top:92854;left:108"><nobr>function if it never hits an explicit return.</nobr></div>
<div style="position:absolute;top:92888;left:108"><nobr>Letting <font style="font-size:13px">null </font>leak into your code can result in a lot of annoying issues that</nobr></div>
<div style="position:absolute;top:92908;left:108"><nobr>are diOcult to debug. One approach that's a bit better would be to throw an</nobr></div>
<div style="position:absolute;top:92929;left:108"><nobr>exception if a match isn't found, so we know about it right away.</nobr></div>
<div style="position:absolute;top:92962;left:108"><nobr>Here's how you might think to write that with our current implementation:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:92997;left:127"><nobr>private function <font color="#795da3">getCheckerFor</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:93016;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:93036;left:154"><nobr>$checker = $this-&gt;checkers-&gt;first(<font color="#a71d5d">function </font>($i, $checker) <font color="#795da3">use </font>($file) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:93055;left:181"><nobr>return <font color="#333333">$checker-&gt;canCheck($file);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:93074;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:93112;left:154"><nobr>if <font color="#333333">($checker === </font>null<font color="#333333">) {</font></nobr></div>
<div style="position:absolute;top:93131;left:181"><nobr>throw new Exception<font color="#333333">(</font><font color="#df5000">&quot;No matching style checker found!&quot;</font><font color="#333333">);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:93150;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:93189;left:154"><nobr>return <font color="#333333">$checker;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:93208;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:93259;left:108"><nobr>This works, but is there a way we can do it in a more &quot;Tell Don't Ask&quot; style?</nobr></div>
<div style="position:absolute;top:93280;left:108"><nobr>Certainly!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:92561;left:108"><nobr>Chapter 12. Choosing a Syntax Handler</nobr></div>
<div style="position:absolute;top:92561;left:634"><nobr>98</nobr></div>
</span></font>

<div style="position:absolute;top:93487;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=99><b>Page 99</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:93596;left:108"><nobr><b>Providing a Default</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:93637;left:108"><nobr>Just like the <font style="font-size:13px">get </font>method we talked about in the GitHub score example, <font style="font-size:13px">first </font>lets</nobr></div>
<div style="position:absolute;top:93658;left:108"><nobr>you specify a default value to use if no match is found.</nobr></div>
<div style="position:absolute;top:93691;left:108"><nobr>For example, say we wanted to find the first name in a collection that starts with</nobr></div>
<div style="position:absolute;top:93712;left:108"><nobr>a B or default to 'Bryan' if none are found:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:93747;left:127"><nobr>$names = collect([<font color="#df5000">'Adam'</font>, <font color="#df5000">'Tracy'</font>, <font color="#df5000">'Kyle'</font>]);</nobr></div>
<div style="position:absolute;top:93766;left:127"><nobr>$names-&gt;first(<font color="#a71d5d">function </font>($i, $name) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:93785;left:154"><nobr>return <font color="#333333">$name[0] == </font><font color="#df5000">'B'</font><font color="#333333">;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:93804;left:127"><nobr>}, <font color="#df5000">'Bryan'</font>);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:93823;left:127"><nobr>// =&gt; 'Bryan'</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:93875;left:108"><nobr><i>I have no idea why anyone would want to do this but it's the simplest example I could</i></nobr></div>
<div style="position:absolute;top:93895;left:108"><nobr><i>come up with.</i></nobr></div>
<div style="position:absolute;top:93929;left:108"><nobr>This sounds helpful right? But wait, we don't actually have a default value to</nobr></div>
<div style="position:absolute;top:93949;left:108"><nobr>provide, we want to throw an exception!</nobr></div>
<div style="position:absolute;top:93983;left:108"><nobr>Thankfully, the collection has us covered. If we pass <i>another closure </i>as the</nobr></div>
<div style="position:absolute;top:94003;left:108"><nobr>default value, that closure will be invoked if and only if a match isn't found,</nobr></div>
<div style="position:absolute;top:94023;left:108"><nobr>meaning we can rewrite our function like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:94058;left:127"><nobr>private function <font color="#795da3">getCheckerFor</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:94077;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:94096;left:154"><nobr>return <font color="#333333">$this-&gt;checkers-&gt;first(</font>function <font color="#333333">($i, $checker) </font><font color="#795da3">use </font><font color="#333333">($file) {</font></nobr></div>
<div style="position:absolute;top:94116;left:181"><nobr>return <font color="#333333">$checker-&gt;canCheck($file);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:94135;left:154"><nobr>}, <font color="#a71d5d">function </font>() {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:94154;left:181"><nobr>throw new Exception<font color="#333333">(</font><font color="#df5000">&quot;No matching style checker found!&quot;</font><font color="#333333">);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:94173;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:94192;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:94244;left:108"><nobr>Kind of a cool trick! But I still don't really like this whole &quot;throw an exception&quot;</nobr></div>
<div style="position:absolute;top:94264;left:108"><nobr>solution.</nobr></div>
<div style="position:absolute;top:94298;left:108"><nobr>If we think about the &quot;Tell Don't Ask&quot; principle some more, doesn't having to</nobr></div>
<div style="position:absolute;top:94318;left:108"><nobr>call <font style="font-size:13px">hasCheckerFor </font>in the first place seem a lot like asking instead of telling? On</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:93533;left:108"><nobr>99</nobr></div>
<div style="position:absolute;top:93533;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:94459;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=100><b>Page 100</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:94569;left:108"><nobr>top of that, we're basically duplicating eLort, because <font style="font-size:13px">hasCheckerFor </font>does all the</nobr></div>
<div style="position:absolute;top:94589;left:108"><nobr>work <font style="font-size:13px">getCheckerFor </font>needs to do to find the checker, but only returns <font style="font-size:13px">true </font>or <font style="font-size:13px">false</font></nobr></div>
<div style="position:absolute;top:94609;left:108"><nobr>instead of giving us the checker back.</nobr></div>
<div style="position:absolute;top:94643;left:108"><nobr>Is there any way we can &quot;tell&quot; and maybe remove that duplication of eLort?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:94690;left:108"><nobr><b>The Null Object Pattern</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:94731;left:108"><nobr>One refactoring you can use to replace checks like this is to introduce a <i>Null</i></nobr></div>
<div style="position:absolute;top:94751;left:108"><nobr><i>Object.</i></nobr></div>
<div style="position:absolute;top:94785;left:108"><nobr>A null object is an object you can use in place of a <font style="font-size:13px">null </font>value that acts like the</nobr></div>
<div style="position:absolute;top:94805;left:108"><nobr>object you really need, but has neutral or no behavior. Put another way, it's an</nobr></div>
<div style="position:absolute;top:94825;left:108"><nobr>object that has all the methods you need, but none of those methods actually</nobr></div>
<div style="position:absolute;top:94846;left:108"><nobr>do anything.</nobr></div>
<div style="position:absolute;top:94879;left:108"><nobr>Now, &quot;doing nothing&quot; is context-dependent, so a null object can't just have</nobr></div>
<div style="position:absolute;top:94900;left:108"><nobr>empty methods. You need to figure out what &quot;do nothing&quot; means in your</nobr></div>
<div style="position:absolute;top:94920;left:108"><nobr>situation and build that into your null object.</nobr></div>
<div style="position:absolute;top:94954;left:108"><nobr>For example, I <font color="#0000ff"><a href="http://adamwathan.me/2015/09/02/chasing-perfect-at-laracon-eu/">gave a talk </a></font>once about refactoring some code that dealt with</nobr></div>
<div style="position:absolute;top:94974;left:108"><nobr>applying coupons to orders in an e-commerce system.</nobr></div>
<div style="position:absolute;top:95008;left:108"><nobr>Coupons all have a <font style="font-size:13px">discount </font>method that returns how much an order should</nobr></div>
<div style="position:absolute;top:95028;left:108"><nobr>be discounted when using that coupon. At one point in the talk, I introduce</nobr></div>
<div style="position:absolute;top:95048;left:108"><nobr>a <font style="font-size:13px">NullCoupon </font>that always discounts an order by zero dollars, eLectively never</nobr></div>
<div style="position:absolute;top:95068;left:108"><nobr>giving a discount.</nobr></div>
<div style="position:absolute;top:95102;left:108"><nobr>It looked something like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:95137;left:127"><nobr>class <font color="#795da3">NullCoupon</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:95156;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:95175;left:154"><nobr>public function <font color="#795da3">discount</font><font color="#333333">($order)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:95194;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:95214;left:181"><nobr>return <font color="#333333">0;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:95233;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:95252;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:94505;left:108"><nobr>Chapter 12. Choosing a Syntax Handler</nobr></div>
<div style="position:absolute;top:94505;left:627"><nobr>100</nobr></div>
</span></font>

<div style="position:absolute;top:95431;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=101><b>Page 101</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:95541;left:108"><nobr>This is what I mean when I say you need to figure out what &quot;do nothing&quot; means</nobr></div>
<div style="position:absolute;top:95561;left:108"><nobr>in your context.</nobr></div>
<div style="position:absolute;top:95595;left:108"><nobr>So what would introducing a null object look like in our context?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:95641;left:108"><nobr><b>The Null Checker</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:95683;left:108"><nobr>Let's look at the code we started with again, highlighting what happens when</nobr></div>
<div style="position:absolute;top:95703;left:108"><nobr>we do have a matching checker vs. what happens when we don't:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:95738;left:127"><nobr>private function checkFile($file)</nobr></div>
<div style="position:absolute;top:95757;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:95776;left:154"><nobr>if ($this-&gt;hasCheckerFor($file)) {</nobr></div>
<div style="position:absolute;top:95795;left:181"><nobr>$checker = $this-&gt;getCheckerFor($file);</nobr></div>
<div style="position:absolute;top:95814;left:181"><nobr>$violations = $checker-&gt;check($file);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:95833;left:181"><nobr>return new <font color="#333333">CheckedFile($file, $violations);</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:95853;left:154"><nobr>} else {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:95872;left:181"><nobr>return new <font color="#333333">CheckedFile($file, []);</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:95891;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:95910;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:95962;left:108"><nobr>The only difference here is that when we don't have a matching checker, we</nobr></div>
<div style="position:absolute;top:95982;left:108"><nobr>just pass in an empty array instead of an array of violations.</nobr></div>
<div style="position:absolute;top:96016;left:108"><nobr>So if we were to create a <font style="font-size:13px">NullChecker</font>, it would just need to return an empty array</nobr></div>
<div style="position:absolute;top:96036;left:108"><nobr>instead of an array of violations any time we asked it to check a file:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:96071;left:127"><nobr>class <font color="#795da3">NullChecker</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:96090;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:96109;left:154"><nobr>public function <font color="#795da3">check</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:96128;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:96147;left:181"><nobr>return <font color="#333333">[];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:96166;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:96186;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:96237;left:108"><nobr>Taking small steps, let's see how this lets us refactor this code.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:95477;left:108"><nobr>101</nobr></div>
<div style="position:absolute;top:95477;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:96403;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=102><b>Page 102</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:96513;left:108"><nobr>First, let's use the <font style="font-size:13px">NullChecker </font>to get the empty array instead of hard coding it in</nobr></div>
<div style="position:absolute;top:96533;left:108"><nobr>the <font style="font-size:13px">else </font>clause:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:96568;left:127"><nobr>private function checkFile($file)</nobr></div>
<div style="position:absolute;top:96587;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:96606;left:154"><nobr>if ($this-&gt;hasCheckerFor($file)) {</nobr></div>
<div style="position:absolute;top:96625;left:181"><nobr>$checker = $this-&gt;getCheckerFor($file);</nobr></div>
<div style="position:absolute;top:96645;left:181"><nobr>$violations = $checker-&gt;check($file);</nobr></div>
<div style="position:absolute;top:96664;left:181"><nobr>return new CheckedFile($file, $violations);</nobr></div>
<div style="position:absolute;top:96683;left:154"><nobr>} else {</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:96702;left:181"><nobr>$checker = <font color="#a71d5d">new </font>NullChecker;</nobr></div>
<div style="position:absolute;top:96721;left:181"><nobr>$violations = $checker-&gt;check($file);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:96740;left:181"><nobr>return new <font color="#333333">CheckedFile($file, $violations);</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:96759;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:96778;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:96830;left:108"><nobr>This is actually more code than we had before, but now both sides of the <font style="font-size:13px">if</font></nobr></div>
<div style="position:absolute;top:96850;left:108"><nobr>statement look awfully similar don't they? What if we updated <font style="font-size:13px">getCheckerFor </font>to</nobr></div>
<div style="position:absolute;top:96871;left:108"><nobr>give us a <font style="font-size:13px">NullChecker </font>if it couldn't find a match?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:96906;left:127"><nobr>private function getCheckerFor($file)</nobr></div>
<div style="position:absolute;top:96925;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:96944;left:154"><nobr>return $this-&gt;checkers-&gt;first(function ($i, $checker) use ($file) {</nobr></div>
<div style="position:absolute;top:96963;left:181"><nobr>return $checker-&gt;canCheck($file);</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:96982;left:154"><nobr>}, <font color="#a71d5d">new </font>NullChecker);</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:97001;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:97053;left:108"><nobr>This means there's <i>always </i>going to be a match now right? So as an intermediate</nobr></div>
<div style="position:absolute;top:97073;left:108"><nobr>step, let's update <font style="font-size:13px">hasCheckerFor </font>to just return <font style="font-size:13px">true</font>:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97108;left:140"><nobr>private function hasCheckerFor($file)</nobr></div>
<div style="position:absolute;top:97127;left:140"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:97146;left:127"><nobr>-     return $this-&gt;checkers-&gt;contains(function ($i, $checker) use ($file)) {</nobr></div>
<div style="position:absolute;top:97165;left:127"><nobr>-    </nobr></div>
<div style="position:absolute;top:97165;left:194"><nobr>return $checker-&gt;canCheck($file);</nobr></div>
<div style="position:absolute;top:97185;left:127"><nobr>-     }</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:97204;left:127"><nobr>+     return true;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97223;left:140"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:96449;left:108"><nobr>Chapter 12. Choosing a Syntax Handler</nobr></div>
<div style="position:absolute;top:96449;left:627"><nobr>102</nobr></div>
</span></font>

<div style="position:absolute;top:97375;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=103><b>Page 103</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:97485;left:108"><nobr>Now we can eliminate the <font style="font-size:13px">else </font>clause, giving us this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:97520;left:127"><nobr>private function <font color="#795da3">checkFile</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97539;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:97558;left:154"><nobr>if <font color="#333333">($this-&gt;hasCheckerFor($file)) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97577;left:181"><nobr>$checker = $this-&gt;getCheckerFor($file);</nobr></div>
<div style="position:absolute;top:97596;left:181"><nobr>$violations = $checker-&gt;check($file);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:97615;left:181"><nobr>return new <font color="#333333">CheckedFile($file, $violations);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97635;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:97654;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:97705;left:108"><nobr>Since <font style="font-size:13px">hasCheckerFor </font>just returns <font style="font-size:13px">true</font>, we can actually eliminate the conditional</nobr></div>
<div style="position:absolute;top:97726;left:108"><nobr>altogether:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:97761;left:127"><nobr>private function <font color="#795da3">checkFile</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97780;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:97799;left:154"><nobr>$checker = $this-&gt;getCheckerFor($file);</nobr></div>
<div style="position:absolute;top:97818;left:154"><nobr>$violations = $checker-&gt;check($file);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:97837;left:154"><nobr>return new <font color="#333333">CheckedFile($file, $violations);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97856;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:97908;left:108"><nobr>Now we're actually not calling <font style="font-size:13px">hasCheckerFor </font>at all, so we can delete that entire</nobr></div>
<div style="position:absolute;top:97928;left:108"><nobr>method, leaving us with this final solution:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:97963;left:127"><nobr>class <font color="#795da3">Nitpicker</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:97982;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:98001;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:98040;left:154"><nobr>private function <font color="#795da3">checkFile</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:98059;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:98078;left:181"><nobr>$violations = $this-&gt;getCheckerFor($file)-&gt;check($file);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:98097;left:181"><nobr>return new <font color="#333333">CheckedFile($file, $violations);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:98116;left:154"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:97421;left:108"><nobr>103</nobr></div>
<div style="position:absolute;top:97421;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:98347;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=104><b>Page 104</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:98458;left:154"><nobr>private function <font color="#795da3">getCheckerFor</font><font color="#333333">($file)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:98477;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:98496;left:181"><nobr>return <font color="#333333">$this-&gt;checkers-&gt;first(</font>function <font color="#333333">($i, $checker) </font><font color="#795da3">use </font><font color="#333333">($file) {</font></nobr></div>
<div style="position:absolute;top:98515;left:208"><nobr>return <font color="#333333">$checker-&gt;canCheck($file);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:98535;left:181"><nobr>}, <font color="#a71d5d">new </font>NullChecker);</nobr></div>
<div style="position:absolute;top:98554;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:98573;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:98624;left:108"><nobr>No more loops, conditionals, or exceptions! Just simple, concise, expressive</nobr></div>
<div style="position:absolute;top:98645;left:108"><nobr>code. Benign defaults are a powerful tool, use them!</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:98698;left:108"><nobr><b>Tagging on the Fly</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:98746;left:108"><nobr>Imagine you are building a blog engine, and you want to be able to add tags to</nobr></div>
<div style="position:absolute;top:98766;left:108"><nobr>your blog posts.</nobr></div>
<div style="position:absolute;top:98800;left:108"><nobr>A nice UI pattern for something like this is to use an autocomplete multiselect</nobr></div>
<div style="position:absolute;top:98820;left:108"><nobr>box like <font color="#0000ff"><a href="https://select2.github.io/">Select2 </a></font>or similar, and allow someone to add tags from an existing list</nobr></div>
<div style="position:absolute;top:98840;left:108"><nobr><i>or </i>create new ones on the Ny.</nobr></div>
<div style="position:absolute;top:98874;left:108"><nobr>This can get a little tricky on the server side though, because the request might</nobr></div>
<div style="position:absolute;top:98894;left:108"><nobr>contain mixed data.</nobr></div>
<div style="position:absolute;top:98928;left:108"><nobr>For this example, we'll say that existing tags come through as IDs, and new tags</nobr></div>
<div style="position:absolute;top:98948;left:108"><nobr>come through as just a tag name:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:98983;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:99003;left:154"><nobr>'tags' <font color="#333333">=&gt; [</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:99022;left:181"><nobr>17,</nobr></div>
<div style="position:absolute;top:99041;left:181"><nobr>32,</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:99060;left:181"><nobr>'recipes'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:99079;left:181"><nobr>11,</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:99098;left:181"><nobr>'kitchen'</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:99117;left:154"><nobr>]</nobr></div>
<div style="position:absolute;top:99136;left:127"><nobr>]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:98393;left:108"><nobr>Chapter 13. Tagging on the Fly</nobr></div>
<div style="position:absolute;top:98393;left:627"><nobr>104</nobr></div>
</span></font>

<div style="position:absolute;top:99319;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=105><b>Page 105</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:99429;left:108"><nobr>Using a dedicated <font style="font-size:13px">PostTagsController </font>to manage tags for a post, here's one way</nobr></div>
<div style="position:absolute;top:99449;left:108"><nobr>we could write the <font style="font-size:13px">update </font>action <i>(ignoring validation for brevity):</i></nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:99484;left:127"><nobr>class <font color="#795da3">PostTagsController</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:99503;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:99522;left:154"><nobr>public function <font color="#795da3">update</font><font color="#333333">($postId)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:99541;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:99561;left:181"><nobr>$post = Post::find($postId);</nobr></div>
<div style="position:absolute;top:99599;left:181"><nobr>$tagIds = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:99637;left:181"><nobr>foreach <font color="#333333">(request(</font><font color="#df5000">'tags'</font><font color="#333333">) </font>as <font color="#333333">$nameOrId) {</font></nobr></div>
<div style="position:absolute;top:99656;left:208"><nobr>if <font color="#333333">(is_numeric($nameOrId)) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:99675;left:235"><nobr>$tagIds[] = $nameOrId;</nobr></div>
<div style="position:absolute;top:99694;left:208"><nobr>} <font color="#a71d5d">else </font>{</nobr></div>
<div style="position:absolute;top:99714;left:235"><nobr>$tag = Tag::create([<font color="#df5000">'name' </font>=&gt; $nameOrId]);</nobr></div>
<div style="position:absolute;top:99733;left:235"><nobr>$tagIds[] = $tag-&gt;id;</nobr></div>
<div style="position:absolute;top:99752;left:208"><nobr>}</nobr></div>
<div style="position:absolute;top:99771;left:181"><nobr>}</nobr></div>
<div style="position:absolute;top:99809;left:181"><nobr>$post-&gt;tags()-&gt;sync($tagIds);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:99847;left:181"><nobr>return <font color="#333333">view(</font><font color="#df5000">'posts.index'</font><font color="#333333">);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:99867;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:99886;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:99937;left:108"><nobr><b>Extracting the Loop</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:99978;left:108"><nobr>So how can we simplify this using collections? The first thing I want to do is</nobr></div>
<div style="position:absolute;top:99998;left:108"><nobr>extract this loop into a separate function:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:100033;left:127"><nobr>class PostTagsController</nobr></div>
<div style="position:absolute;top:100052;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:100071;left:154"><nobr>public function update($postId)</nobr></div>
<div style="position:absolute;top:100090;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:100110;left:181"><nobr>$post = Post::find($postId);</nobr></div>
<div style="position:absolute;top:100148;left:181"><nobr>$tagIds = [];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:99365;left:108"><nobr>105</nobr></div>
<div style="position:absolute;top:99365;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:100291;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=106><b>Page 106</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:100402;left:181"><nobr>foreach <font color="#333333">(request(</font><font color="#df5000">'tags'</font><font color="#333333">) </font>as <font color="#333333">$nameOrId) {</font></nobr></div>
<div style="position:absolute;top:100421;left:208"><nobr>if <font color="#333333">(is_numeric($nameOrId)) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:100440;left:235"><nobr>$tagIds[] = $nameOrId;</nobr></div>
<div style="position:absolute;top:100459;left:208"><nobr>} <font color="#a71d5d">else </font>{</nobr></div>
<div style="position:absolute;top:100479;left:235"><nobr>$tag = Tag::create([<font color="#df5000">'name' </font>=&gt; $nameOrId]);</nobr></div>
<div style="position:absolute;top:100498;left:235"><nobr>$tagIds[] = $tag-&gt;id;</nobr></div>
<div style="position:absolute;top:100517;left:208"><nobr>}</nobr></div>
<div style="position:absolute;top:100536;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:100574;left:181"><nobr>$post-&gt;tags()-&gt;sync($tagIds);</nobr></div>
<div style="position:absolute;top:100612;left:181"><nobr>return view('posts.index');</nobr></div>
<div style="position:absolute;top:100632;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:100651;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:100702;left:108"><nobr>To extract this into a function, we need a good name.</nobr></div>
<div style="position:absolute;top:100736;left:108"><nobr>So what is this block of code trying to do? To me, it looks like the job of this</nobr></div>
<div style="position:absolute;top:100756;left:108"><nobr>code is to take a list of mixed tag IDs and tag names and normalize that list into</nobr></div>
<div style="position:absolute;top:100777;left:108"><nobr><i>just </i>tag IDs.</nobr></div>
<div style="position:absolute;top:100810;left:108"><nobr>Let's extract a function called <font style="font-size:13px">normalizeTagsToIds</font>:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:100845;left:127"><nobr>class PostTagsController</nobr></div>
<div style="position:absolute;top:100864;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:100884;left:154"><nobr>public function update($postId)</nobr></div>
<div style="position:absolute;top:100903;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:100922;left:181"><nobr>$post = Post::find($postId);</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:100960;left:181"><nobr>$tagIds = $this-&gt;normalizeTagsToIds(request(<font color="#df5000">'tags'</font>));</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:100979;left:181"><nobr>$post-&gt;tags()-&gt;sync($tagIds);</nobr></div>
<div style="position:absolute;top:101017;left:181"><nobr>return view('posts.index');</nobr></div>
<div style="position:absolute;top:101037;left:154"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:100337;left:108"><nobr>Chapter 13. Tagging on the Fly</nobr></div>
<div style="position:absolute;top:100337;left:627"><nobr>106</nobr></div>
</span></font>

<div style="position:absolute;top:101263;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=107><b>Page 107</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:101374;left:154"><nobr>private function <font color="#795da3">normalizeTagsToIds</font><font color="#333333">($tags)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:101393;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:101412;left:181"><nobr>$tagIds = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:101451;left:181"><nobr>foreach <font color="#333333">($tags </font>as <font color="#333333">$nameOrId) {</font></nobr></div>
<div style="position:absolute;top:101470;left:208"><nobr>if <font color="#333333">(is_numeric($nameOrId)) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:101489;left:235"><nobr>$tagIds[] = $nameOrId;</nobr></div>
<div style="position:absolute;top:101508;left:208"><nobr>} <font color="#a71d5d">else </font>{</nobr></div>
<div style="position:absolute;top:101527;left:235"><nobr>$tag = Tag::create([<font color="#df5000">'name' </font>=&gt; $nameOrId]);</nobr></div>
<div style="position:absolute;top:101546;left:235"><nobr>$tagIds[] = $tag-&gt;id;</nobr></div>
<div style="position:absolute;top:101565;left:208"><nobr>}</nobr></div>
<div style="position:absolute;top:101584;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:101623;left:181"><nobr>return <font color="#333333">$tagIds;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:101642;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:101661;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:101712;left:108"><nobr><b>Normalizing with Map</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:101753;left:108"><nobr>Looking at the code above, do you see any of the patterns we talked about in</nobr></div>
<div style="position:absolute;top:101773;left:108"><nobr>the first part of the book?</nobr></div>
<div style="position:absolute;top:101807;left:108"><nobr>How about now?</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:101842;left:127"><nobr>private function normalizeTagsToIds($tags)</nobr></div>
<div style="position:absolute;top:101861;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:101880;left:154"><nobr>$tagIds = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:101919;left:154"><nobr>foreach <font color="#333333">($tags </font>as <font color="#333333">$nameOrId) {</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:101938;left:181"><nobr>if (is_numeric($nameOrId)) {</nobr></div>
<div style="position:absolute;top:101957;left:208"><nobr>$tagId = $nameOrId;</nobr></div>
<div style="position:absolute;top:101976;left:181"><nobr>} else {</nobr></div>
<div style="position:absolute;top:101995;left:208"><nobr>$tag = Tag::create(['name' =&gt; $nameOrId]);</nobr></div>
<div style="position:absolute;top:102014;left:208"><nobr>$tagId = $tag-&gt;id;</nobr></div>
<div style="position:absolute;top:102033;left:181"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:101309;left:108"><nobr>107</nobr></div>
<div style="position:absolute;top:101309;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:102235;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=108><b>Page 108</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:102346;left:181"><nobr>$tagIds[] = $id;</nobr></div>
<div style="position:absolute;top:102365;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:102403;left:154"><nobr>return <font color="#333333">$tagIds;</font></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:102423;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:102474;left:108"><nobr>Aside from the conditional, this is just a standard <font style="font-size:13px">map </font>operation! And there's</nobr></div>
<div style="position:absolute;top:102494;left:108"><nobr>nothing stopping us from using an <font style="font-size:13px">if </font>statement inside a map:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:102529;left:127"><nobr>private function <font color="#795da3">normalizeTagsToIds</font><font color="#333333">($tags)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:102549;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:102568;left:154"><nobr>return <font color="#333333">collect($tags)-&gt;map(</font>function <font color="#333333">($nameOrId) {</font></nobr></div>
<div style="position:absolute;top:102587;left:181"><nobr>if <font color="#333333">(is_numeric($nameOrId)) {</font></nobr></div>
<div style="position:absolute;top:102606;left:208"><nobr>return <font color="#333333">$nameOrId;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:102625;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:102644;left:181"><nobr>return <font color="#333333">Tag::create([</font><font color="#df5000">'name' </font><font color="#333333">=&gt; $nameOrId])-&gt;id;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:102663;left:154"><nobr>})-&gt;all();</nobr></div>
<div style="position:absolute;top:102682;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:102734;left:108"><nobr>A lot of the time when I have a function meant to operate on a collection like</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:102757;left:108"><nobr>normalizeTagsToIds<font style="font-size:15px">, I also create a function for operating on the individual item</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:102775;left:108"><nobr>to break up the code a bit more. Here's what the whole thing would look like:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:102810;left:127"><nobr>class <font color="#795da3">PostTagsController</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:102829;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:102848;left:154"><nobr>public function <font color="#795da3">update</font><font color="#333333">($postId)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:102867;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:102886;left:181"><nobr>$post = Post::find($postId);</nobr></div>
<div style="position:absolute;top:102924;left:181"><nobr>$tagIds = $this-&gt;normalizeTagsToIds(request(<font color="#df5000">'tags'</font>));</nobr></div>
<div style="position:absolute;top:102943;left:181"><nobr>$post-&gt;tags()-&gt;sync($tagIds);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:102982;left:181"><nobr>return <font color="#333333">view(</font><font color="#df5000">'posts.index'</font><font color="#333333">);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:103001;left:154"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:102281;left:108"><nobr>Chapter 13. Tagging on the Fly</nobr></div>
<div style="position:absolute;top:102281;left:627"><nobr>108</nobr></div>
</span></font>

<div style="position:absolute;top:103207;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=109><b>Page 109</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:103318;left:154"><nobr>private function <font color="#795da3">normalizeTagsToIds</font><font color="#333333">($tags)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:103337;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:103356;left:181"><nobr>return <font color="#333333">collect($tags)-&gt;map(</font>function <font color="#333333">($nameOrId) {</font></nobr></div>
<div style="position:absolute;top:103375;left:208"><nobr>return <font color="#333333">$this-&gt;normalizeTagToId($nameOrId);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:103395;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:103414;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:103452;left:154"><nobr>private function <font color="#795da3">normalizeTagToId</font><font color="#333333">($nameOrId)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:103471;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:103490;left:181"><nobr>if <font color="#333333">(is_numeric($nameOrId)) {</font></nobr></div>
<div style="position:absolute;top:103509;left:208"><nobr>return <font color="#333333">$nameOrId;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:103528;left:181"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:103548;left:181"><nobr>return <font color="#333333">Tag::create([</font><font color="#df5000">'name' </font><font color="#333333">=&gt; $nameOrId])-&gt;id;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:103567;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:103586;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:103637;left:108"><nobr>Until now we've only used <font style="font-size:13px">map </font>to perform the exact same transformation on</nobr></div>
<div style="position:absolute;top:103658;left:108"><nobr>every item in a collection, but it can be a really useful tool in situations like this</nobr></div>
<div style="position:absolute;top:103678;left:108"><nobr>as well where you need to normalize a collection with some rough edges into a</nobr></div>
<div style="position:absolute;top:103698;left:108"><nobr>consistent data set.</nobr></div>
</span></font>
<font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:103752;left:108"><nobr><b>Nitpicking a Pull Request</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:103799;left:108"><nobr>I was working on a new Nitpick feature recently where I wanted to post a</nobr></div>
<div style="position:absolute;top:103820;left:108"><nobr>comment like &quot;Code style looks great, nice job!&quot; if a pull request was opened</nobr></div>
<div style="position:absolute;top:103840;left:108"><nobr>and no style violations were detected.</nobr></div>
<div style="position:absolute;top:103874;left:108"><nobr>Before we get into adding that functionality, let's walk through the existing</nobr></div>
<div style="position:absolute;top:103894;left:108"><nobr>code.</nobr></div>
<div style="position:absolute;top:103928;left:108"><nobr>Here's what it looks like to nitpick a pull request:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:103253;left:108"><nobr>109</nobr></div>
<div style="position:absolute;top:103253;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:104179;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=110><b>Page 110</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:104290;left:127"><nobr>public function <font color="#795da3">nitpick</font><font color="#333333">($pullRequest)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:104309;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:104328;left:154"><nobr>$pullRequest-&gt;changedFiles()-&gt;flatMap(<font color="#a71d5d">function </font>($changedFile) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:104347;left:181"><nobr>return <font color="#333333">$this-&gt;checkFile($changedFile)-&gt;comments();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:104367;left:154"><nobr>})-&gt;reject(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:104386;left:181"><nobr>return <font color="#333333">$comment-&gt;isDuplicate($pullRequest);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:104405;left:154"><nobr>})-&gt;each(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:104424;left:181"><nobr>$pullRequest-&gt;postComment($comment);</nobr></div>
<div style="position:absolute;top:104443;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:104462;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:104514;left:108"><nobr>Pretty cool that the whole thing is just one big collection pipeline, huh? Let's</nobr></div>
<div style="position:absolute;top:104534;left:108"><nobr>break down what's happening here:</nobr></div>
<div style="position:absolute;top:104569;left:127"><nobr>1. Given a pull request, get a collection of the files that changed in that PR.</nobr></div>
<div style="position:absolute;top:104596;left:125"><nobr>2. Check each of those changed files for violations, and return a collection</nobr></div>
<div style="position:absolute;top:104617;left:149"><nobr>of style comments for each file.</nobr></div>
<div style="position:absolute;top:104644;left:125"><nobr>3. Collapse those collections of comments into one Nat collection of</nobr></div>
<div style="position:absolute;top:104664;left:149"><nobr>comments.</nobr></div>
<div style="position:absolute;top:104691;left:125"><nobr>4. Since a PR is re-analyzed every time it's updated, reject any comments</nobr></div>
<div style="position:absolute;top:104711;left:149"><nobr>that have already been posted on the PR.</nobr></div>
<div style="position:absolute;top:104738;left:125"><nobr>5. Post each comment on the pull request.</nobr></div>
<div style="position:absolute;top:104773;left:108"><nobr>Of course there's more complexity hidden in the methods we call along the</nobr></div>
<div style="position:absolute;top:104794;left:108"><nobr>way in this pipeline, but it's really cool to me how well this demonstrates what</nobr></div>
<div style="position:absolute;top:104814;left:108"><nobr>you can do by just transforming data; thinking of your applications as just a big</nobr></div>
<div style="position:absolute;top:104834;left:108"><nobr>function that takes some input and produces some output.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:104881;left:108"><nobr><b>A Fork in the Code</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:104922;left:108"><nobr>In the existing code, after figuring out which comments need to be posted,</nobr></div>
<div style="position:absolute;top:104942;left:108"><nobr>we just post them all unconditionally. Conveniently, if there's no comments to</nobr></div>
<div style="position:absolute;top:104962;left:108"><nobr>post, the callback in <font style="font-size:13px">each </font>just never runs, so we never have to worry about the</nobr></div>
<div style="position:absolute;top:104983;left:108"><nobr>empty case. An empty collection is kind of like a Null Object in cases like this;</nobr></div>
<div style="position:absolute;top:105003;left:108"><nobr>pretty cool!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:104225;left:108"><nobr>Chapter 14. Nitpicking a Pull Request</nobr></div>
<div style="position:absolute;top:104225;left:627"><nobr>110</nobr></div>
</span></font>

<div style="position:absolute;top:105151;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=111><b>Page 111</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:105261;left:108"><nobr>But now that we want to post a different comment if the collection is empty, we</nobr></div>
<div style="position:absolute;top:105281;left:108"><nobr>need to introduce a conditional. If we want our code to stay readable, we also</nobr></div>
<div style="position:absolute;top:105301;left:108"><nobr>need to introduce a temporary variable:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:105336;left:127"><nobr>public function <font color="#795da3">nitpick</font><font color="#333333">($pullRequest)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:105355;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:105375;left:154"><nobr>$comments = $pullRequest-&gt;changedFiles()</nobr></div>
<div style="position:absolute;top:105394;left:181"><nobr>-&gt;flatMap(<font color="#a71d5d">function </font>($changedFile) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:105413;left:208"><nobr>return <font color="#333333">$this-&gt;checkFile($changedFile)-&gt;comments();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:105432;left:181"><nobr>})-&gt;reject(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:105451;left:208"><nobr>return <font color="#333333">$comment-&gt;isDuplicate($pullRequest);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:105470;left:181"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:105508;left:154"><nobr>if <font color="#333333">($comments-&gt;isEmpty()) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:105528;left:181"><nobr>$pullRequest-&gt;postNoViolationsComment();</nobr></div>
<div style="position:absolute;top:105547;left:154"><nobr>} <font color="#a71d5d">else </font>{</nobr></div>
<div style="position:absolute;top:105566;left:181"><nobr>$comments-&gt;each(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:105585;left:208"><nobr>$pullRequest-&gt;postComment($comment);</nobr></div>
<div style="position:absolute;top:105604;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:105623;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:105642;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:105694;left:108"><nobr>Is this the worst thing in the world? Probably not, but I'll be damned if it</nobr></div>
<div style="position:absolute;top:105714;left:108"><nobr>wouldn't be cool to be able to write this code as one continuous pipeline.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:105761;left:108"><nobr><b>Learning from Smalltalk</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:105802;left:108"><nobr>Smalltalk is one of the earliest truly object-oriented programming languages.</nobr></div>
<div style="position:absolute;top:105822;left:108"><nobr>In Smalltalk, everything is an object, and every control structure is</nobr></div>
<div style="position:absolute;top:105842;left:108"><nobr>implemented as messages sent to those objects.</nobr></div>
<div style="position:absolute;top:105876;left:108"><nobr>This has some interesting implications, namely that Smalltalk has no <font style="font-size:13px">if</font></nobr></div>
<div style="position:absolute;top:105896;left:108"><nobr>statements!</nobr></div>
<div style="position:absolute;top:105930;left:108"><nobr>So how do you write conditional code in Smalltalk? Well remember what I said</nobr></div>
<div style="position:absolute;top:105950;left:108"><nobr>about how everything in Smalltalk is an object? Even <font style="font-size:13px">true </font>and <font style="font-size:13px">false </font>are objects;</nobr></div>
<div style="position:absolute;top:105971;left:108"><nobr>instances of the <font style="font-size:13px">True </font>and <font style="font-size:13px">False </font>classes which both extend <font style="font-size:13px">Boolean</font>.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:105197;left:108"><nobr>111</nobr></div>
<div style="position:absolute;top:105197;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:106123;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=112><b>Page 112</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:106233;left:108"><nobr>So whenever you need to write an <font style="font-size:13px">if </font>statement in Smalltalk, you do it by</nobr></div>
<div style="position:absolute;top:106253;left:108"><nobr>calling the <font style="font-size:13px">ifTrue </font>method on a <font style="font-size:13px">Boolean </font>instance, and pass it a block of code you'd</nobr></div>
<div style="position:absolute;top:106273;left:108"><nobr>like it to run if the boolean is true.</nobr></div>
<div style="position:absolute;top:106307;left:108"><nobr>The Smalltalk syntax can seem very alien at first, so here's what it would look</nobr></div>
<div style="position:absolute;top:106327;left:108"><nobr>like if PHP worked the same way:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106362;left:127"><nobr>$boolean = <font color="#a71d5d">true</font>;</nobr></div>
<div style="position:absolute;top:106401;left:127"><nobr>$boolean-&gt;ifTrue(<font color="#a71d5d">function </font>() {</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:106420;left:154"><nobr>// do something</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106439;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:106490;left:108"><nobr>Smalltalk also has an <font style="font-size:13px">ifFalse </font>method, and <font style="font-size:13px">ifTrue </font>and <font style="font-size:13px">ifFalse </font>both return the</nobr></div>
<div style="position:absolute;top:106511;left:108"><nobr>original object, so they can even be chained together like so:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106546;left:127"><nobr>$boolean = <font color="#a71d5d">true</font>;</nobr></div>
<div style="position:absolute;top:106584;left:127"><nobr>$boolean-&gt;ifTrue(<font color="#a71d5d">function </font>() {</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:106603;left:154"><nobr>// do something</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106622;left:127"><nobr>})-&gt;ifFalse(<font color="#a71d5d">function </font>() {</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:106641;left:154"><nobr>// do something else</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106660;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:106712;left:108"><nobr>A nice side eLect of using method calls for conditionals like this is that you can</nobr></div>
<div style="position:absolute;top:106732;left:108"><nobr>chain them after <i>other </i>methods as well. For example, say we had this code for</nobr></div>
<div style="position:absolute;top:106753;left:108"><nobr>throwing some sort of authorization error if a user didn't have the necessary</nobr></div>
<div style="position:absolute;top:106773;left:108"><nobr>permissions for some action:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:106808;left:127"><nobr>if <font color="#333333">(! $user-&gt;isAdmin()) {</font></nobr></div>
<div style="position:absolute;top:106827;left:154"><nobr>throw new <font color="#333333">AuthorizationException;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106846;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:106898;left:108"><nobr>Using the Smalltalk style, we could rewrite that like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106933;left:127"><nobr>$user-&gt;isAdmin()-&gt;ifFalse(<font color="#a71d5d">function </font>() {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:106952;left:154"><nobr>throw new <font color="#333333">AuthorizationException;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:106971;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:106169;left:108"><nobr>Chapter 14. Nitpicking a Pull Request</nobr></div>
<div style="position:absolute;top:106169;left:627"><nobr>112</nobr></div>
</span></font>

<div style="position:absolute;top:107095;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=113><b>Page 113</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:107205;left:108"><nobr>Starting to get an idea of where we're going with this?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:107251;left:108"><nobr><b>Collection Macros</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:107293;left:108"><nobr>One cool thing about the Laravel Collection class is that it's <i>macroable.</i></nobr></div>
<div style="position:absolute;top:107326;left:108"><nobr>Laravel's <font style="font-size:13px">support </font>package includes a trait called <font style="font-size:13px">Macroable </font>that allows you to add</nobr></div>
<div style="position:absolute;top:107347;left:108"><nobr>methods to a class at run time.</nobr></div>
<div style="position:absolute;top:107380;left:108"><nobr>For example, here's how we could define a new method on the collection called</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:107403;left:108"><nobr>odd <font style="font-size:15px">that only returns the items at odd positions in the collection:</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:107436;left:127"><nobr>Collection::macro(<font color="#df5000">'odd'</font>, <font color="#a71d5d">function </font>() {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:107455;left:154"><nobr>return <font color="#333333">$this-&gt;values()-&gt;filter(</font>function <font color="#333333">($value, $i) {</font></nobr></div>
<div style="position:absolute;top:107474;left:181"><nobr>return <font color="#333333">$i % 2 !== 0;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:107493;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:107512;left:127"><nobr>});</nobr></div>
<div style="position:absolute;top:107550;left:127"><nobr>collect([0, 1, 2, 3, 4, 5])-&gt;odd();</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:107569;left:127"><nobr>// =&gt; [1, 3, 5]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:107621;left:108"><nobr>When I'm working in a Laravel app, I keep all of my collection macros in a</nobr></div>
<div style="position:absolute;top:107641;left:108"><nobr>service provider like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:107676;left:127"><nobr>class <font color="#795da3">CollectionExtensions </font>extends <font color="#795da3">ServiceProvider</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:107695;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:107715;left:154"><nobr>public function <font color="#795da3">boot</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:107734;left:154"><nobr>{</nobr></div>
<div style="position:absolute;top:107753;left:181"><nobr>Collection::macro(<font color="#df5000">'odd'</font>, <font color="#a71d5d">function </font>() {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:107772;left:208"><nobr>return <font color="#333333">$this-&gt;values()-&gt;filter(</font>function <font color="#333333">($value, $i) {</font></nobr></div>
<div style="position:absolute;top:107791;left:235"><nobr>return <font color="#333333">$i % 2 !== 0;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:107810;left:208"><nobr>});</nobr></div>
<div style="position:absolute;top:107829;left:181"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:107868;left:181"><nobr>// ...and any other lovely macros you'd like to add.</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:107887;left:154"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:107141;left:108"><nobr>113</nobr></div>
<div style="position:absolute;top:107141;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:108067;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=114><b>Page 114</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:108178;left:154"><nobr>public function <font color="#795da3">register</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:108197;left:154"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:108216;left:181"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:108235;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:108255;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:108306;left:108"><nobr>So inspired by Smalltalk and powered by macros, let's get our damn pipeline</nobr></div>
<div style="position:absolute;top:108326;left:108"><nobr>back!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:108373;left:108"><nobr><b>Chainable Conditions</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:108414;left:108"><nobr>In our situation, we have two cases to cover:</nobr></div>
<div style="position:absolute;top:108450;left:127"><nobr>1. If the collection is empty, post an &quot;all good!&quot; comment.</nobr></div>
<div style="position:absolute;top:108477;left:125"><nobr>2. If the collection has any comments, post those comments.</nobr></div>
<div style="position:absolute;top:108512;left:108"><nobr>Let's macro in a few methods to cover these cases.</nobr></div>
<div style="position:absolute;top:108546;left:108"><nobr>First let's create a method called <font style="font-size:13px">ifEmpty </font>that will execute it's closure only if the</nobr></div>
<div style="position:absolute;top:108566;left:108"><nobr>collection is empty. Here's what that would look like:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:108601;left:127"><nobr>Collection::macro(<font color="#df5000">'ifEmpty'</font>, <font color="#a71d5d">function </font>($callback) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:108620;left:154"><nobr>if <font color="#333333">($this-&gt;empty()) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:108639;left:181"><nobr>$callback();</nobr></div>
<div style="position:absolute;top:108658;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:108677;left:154"><nobr>return <font color="#333333">$this;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:108697;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:108748;left:108"><nobr>All we do is run the callback if the collection is empty, then return the</nobr></div>
<div style="position:absolute;top:108768;left:108"><nobr>collection so we can continue to chain if necessary.</nobr></div>
<div style="position:absolute;top:108802;left:108"><nobr>Next let's add a method that runs if the collection is <i>not </i>empty, or put another</nobr></div>
<div style="position:absolute;top:108822;left:108"><nobr>way, if it has <i>any </i>items.</nobr></div>
<div style="position:absolute;top:108856;left:108"><nobr>We'll call this one <font style="font-size:13px">ifAny</font>, and we'll pass the collection into the callback the user</nobr></div>
<div style="position:absolute;top:108876;left:108"><nobr>provides so they have access to the collection if they need it:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:108113;left:108"><nobr>Chapter 14. Nitpicking a Pull Request</nobr></div>
<div style="position:absolute;top:108113;left:627"><nobr>114</nobr></div>
</span></font>

<div style="position:absolute;top:109039;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=115><b>Page 115</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:109150;left:127"><nobr>Collection::macro(<font color="#df5000">'ifAny'</font>, <font color="#a71d5d">function </font>($callback) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:109169;left:154"><nobr>if <font color="#333333">(! $this-&gt;empty()) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:109188;left:181"><nobr>$callback($this);</nobr></div>
<div style="position:absolute;top:109207;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:109227;left:154"><nobr>return <font color="#333333">$this;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:109246;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:109297;left:108"><nobr>Replacing our conditional with these new methods, we get this intermediate</nobr></div>
<div style="position:absolute;top:109318;left:108"><nobr>step:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:109353;left:127"><nobr>public function <font color="#795da3">nitpick</font><font color="#333333">($pullRequest)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:109372;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:109391;left:154"><nobr>$comments = $pullRequest-&gt;changedFiles()-&gt;flatMap(<font color="#a71d5d">function </font>($changedFile) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:109410;left:181"><nobr>return <font color="#333333">$this-&gt;checkFile($changedFile)-&gt;comments();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:109429;left:154"><nobr>})-&gt;reject(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:109448;left:181"><nobr>return <font color="#333333">$comment-&gt;isDuplicate($pullRequest);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:109467;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:109506;left:154"><nobr>$comments-&gt;ifEmpty(<font color="#a71d5d">function </font>()</nobr></div>
</span></font>
<font size=2 color="#795da3" face="Times"><span style="font-size:13px;color:#795da3">
<div style="position:absolute;top:109506;left:370"><nobr>use <font color="#333333">($pullRequest) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:109525;left:181"><nobr>$pullRequest-&gt;postNoViolationsComment();</nobr></div>
<div style="position:absolute;top:109544;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:109582;left:154"><nobr>$comments-&gt;ifAny(<font color="#a71d5d">function </font>($comments) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:109601;left:181"><nobr>$comments-&gt;each(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest)</nobr></div>
<div style="position:absolute;top:109601;left:559"><nobr>{</nobr></div>
<div style="position:absolute;top:109620;left:208"><nobr>$pullRequest-&gt;postComment($comment);</nobr></div>
<div style="position:absolute;top:109639;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:109659;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:109678;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:109729;left:108"><nobr>Of course, now these operations are all chainable, so we can collapse this down</nobr></div>
<div style="position:absolute;top:109750;left:108"><nobr>into a single pipeline and remove the temporary variable entirely:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:109085;left:108"><nobr>115</nobr></div>
<div style="position:absolute;top:109085;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:110011;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=116><b>Page 116</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:110122;left:127"><nobr>public function <font color="#795da3">nitpick</font><font color="#333333">($pullRequest)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:110141;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:110160;left:154"><nobr>$pullRequest-&gt;changedFiles()-&gt;flatMap(<font color="#a71d5d">function </font>($changedFile) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:110179;left:181"><nobr>return <font color="#333333">$this-&gt;checkFile($changedFile)-&gt;comments();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:110199;left:154"><nobr>})-&gt;reject(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:110218;left:181"><nobr>return <font color="#333333">$comment-&gt;isDuplicate($pullRequest);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:110237;left:154"><nobr>})-&gt;ifAny(<font color="#a71d5d">function </font>($comments) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:110256;left:181"><nobr>$comments-&gt;each(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:110275;left:208"><nobr>$pullRequest-&gt;postComment($comment);</nobr></div>
<div style="position:absolute;top:110294;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:110313;left:154"><nobr>})-&gt;ifEmpty(<font color="#a71d5d">function </font>() <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:110332;left:181"><nobr>$pullRequest-&gt;postNoViolationsComment();</nobr></div>
<div style="position:absolute;top:110352;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:110371;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:110422;left:108"><nobr>I'd also add a new function to the <font style="font-size:13px">$pullRequest </font>object that can post multiple</nobr></div>
<div style="position:absolute;top:110443;left:108"><nobr>comments, so we can get rid of that extra level of indentation:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:110478;left:127"><nobr>public function <font color="#795da3">nitpick</font><font color="#333333">($pullRequest)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:110497;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:110516;left:154"><nobr>$pullRequest-&gt;changedFiles()-&gt;flatMap(<font color="#a71d5d">function </font>($changedFile) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:110535;left:181"><nobr>return <font color="#333333">$this-&gt;checkFile($changedFile)-&gt;comments();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:110554;left:154"><nobr>})-&gt;reject(<font color="#a71d5d">function </font>($comment) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:110573;left:181"><nobr>return <font color="#333333">$comment-&gt;isDuplicate($pullRequest);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:110592;left:154"><nobr>})-&gt;ifAny(<font color="#a71d5d">function </font>($comments) <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:110611;left:181"><nobr>$pullRequest-&gt;postComments($comments);</nobr></div>
<div style="position:absolute;top:110631;left:154"><nobr>})-&gt;ifEmpty(<font color="#a71d5d">function </font>() <font color="#795da3">use </font>($pullRequest) {</nobr></div>
<div style="position:absolute;top:110650;left:181"><nobr>$pullRequest-&gt;postNoViolationsComment();</nobr></div>
<div style="position:absolute;top:110669;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:110688;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:110740;left:108"><nobr>If you ask me, this is a pretty interesting way to write this code. Is it always</nobr></div>
<div style="position:absolute;top:110760;left:108"><nobr>the best solution? Probably not, but the idea of conditions as methods is pretty</nobr></div>
<div style="position:absolute;top:110780;left:108"><nobr>fascinating, and I think it opens up a lot of possibilities.</nobr></div>
<div style="position:absolute;top:110814;left:108"><nobr>Keep it in your back pocket and play with it when it makes sense. And if you</nobr></div>
<div style="position:absolute;top:110834;left:108"><nobr>think this is cool, go study Smalltalk! :)</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:110057;left:108"><nobr>Chapter 14. Nitpicking a Pull Request</nobr></div>
<div style="position:absolute;top:110057;left:627"><nobr>116</nobr></div>
</span></font>

<div style="position:absolute;top:110983;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=117><b>Page 117</b></a></font></td></tr></table></div><font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:111093;left:108"><nobr><b>Comparing Monthly Revenue</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:111140;left:108"><nobr>So far we've only worked with problems that started with a single collection of</nobr></div>
<div style="position:absolute;top:111160;left:108"><nobr>items, but collection pipelines can be useful in other cases as well.</nobr></div>
<div style="position:absolute;top:111194;left:108"><nobr>Say we were asked to generate a report that compared revenue from every</nobr></div>
<div style="position:absolute;top:111214;left:108"><nobr>month this year to revenue from every month last year.</nobr></div>
<div style="position:absolute;top:111248;left:108"><nobr>Given last year's monthly revenue and this year's monthly revenue, like so:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111283;left:127"><nobr>$lastYear = [</nobr></div>
<div style="position:absolute;top:111302;left:154"><nobr>2976.50,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111302;left:221"><nobr>// Jan</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111321;left:154"><nobr>2788.84,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111321;left:221"><nobr>// Feb</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111340;left:154"><nobr>2353.92,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111340;left:221"><nobr>// Mar</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111360;left:154"><nobr>3365.36,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111360;left:221"><nobr>// Apr</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111379;left:154"><nobr>2532.99,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111379;left:221"><nobr>// May</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111398;left:154"><nobr>1598.42,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111398;left:221"><nobr>// Jun</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111417;left:154"><nobr>2751.82,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111417;left:221"><nobr>// Jul</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111436;left:154"><nobr>2576.17,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111436;left:221"><nobr>// Aug</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111455;left:154"><nobr>2324.87,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111455;left:221"><nobr>// Sep</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111474;left:154"><nobr>2299.21,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111474;left:221"><nobr>// Oct</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111493;left:154"><nobr>3483.10,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111493;left:221"><nobr>// Nov</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111513;left:154"><nobr>2245.08,</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:111513;left:221"><nobr>// Dec</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:111532;left:127"><nobr>];</nobr></div>
<div style="position:absolute;top:111570;left:127"><nobr>$thisYear = [</nobr></div>
<div style="position:absolute;top:111589;left:154"><nobr>3461.77,</nobr></div>
<div style="position:absolute;top:111608;left:154"><nobr>3665.17,</nobr></div>
<div style="position:absolute;top:111627;left:154"><nobr>3210.53,</nobr></div>
<div style="position:absolute;top:111646;left:154"><nobr>3529.07,</nobr></div>
<div style="position:absolute;top:111666;left:154"><nobr>3376.66,</nobr></div>
<div style="position:absolute;top:111685;left:154"><nobr>3825.49,</nobr></div>
<div style="position:absolute;top:111704;left:154"><nobr>2165.24,</nobr></div>
<div style="position:absolute;top:111723;left:154"><nobr>2261.40,</nobr></div>
<div style="position:absolute;top:111742;left:154"><nobr>3988.76,</nobr></div>
<div style="position:absolute;top:111761;left:154"><nobr>3302.42,</nobr></div>
<div style="position:absolute;top:111780;left:154"><nobr>3345.41,</nobr></div>
<div style="position:absolute;top:111799;left:154"><nobr>2904.80,</nobr></div>
<div style="position:absolute;top:111819;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:111029;left:108"><nobr>117</nobr></div>
<div style="position:absolute;top:111029;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:111955;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=118><b>Page 118</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:112065;left:108"><nobr>...we need to write a function that takes those collections, and spits out one</nobr></div>
<div style="position:absolute;top:112085;left:108"><nobr>collection showing the delta for each month.</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:112120;left:127"><nobr>compare_revenue($thisYear, $lastYear);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:112139;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:112158;left:127"><nobr>//     485.27,</nobr></div>
<div style="position:absolute;top:112177;left:127"><nobr>//     876.33,</nobr></div>
<div style="position:absolute;top:112197;left:127"><nobr>//     856.61,</nobr></div>
<div style="position:absolute;top:112216;left:127"><nobr>//     163.71,</nobr></div>
<div style="position:absolute;top:112235;left:127"><nobr>//     843.67,</nobr></div>
<div style="position:absolute;top:112254;left:127"><nobr>//     2227.07,</nobr></div>
<div style="position:absolute;top:112273;left:127"><nobr>//     -586.58,</nobr></div>
<div style="position:absolute;top:112292;left:127"><nobr>//     -314.77,</nobr></div>
<div style="position:absolute;top:112311;left:127"><nobr>//     1663.89,</nobr></div>
<div style="position:absolute;top:112330;left:127"><nobr>//     1003.21,</nobr></div>
<div style="position:absolute;top:112350;left:127"><nobr>//     -137.69,</nobr></div>
<div style="position:absolute;top:112369;left:127"><nobr>//     659.72,</nobr></div>
<div style="position:absolute;top:112388;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:112439;left:108"><nobr><b>Matching on Index</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:112480;left:108"><nobr>Here's how we might solve this problem using a <font style="font-size:13px">foreach </font>loop:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:112515;left:127"><nobr>function <font color="#795da3">compare_revenue</font><font color="#333333">($thisYear, $lastYear)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:112534;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:112553;left:154"><nobr>$deltas = [];</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:112591;left:154"><nobr>foreach <font color="#333333">($lastYear </font>as <font color="#333333">$month =&gt; $monthlyRevenue) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:112611;left:181"><nobr>$deltas[] = $thisYear[$month] - $monthlyRevenue;</nobr></div>
<div style="position:absolute;top:112630;left:154"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:112668;left:154"><nobr>return <font color="#333333">$deltas;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:112687;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:112739;left:108"><nobr>This is pretty short and it works, but some things just feel oL about it. For</nobr></div>
<div style="position:absolute;top:112759;left:108"><nobr>example, why iterate over <font style="font-size:13px">$lastYear </font>instead of <font style="font-size:13px">$thisYear</font>? There's no real reason</nobr></div>
<div style="position:absolute;top:112779;left:108"><nobr>for it, it's just arbitrary.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:112001;left:108"><nobr>Chapter 15. Comparing Monthly Revenue</nobr></div>
<div style="position:absolute;top:112001;left:627"><nobr>118</nobr></div>
</span></font>

<div style="position:absolute;top:112927;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=119><b>Page 119</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:113037;left:108"><nobr>It feels like we've just arranged some code that happens to work, instead of</nobr></div>
<div style="position:absolute;top:113057;left:108"><nobr>trying to model what we're trying to do in a meaningful, expressive way.</nobr></div>
<div style="position:absolute;top:113091;left:108"><nobr>Let's try and write this using a more declarative style.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:113137;left:108"><nobr><b>Zipping Things Together</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:113179;left:108"><nobr>I'd like to introduce you to an operation called <font style="font-size:13px">zip</font>.</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:113215;left:108"><nobr>zip <font style="font-size:15px">lets you take one collection, and pair every element in that collection with</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:113233;left:108"><nobr>the corresponding element in another collection.</nobr></div>
<div style="position:absolute;top:113266;left:108"><nobr>For example, here we're zipping <font style="font-size:13px">[1, 2, 3] </font>with <font style="font-size:13px">['a', 'b', 'c'] </font>to produce a</nobr></div>
<div style="position:absolute;top:113287;left:108"><nobr>new collection of pairs:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:113322;left:127"><nobr>collect([1, 2, 3])-&gt;zip([<font color="#df5000">'a'</font>, <font color="#df5000">'b'</font>, <font color="#df5000">'c'</font>]);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:113341;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:113360;left:127"><nobr>//   [1, 'a'],</nobr></div>
<div style="position:absolute;top:113379;left:127"><nobr>//   [2, 'b'],</nobr></div>
<div style="position:absolute;top:113398;left:127"><nobr>//   [3, 'c'],</nobr></div>
<div style="position:absolute;top:113417;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:113469;left:108"><nobr>Think of each collection as being one side of a zipper on a jacket. When we</nobr></div>
<div style="position:absolute;top:113489;left:108"><nobr>zip the two sides together, each tooth on the first side is paired up with a tooth</nobr></div>
<div style="position:absolute;top:113509;left:108"><nobr>from the second side.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:113556;left:108"><nobr><b>Using Zip to Compare</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:113597;left:108"><nobr>As you might have guessed, <font style="font-size:13px">zip </font>is really handy when you need to compare</nobr></div>
<div style="position:absolute;top:113617;left:108"><nobr>corresponding values between two collections.</nobr></div>
<div style="position:absolute;top:113651;left:108"><nobr>If we zip our two years of revenue together, we get this:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:112973;left:108"><nobr>119</nobr></div>
<div style="position:absolute;top:112973;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:113899;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=120><b>Page 120</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:114010;left:127"><nobr>collect($thisYear)-&gt;zip($lastYear);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:114029;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:114048;left:127"><nobr>//   [2976.50, 3461.77],</nobr></div>
<div style="position:absolute;top:114067;left:127"><nobr>//   [2788.84, 3665.17],</nobr></div>
<div style="position:absolute;top:114087;left:127"><nobr>//   [2353.92, 3210.53],</nobr></div>
<div style="position:absolute;top:114106;left:127"><nobr>//   [3365.36, 3529.07],</nobr></div>
<div style="position:absolute;top:114125;left:127"><nobr>//   [2532.99, 3376.66],</nobr></div>
<div style="position:absolute;top:114144;left:127"><nobr>//   [1598.42, 3825.49],</nobr></div>
<div style="position:absolute;top:114163;left:127"><nobr>//   [2751.82, 2165.24],</nobr></div>
<div style="position:absolute;top:114182;left:127"><nobr>//   [2576.17, 2261.40],</nobr></div>
<div style="position:absolute;top:114201;left:127"><nobr>//   [2324.87, 3988.76],</nobr></div>
<div style="position:absolute;top:114220;left:127"><nobr>//   [2299.21, 3302.42],</nobr></div>
<div style="position:absolute;top:114240;left:127"><nobr>//   [3483.10, 3345.41],</nobr></div>
<div style="position:absolute;top:114259;left:127"><nobr>//   [2245.08, 2904.80],</nobr></div>
<div style="position:absolute;top:114278;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:114329;left:108"><nobr>Now that we have each corresponding month grouped in pairs, we can <font style="font-size:13px">map</font></nobr></div>
<div style="position:absolute;top:114350;left:108"><nobr>those pairs into their deltas, giving us this solution:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:114385;left:127"><nobr>function <font color="#795da3">compare_revenue</font><font color="#333333">($thisYear, $lastYear)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:114404;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:114423;left:154"><nobr>return <font color="#333333">collect($thisYear)-&gt;zip($lastYear)-&gt;map(</font>function <font color="#333333">($thisAndLast) {</font></nobr></div>
<div style="position:absolute;top:114442;left:181"><nobr>return <font color="#333333">$thisAndLast[0] - $thisAndLast[1];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:114461;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:114480;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:114532;left:108"><nobr>Like always, we were able to solve this problem using collection pipelines by</nobr></div>
<div style="position:absolute;top:114552;left:108"><nobr>trying to break it down into small, discrete steps.</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:114589;left:108"><nobr>zip <font style="font-size:15px">was a tricky one to find use cases for when I first learned it, but nowadays</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:114606;left:108"><nobr>I run into opportunities to use it all the time. Pay attention to situations where</nobr></div>
<div style="position:absolute;top:114626;left:108"><nobr>you want to loop over two arrays at once, <font style="font-size:13px">zip </font>is the secret to solving those</nobr></div>
<div style="position:absolute;top:114647;left:108"><nobr>problems with a collection pipeline.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:113945;left:108"><nobr>Chapter 15. Comparing Monthly Revenue</nobr></div>
<div style="position:absolute;top:113945;left:627"><nobr>120</nobr></div>
</span></font>

<div style="position:absolute;top:114871;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=121><b>Page 121</b></a></font></td></tr></table></div><font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:114981;left:108"><nobr><b>Transposing Form Input</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:115028;left:108"><nobr>Dealing with arrays in form submissions is a pain in the ass.</nobr></div>
<div style="position:absolute;top:115062;left:108"><nobr>Imagine you need to build a page that allows users to add multiple contacts at</nobr></div>
<div style="position:absolute;top:115082;left:108"><nobr>once. If a contact has a <font style="font-size:13px">name</font>, <font style="font-size:13px">email</font>, and <font style="font-size:13px">occupation</font>, ideally the incoming request</nobr></div>
<div style="position:absolute;top:115102;left:108"><nobr>would look something like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:115137;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:115156;left:154"><nobr>'contacts' <font color="#333333">=&gt; [</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:115176;left:181"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:115195;left:208"><nobr>'name' <font color="#333333">=&gt; </font>'Jane'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:115214;left:208"><nobr>'occupation' <font color="#333333">=&gt; </font>'Doctor'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:115233;left:208"><nobr>'email' <font color="#333333">=&gt; </font>'jane@example.com'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:115252;left:181"><nobr>],</nobr></div>
<div style="position:absolute;top:115271;left:181"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:115290;left:208"><nobr>'name' <font color="#333333">=&gt; </font>'Bob'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:115309;left:208"><nobr>'occupation' <font color="#333333">=&gt; </font>'Plumber'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:115329;left:208"><nobr>'email' <font color="#333333">=&gt; </font>'bob@example.com'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:115348;left:181"><nobr>],</nobr></div>
<div style="position:absolute;top:115367;left:181"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:115386;left:208"><nobr>'name' <font color="#333333">=&gt; </font>'Mary'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:115405;left:208"><nobr>'occupation' <font color="#333333">=&gt; </font>'Dentist'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:115424;left:208"><nobr>'email' <font color="#333333">=&gt; </font>'mary@example.com'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:115443;left:181"><nobr>],</nobr></div>
<div style="position:absolute;top:115462;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:115482;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:115533;left:108"><nobr>The problem is that crafting a form that actually submits this format is</nobr></div>
<div style="position:absolute;top:115553;left:108"><nobr>surprisingly complicated.</nobr></div>
<div style="position:absolute;top:115587;left:108"><nobr>If you haven't had to do this before, you might think you can get away with</nobr></div>
<div style="position:absolute;top:115607;left:108"><nobr>something like this, using just a pinch of JavaScript to duplicate the form fields</nobr></div>
<div style="position:absolute;top:115628;left:108"><nobr>while keeping all of the field names the same:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:114917;left:108"><nobr>121</nobr></div>
<div style="position:absolute;top:114917;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:115843;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=122><b>Page 122</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:115954;left:127"><nobr>&lt;<font color="#63a35c">form </font><font color="#795da3">method</font>=<font color="#df5000">&quot;POST&quot; </font><font color="#795da3">action</font>=<font color="#df5000">&quot;/contacts&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:115973;left:154"><nobr>&lt;<font color="#63a35c">div</font>&gt;</nobr></div>
<div style="position:absolute;top:115992;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:116011;left:208"><nobr>Name</nobr></div>
<div style="position:absolute;top:116031;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;contacts[][name]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:116050;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:116069;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:116088;left:208"><nobr>Email</nobr></div>
<div style="position:absolute;top:116107;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;contacts[][email]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:116126;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:116145;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:116164;left:208"><nobr>Occupation</nobr></div>
<div style="position:absolute;top:116184;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;contacts[][occupation]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:116203;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:116222;left:154"><nobr>&lt;/<font color="#63a35c">div</font>&gt;</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:116260;left:154"><nobr>&lt;!-- Adds another set of form fields using JavaScript --&gt;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:116279;left:154"><nobr>&lt;<font color="#63a35c">button </font><font color="#795da3">type</font>=<font color="#df5000">&quot;button&quot;</font>&gt;Add another contact&lt;/<font color="#63a35c">button</font>&gt;</nobr></div>
<div style="position:absolute;top:116317;left:154"><nobr>&lt;<font color="#63a35c">button </font><font color="#795da3">type</font>=<font color="#df5000">&quot;submit&quot;</font>&gt;Save contacts&lt;/<font color="#63a35c">button</font>&gt;</nobr></div>
<div style="position:absolute;top:116337;left:127"><nobr>&lt;/<font color="#63a35c">form</font>&gt;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:116388;left:108"><nobr>...but this gives you a request that looks like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:116423;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:116442;left:154"><nobr>'contacts' <font color="#333333">=&gt; [</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:116461;left:181"><nobr>[ <font color="#df5000">'name' </font>=&gt; <font color="#df5000">'Jane' </font>],</nobr></div>
<div style="position:absolute;top:116481;left:181"><nobr>[ <font color="#df5000">'occupation' </font>=&gt; <font color="#df5000">'Doctor' </font>],</nobr></div>
<div style="position:absolute;top:116500;left:181"><nobr>[ <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'jane@example.com' </font>],</nobr></div>
<div style="position:absolute;top:116519;left:181"><nobr>[ <font color="#df5000">'name' </font>=&gt; <font color="#df5000">'Bob' </font>],</nobr></div>
<div style="position:absolute;top:116538;left:181"><nobr>[ <font color="#df5000">'occupation' </font>=&gt; <font color="#df5000">'Plumber' </font>],</nobr></div>
<div style="position:absolute;top:116557;left:181"><nobr>[ <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'bob@example.com' </font>],</nobr></div>
<div style="position:absolute;top:116576;left:181"><nobr>[ <font color="#df5000">'name' </font>=&gt; <font color="#df5000">'Mary' </font>],</nobr></div>
<div style="position:absolute;top:116595;left:181"><nobr>[ <font color="#df5000">'occupation' </font>=&gt; <font color="#df5000">'Dentist' </font>],</nobr></div>
<div style="position:absolute;top:116614;left:181"><nobr>[ <font color="#df5000">'email' </font>=&gt; <font color="#df5000">'mary@example.com' </font>],</nobr></div>
<div style="position:absolute;top:116634;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:116653;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:115889;left:108"><nobr>Chapter 16. Transposing Form Input</nobr></div>
<div style="position:absolute;top:115889;left:627"><nobr>122</nobr></div>
</span></font>

<div style="position:absolute;top:116815;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=123><b>Page 123</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:116925;left:108"><nobr>To get the form to submit in the correct format, you need to give each set of</nobr></div>
<div style="position:absolute;top:116945;left:108"><nobr>fields an explicit index:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:116980;left:127"><nobr>&lt;<font color="#63a35c">form </font><font color="#795da3">method</font>=<font color="#df5000">&quot;POST&quot; </font><font color="#795da3">action</font>=<font color="#df5000">&quot;/contacts&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:116999;left:154"><nobr>&lt;<font color="#63a35c">div</font>&gt;</nobr></div>
<div style="position:absolute;top:117018;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:117037;left:208"><nobr>Name</nobr></div>
<div style="position:absolute;top:117057;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;contacts[0][names]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:117076;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:117095;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:117114;left:208"><nobr>Email</nobr></div>
<div style="position:absolute;top:117133;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;contacts[0][emails]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:117152;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:117171;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:117190;left:208"><nobr>Occupation</nobr></div>
<div style="position:absolute;top:117210;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;contacts[0][occupations]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:117229;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:117248;left:154"><nobr>&lt;/<font color="#63a35c">div</font>&gt;</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:117286;left:154"><nobr>&lt;!-- Adds another set of form fields using JavaScript --&gt;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:117305;left:154"><nobr>&lt;<font color="#63a35c">button </font><font color="#795da3">type</font>=<font color="#df5000">&quot;button&quot;</font>&gt;Add another contact&lt;/<font color="#63a35c">button</font>&gt;</nobr></div>
<div style="position:absolute;top:117343;left:154"><nobr>&lt;<font color="#63a35c">button </font><font color="#795da3">type</font>=<font color="#df5000">&quot;submit&quot;</font>&gt;Save contacts&lt;/<font color="#63a35c">button</font>&gt;</nobr></div>
<div style="position:absolute;top:117363;left:127"><nobr>&lt;/<font color="#63a35c">form</font>&gt;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:117414;left:108"><nobr>...which means that when you add another set of fields, you need to change the</nobr></div>
<div style="position:absolute;top:117434;left:108"><nobr>name of every input, incrementing the index by one.</nobr></div>
<div style="position:absolute;top:117468;left:108"><nobr>Doesn't seem too unreasonable at first, just count the sets of fields and add one</nobr></div>
<div style="position:absolute;top:117488;left:108"><nobr>for the new set right?</nobr></div>
<div style="position:absolute;top:117522;left:108"><nobr><i>Wrong! </i>What if a user removes a set of fields? Or two sets of fields? Now there</nobr></div>
<div style="position:absolute;top:117542;left:108"><nobr>might only be 3 sets remaining but the last set still has an index of 4, so just</nobr></div>
<div style="position:absolute;top:117563;left:108"><nobr>counting the fields is going to result in a collision.</nobr></div>
<div style="position:absolute;top:117596;left:108"><nobr>So what can you do? Well, you have a few options:</nobr></div>
<div style="position:absolute;top:117632;left:127"><nobr>1. Parse out the index from the last set of fields and add one to that</nobr></div>
<div style="position:absolute;top:117652;left:149"><nobr>number whenever you add new fields.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:116861;left:108"><nobr>123</nobr></div>
<div style="position:absolute;top:116861;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:117787;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=124><b>Page 124</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:117897;left:125"><nobr>2. Keep track of the index as state in your JavaScript.</nobr></div>
<div style="position:absolute;top:117924;left:125"><nobr>3. Throw away <i>all </i>of the indexes and recalculate them every time you add</nobr></div>
<div style="position:absolute;top:117944;left:149"><nobr>or remove a set of fields.</nobr></div>
<div style="position:absolute;top:117979;left:108"><nobr>All of a sudden this seems like a lot more work on the front-end than you</nobr></div>
<div style="position:absolute;top:118000;left:108"><nobr>signed up for! But there's one other option:</nobr></div>
<div style="position:absolute;top:118033;left:108"><nobr><i>Submit the data in a di3erent format and deal with it on the server.</i></nobr></div>
<div style="position:absolute;top:118067;left:108"><nobr>As long as we aren't nesting <i>past </i>the empty square brackets, PHP is happy to let</nobr></div>
<div style="position:absolute;top:118087;left:108"><nobr>us leave out the index. So what you'll commonly see people do in this situation</nobr></div>
<div style="position:absolute;top:118108;left:108"><nobr><i>(and what you may have done yourself) </i>is name the form fields like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:118143;left:127"><nobr>&lt;<font color="#63a35c">form </font><font color="#795da3">method</font>=<font color="#df5000">&quot;POST&quot; </font><font color="#795da3">action</font>=<font color="#df5000">&quot;/contacts&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:118162;left:154"><nobr>&lt;<font color="#63a35c">div</font>&gt;</nobr></div>
<div style="position:absolute;top:118181;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:118200;left:208"><nobr>Name</nobr></div>
<div style="position:absolute;top:118219;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;names[]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:118238;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:118257;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:118277;left:208"><nobr>Email</nobr></div>
<div style="position:absolute;top:118296;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;emails[]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:118315;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:118334;left:181"><nobr>&lt;<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:118353;left:208"><nobr>Occupation</nobr></div>
<div style="position:absolute;top:118372;left:208"><nobr>&lt;<font color="#63a35c">input </font><font color="#795da3">name</font>=<font color="#df5000">&quot;occupations[]&quot;</font>&gt;</nobr></div>
<div style="position:absolute;top:118391;left:181"><nobr>&lt;/<font color="#63a35c">label</font>&gt;</nobr></div>
<div style="position:absolute;top:118410;left:154"><nobr>&lt;/<font color="#63a35c">div</font>&gt;</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:118449;left:154"><nobr>&lt;!-- Adds another set of form fields using JavaScript --&gt;</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:118468;left:154"><nobr>&lt;<font color="#63a35c">button </font><font color="#795da3">type</font>=<font color="#df5000">&quot;button&quot;</font>&gt;Add another contact&lt;/<font color="#63a35c">button</font>&gt;</nobr></div>
<div style="position:absolute;top:118506;left:154"><nobr>&lt;<font color="#63a35c">button </font><font color="#795da3">type</font>=<font color="#df5000">&quot;submit&quot;</font>&gt;Save contacts&lt;/<font color="#63a35c">button</font>&gt;</nobr></div>
<div style="position:absolute;top:118525;left:127"><nobr>&lt;/<font color="#63a35c">form</font>&gt;</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:118577;left:108"><nobr>The benefit of course is that now we don't have to keep track of the index.</nobr></div>
<div style="position:absolute;top:118597;left:108"><nobr>We can reuse the same markup for every set of fields, never worrying about</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:117833;left:108"><nobr>Chapter 16. Transposing Form Input</nobr></div>
<div style="position:absolute;top:117833;left:627"><nobr>124</nobr></div>
</span></font>

<div style="position:absolute;top:118759;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=125><b>Page 125</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:118869;left:108"><nobr>the total number of fields in the form, or what happens when a set of fields is</nobr></div>
<div style="position:absolute;top:118889;left:108"><nobr>removed. <i>Excellent!</i></nobr></div>
<div style="position:absolute;top:118923;left:108"><nobr>The disadvantage is that now our incoming request looks like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:118958;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:118977;left:154"><nobr>'names' <font color="#333333">=&gt; [</font></nobr></div>
<div style="position:absolute;top:118996;left:181"><nobr>'Jane'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:119015;left:181"><nobr>'Bob'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:119034;left:181"><nobr>'Mary'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:119053;left:154"><nobr>],</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:119073;left:154"><nobr>'emails' <font color="#333333">=&gt; [</font></nobr></div>
<div style="position:absolute;top:119092;left:181"><nobr>'jane@example.com'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:119111;left:181"><nobr>'bob@example.com'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:119130;left:181"><nobr>'mary@example.com'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:119149;left:154"><nobr>],</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:119168;left:154"><nobr>'occupations' <font color="#333333">=&gt; [</font></nobr></div>
<div style="position:absolute;top:119187;left:181"><nobr>'Doctor'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:119206;left:181"><nobr>'Plumber'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:119226;left:181"><nobr>'Dentist'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:119245;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:119264;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:119315;left:108"><nobr><i>Ruh-roh!</i></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:119362;left:108"><nobr><b>Quick and Dirty</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:119403;left:108"><nobr>We need to get these contacts out of the request and into our system. Say we</nobr></div>
<div style="position:absolute;top:119423;left:108"><nobr>want our controller action to take this general form:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:119458;left:127"><nobr>public function <font color="#795da3">store</font><font color="#333333">()</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:119478;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:119497;left:154"><nobr>$contacts = <font color="#969896">/* Build the contacts using the request data */</font>;</nobr></div>
<div style="position:absolute;top:119535;left:154"><nobr>Auth::user()-&gt;contacts()-&gt;saveMany($contacts);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:119573;left:154"><nobr>return <font color="#333333">redirect()-&gt;home();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:119592;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:118805;left:108"><nobr>125</nobr></div>
<div style="position:absolute;top:118805;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:119731;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=126><b>Page 126</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:119841;left:108"><nobr>How can we translate our request data into actual <font style="font-size:13px">Contact </font>objects? An</nobr></div>
<div style="position:absolute;top:119861;left:108"><nobr>imperative solution might look something like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:119896;left:127"><nobr>public function <font color="#795da3">store</font><font color="#333333">(Request $request)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:119915;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:119934;left:154"><nobr>$contacts = [];</nobr></div>
<div style="position:absolute;top:119973;left:154"><nobr>$names = $request-&gt;get(<font color="#df5000">'names'</font>);</nobr></div>
<div style="position:absolute;top:119992;left:154"><nobr>$emails = $request-&gt;get(<font color="#df5000">'emails'</font>);</nobr></div>
<div style="position:absolute;top:120011;left:154"><nobr>$occupations = $request-&gt;get(<font color="#df5000">'occupations'</font>);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:120049;left:154"><nobr>foreach <font color="#333333">($names </font>as <font color="#333333">$i =&gt; $name) {</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:120068;left:181"><nobr>$contacts[] = <font color="#a71d5d">new </font>Contact([</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:120087;left:208"><nobr>'name' <font color="#333333">=&gt; $name,</font></nobr></div>
<div style="position:absolute;top:120106;left:208"><nobr>'email' <font color="#333333">=&gt; $emails[$i],</font></nobr></div>
<div style="position:absolute;top:120126;left:208"><nobr>'occupation' <font color="#333333">=&gt; $occupations[$i],</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:120145;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:120164;left:154"><nobr>}</nobr></div>
<div style="position:absolute;top:120202;left:154"><nobr>Auth::user()-&gt;contacts()-&gt;saveMany($contacts);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:120240;left:154"><nobr>return <font color="#333333">redirect()-&gt;home();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:120259;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:120311;left:108"><nobr>First, we grab the names, emails, and occupations from the request. Then we</nobr></div>
<div style="position:absolute;top:120331;left:108"><nobr>arbitrarily iterate over one of them <i>(the names in this case)</i>, pull out the other</nobr></div>
<div style="position:absolute;top:120352;left:108"><nobr>fields we need by matching up the index, and create our <font style="font-size:13px">Contact </font>objects.</nobr></div>
<div style="position:absolute;top:120385;left:108"><nobr>There's certainly nothing <i>wrong </i>with this approach, I mean, it works, right? But</nobr></div>
<div style="position:absolute;top:120406;left:108"><nobr>we're breaking the golden rule, and those temporary variables are bugging me.</nobr></div>
<div style="position:absolute;top:120426;left:108"><nobr>Can we refactor this into a series of independent transformations that don't</nobr></div>
<div style="position:absolute;top:120446;left:108"><nobr>rely on temporary state? Let's see!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:120493;left:108"><nobr><b>Identifying a Need</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:120534;left:108"><nobr>First things first, let's get our request data into a collection.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:119777;left:108"><nobr>Chapter 16. Transposing Form Input</nobr></div>
<div style="position:absolute;top:119777;left:627"><nobr>126</nobr></div>
</span></font>

<div style="position:absolute;top:120703;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=127><b>Page 127</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:120814;left:127"><nobr>public function <font color="#795da3">store</font><font color="#333333">(Request $request)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:120833;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:120852;left:154"><nobr>$requestData = collect($request-&gt;only(<font color="#df5000">'names'</font>, <font color="#df5000">'emails'</font>, <font color="#df5000">'occupations'</font>));</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:120891;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:120910;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:120961;left:108"><nobr>This pulls <font style="font-size:13px">names</font>, <font style="font-size:13px">emails</font>, and <font style="font-size:13px">occupations </font>out into a new collection, which is about</nobr></div>
<div style="position:absolute;top:120982;left:108"><nobr>the best starting point we're going to get from that form submission.</nobr></div>
<div style="position:absolute;top:121015;left:108"><nobr>Next, we need to somehow get our <font style="font-size:13px">Contact </font>objects out of this collection.</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:121050;left:127"><nobr>public function <font color="#795da3">store</font><font color="#333333">(Request $request)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:121069;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:121089;left:154"><nobr>$requestData = collect($request-&gt;only(<font color="#df5000">'names'</font>, <font color="#df5000">'emails'</font>, <font color="#df5000">'occupations'</font>));</nobr></div>
<div style="position:absolute;top:121127;left:154"><nobr>$contacts = $requestData-&gt;<font color="#969896">/* ??? */</font>;</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:121165;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:121184;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:121236;left:108"><nobr>Typically when we have a collection of data and we need to transform each</nobr></div>
<div style="position:absolute;top:121256;left:108"><nobr>element into something new, we use <font style="font-size:13px">map</font>.</nobr></div>
<div style="position:absolute;top:121290;left:108"><nobr>But in order to map our contact data into <font style="font-size:13px">Contact </font>objects, we need each element</nobr></div>
<div style="position:absolute;top:121310;left:108"><nobr>in our collection to contain the <font style="font-size:13px">name</font>, <font style="font-size:13px">email</font>, and <font style="font-size:13px">occupation </font>for a single contact.</nobr></div>
<div style="position:absolute;top:121330;left:108"><nobr>Right now, the first element in our array is <i>all </i>of the <font style="font-size:13px">names</font>, the second element</nobr></div>
<div style="position:absolute;top:121351;left:108"><nobr>is all <font style="font-size:13px">emails</font>, and the last element is all <font style="font-size:13px">occupations</font>.</nobr></div>
<div style="position:absolute;top:121384;left:108"><nobr>So before we can use <font style="font-size:13px">map</font>, we need some mystery function to get our data into</nobr></div>
<div style="position:absolute;top:121405;left:108"><nobr>the right structure.</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:121440;left:127"><nobr>public function <font color="#795da3">store</font><font color="#333333">(Request $request)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:121459;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:121478;left:154"><nobr>$requestData = collect($request-&gt;only(<font color="#df5000">'names'</font>, <font color="#df5000">'emails'</font>, <font color="#df5000">'occupations'</font>));</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:120749;left:108"><nobr>127</nobr></div>
<div style="position:absolute;top:120749;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:121675;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=128><b>Page 128</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:121786;left:154"><nobr>$contacts = $requestData-&gt;<font color="#969896">/*</font></nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:121824;left:181"><nobr>Mystery operation!</nobr></div>
<div style="position:absolute;top:121863;left:154"><nobr>*/<font color="#333333">-&gt;map(</font><font color="#a71d5d">function </font><font color="#333333">($contactData) {</font></nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:121882;left:181"><nobr>return new <font color="#333333">Contact([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:121901;left:208"><nobr>'name' <font color="#333333">=&gt; $contactData[</font>'name'<font color="#333333">],</font></nobr></div>
<div style="position:absolute;top:121920;left:208"><nobr>'email' <font color="#333333">=&gt; $contactData[</font>'email'<font color="#333333">],</font></nobr></div>
<div style="position:absolute;top:121939;left:208"><nobr>'occupation' <font color="#333333">=&gt; $contactData[</font>'occupation'<font color="#333333">],</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:121958;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:121977;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:122016;left:154"><nobr>// ...</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:122035;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:122086;left:108"><nobr><b>Introducing Transpose</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:122127;left:108"><nobr><i>Transpose </i>is an often overlooked list operation that I first noticed <font color="#0000ff"><a href="http://ruby-doc.org/core-2.2.0/Array.html#method-i-transpose">in Ruby</a></font><a href="http://ruby-doc.org/core-2.2.0/Array.html#method-i-transpose"></a>.</nobr></div>
<div style="position:absolute;top:122161;left:108"><nobr>The goal of <font style="font-size:13px">transpose </font>is to rotate a multidimensional array, turning the rows</nobr></div>
<div style="position:absolute;top:122181;left:108"><nobr>into columns and the columns into rows.</nobr></div>
<div style="position:absolute;top:122215;left:108"><nobr>Say we had this array:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:122250;left:127"><nobr>$before = [</nobr></div>
<div style="position:absolute;top:122269;left:154"><nobr>[1, 2, 3],</nobr></div>
<div style="position:absolute;top:122288;left:154"><nobr>[4, 5, 6],</nobr></div>
<div style="position:absolute;top:122307;left:154"><nobr>[7, 8, 9],</nobr></div>
<div style="position:absolute;top:122326;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:122378;left:108"><nobr>If we transpose that array, <font style="font-size:13px">[1, 2, 3] </font>becomes the first <i>column </i>rather than the</nobr></div>
<div style="position:absolute;top:122398;left:108"><nobr>first row, <font style="font-size:13px">[4, 5, 6] </font>becomes the second column, and <font style="font-size:13px">[7, 8, 9] </font>becomes the last</nobr></div>
<div style="position:absolute;top:122418;left:108"><nobr>column.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:121721;left:108"><nobr>Chapter 16. Transposing Form Input</nobr></div>
<div style="position:absolute;top:121721;left:627"><nobr>128</nobr></div>
</span></font>

<div style="position:absolute;top:122647;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=129><b>Page 129</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:122758;left:127"><nobr>$after = [</nobr></div>
<div style="position:absolute;top:122777;left:154"><nobr>[1, 4, 7],</nobr></div>
<div style="position:absolute;top:122796;left:154"><nobr>[2, 5, 8],</nobr></div>
<div style="position:absolute;top:122815;left:154"><nobr>[3, 6, 9],</nobr></div>
<div style="position:absolute;top:122835;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:122886;left:108"><nobr>Let's look at our incoming request again:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:122921;left:127"><nobr>[</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:122940;left:154"><nobr>'names' <font color="#333333">=&gt; [</font></nobr></div>
<div style="position:absolute;top:122959;left:181"><nobr>'Jane'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:122979;left:181"><nobr>'Bob'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:122998;left:181"><nobr>'Mary'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:123017;left:154"><nobr>],</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:123036;left:154"><nobr>'emails' <font color="#333333">=&gt; [</font></nobr></div>
<div style="position:absolute;top:123055;left:181"><nobr>'jane@example.com'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:123074;left:181"><nobr>'bob@example.com'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:123093;left:181"><nobr>'mary@example.com'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:123112;left:154"><nobr>],</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:123132;left:154"><nobr>'occupations' <font color="#333333">=&gt; [</font></nobr></div>
<div style="position:absolute;top:123151;left:181"><nobr>'Doctor'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:123170;left:181"><nobr>'Plumber'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:123189;left:181"><nobr>'Dentist'<font color="#333333">,</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:123208;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:123227;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:123279;left:108"><nobr>If we get rid of the keys, we're left with a multidimensional array that looks like</nobr></div>
<div style="position:absolute;top:123299;left:108"><nobr>this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:123334;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:123353;left:154"><nobr>[<font color="#df5000">'Jane'</font>, <font color="#df5000">'Bob'</font>, <font color="#df5000">'Mary'</font>],</nobr></div>
<div style="position:absolute;top:123372;left:154"><nobr>[<font color="#df5000">'jane@example.com'</font>, <font color="#df5000">'bob@example.com'</font>, <font color="#df5000">'mary@example.com'</font>],</nobr></div>
<div style="position:absolute;top:123391;left:154"><nobr>[<font color="#df5000">'Doctor'</font>, <font color="#df5000">'Plumber'</font>, <font color="#df5000">'Dentist'</font>],</nobr></div>
<div style="position:absolute;top:123411;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:123462;left:108"><nobr>I wonder what happens if we <font style="font-size:13px">transpose </font>that array?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:122693;left:108"><nobr>129</nobr></div>
<div style="position:absolute;top:122693;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:123619;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=130><b>Page 130</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:123730;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:123749;left:154"><nobr>[<font color="#df5000">'Jane'</font>, <font color="#df5000">'jane@example.com'</font>, <font color="#df5000">'Doctor'</font>],</nobr></div>
<div style="position:absolute;top:123768;left:154"><nobr>[<font color="#df5000">'Bob'</font>, <font color="#df5000">'bob@example.com'</font>, <font color="#df5000">'Plumber'</font>],</nobr></div>
<div style="position:absolute;top:123787;left:154"><nobr>[<font color="#df5000">'Mary'</font>, <font color="#df5000">'mary@example.com'</font>, <font color="#df5000">'Dentist'</font>],</nobr></div>
<div style="position:absolute;top:123807;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:123858;left:108"><nobr><i>Whoa! </i>This looks pretty close to the structure we wanted in first place, albeit</nobr></div>
<div style="position:absolute;top:123878;left:108"><nobr>without the keys. We can work with this!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:123925;left:108"><nobr><b>Implementing Transpose</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:123966;left:108"><nobr>Laravel's <font style="font-size:13px">Collection </font>class doesn't implement <font style="font-size:13px">transpose </font>out of the box, but since</nobr></div>
<div style="position:absolute;top:123986;left:108"><nobr>collections are macroable, we can add it at runtime.</nobr></div>
<div style="position:absolute;top:124020;left:108"><nobr>Here's what a basic implementation looks like:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:124055;left:127"><nobr>Collection::macro(<font color="#df5000">'transpose'</font>, <font color="#a71d5d">function </font>() {</nobr></div>
<div style="position:absolute;top:124074;left:154"><nobr>$items = array_map(<font color="#a71d5d">function </font>(...$items) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:124093;left:181"><nobr>return <font color="#333333">$items;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:124113;left:154"><nobr>}, ...$this-&gt;values());</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:124151;left:154"><nobr>return new static<font color="#333333">($items);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:124170;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:124221;left:108"><nobr><b>Transpose in Practice</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:124262;left:108"><nobr>Now that we've found our mystery function, we can finish oL our controller</nobr></div>
<div style="position:absolute;top:124282;left:108"><nobr>action:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:124317;left:127"><nobr>public function <font color="#795da3">store</font><font color="#333333">(Request $request)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:124336;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:124356;left:154"><nobr>$requestData = collect($request-&gt;only(<font color="#df5000">'names'</font>, <font color="#df5000">'emails'</font>, <font color="#df5000">'occupations'</font>));</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:123665;left:108"><nobr>Chapter 16. Transposing Form Input</nobr></div>
<div style="position:absolute;top:123665;left:627"><nobr>130</nobr></div>
</span></font>

<div style="position:absolute;top:124591;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=131><b>Page 131</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:124702;left:154"><nobr>$contacts = $requestData-&gt;transpose()-&gt;map(<font color="#a71d5d">function </font>($contactData) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:124721;left:181"><nobr>return new <font color="#333333">Contact([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:124740;left:208"><nobr>'name' <font color="#333333">=&gt; $contactData[0],</font></nobr></div>
<div style="position:absolute;top:124759;left:208"><nobr>'email' <font color="#333333">=&gt; $contactData[1],</font></nobr></div>
<div style="position:absolute;top:124779;left:208"><nobr>'occupation' <font color="#333333">=&gt; $contactData[2],</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:124798;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:124817;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:124855;left:154"><nobr>Auth::user()-&gt;contacts()-&gt;saveMany($contacts);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:124893;left:154"><nobr>return <font color="#333333">redirect()-&gt;home();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:124912;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:124964;left:108"><nobr>We can even collapse this down further, turning just about the whole action</nobr></div>
<div style="position:absolute;top:124984;left:108"><nobr>into a single chain:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:125019;left:127"><nobr>public function <font color="#795da3">store</font><font color="#333333">(Request $request)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:125038;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:125058;left:154"><nobr>collect($request-&gt;only([</nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:125077;left:181"><nobr>'names'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:125096;left:181"><nobr>'emails'<font color="#333333">,</font></nobr></div>
<div style="position:absolute;top:125115;left:181"><nobr>'occupations'</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:125134;left:154"><nobr>]))-&gt;transpose()-&gt;map(<font color="#a71d5d">function </font>($contactData) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:125153;left:181"><nobr>return new <font color="#333333">Contact([</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:125172;left:208"><nobr>'name' <font color="#333333">=&gt; $contactData[0],</font></nobr></div>
<div style="position:absolute;top:125191;left:208"><nobr>'email' <font color="#333333">=&gt; $contactData[1],</font></nobr></div>
<div style="position:absolute;top:125211;left:208"><nobr>'occupation' <font color="#333333">=&gt; $contactData[2],</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:125230;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:125249;left:154"><nobr>})-&gt;each(<font color="#a71d5d">function </font>($contact) {</nobr></div>
<div style="position:absolute;top:125268;left:181"><nobr>Auth::user()-&gt;contacts()-&gt;save($contact);</nobr></div>
<div style="position:absolute;top:125287;left:154"><nobr>});</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:125325;left:154"><nobr>return <font color="#333333">redirect()-&gt;home();</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:125344;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:125396;left:108"><nobr>Now instead of being deep in the details worrying about looping over a data set</nobr></div>
<div style="position:absolute;top:125416;left:108"><nobr>and matching up keys between different arrays, we're operating on the entire</nobr></div>
<div style="position:absolute;top:125437;left:108"><nobr>data set at once, using a more declarative style at a higher level of abstraction.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:124637;left:108"><nobr>131</nobr></div>
<div style="position:absolute;top:124637;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:125563;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=132><b>Page 132</b></a></font></td></tr></table></div><font size=4 face="Times"><span style="font-size:24px;">
<div style="position:absolute;top:125673;left:108"><nobr><b>Ranking a Competition</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:125720;left:108"><nobr>Here's one I ran into on a client project a few months ago. I was working on an</nobr></div>
<div style="position:absolute;top:125740;left:108"><nobr>app for managing competitions and I needed to write some code for ranking</nobr></div>
<div style="position:absolute;top:125761;left:108"><nobr>how the teams did after a competition was finished.</nobr></div>
<div style="position:absolute;top:125794;left:108"><nobr>I started with a collection of team scores that looked something like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:125829;left:127"><nobr>$scores = collect([</nobr></div>
<div style="position:absolute;top:125848;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 76, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'A'</font>],</nobr></div>
<div style="position:absolute;top:125868;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 62, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'B'</font>],</nobr></div>
<div style="position:absolute;top:125887;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:125906;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 86, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'D'</font>],</nobr></div>
<div style="position:absolute;top:125925;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 91, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'E'</font>],</nobr></div>
<div style="position:absolute;top:125944;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'F'</font>],</nobr></div>
<div style="position:absolute;top:125963;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'G'</font>],</nobr></div>
<div style="position:absolute;top:125982;left:154"><nobr>[<font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
<div style="position:absolute;top:126001;left:127"><nobr>]);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:126053;left:108"><nobr>So what does it mean to rank these scores? At first, it might seem as simple as</nobr></div>
<div style="position:absolute;top:126073;left:108"><nobr>just sorting them in reverse order by score and calling it a day.</nobr></div>
<div style="position:absolute;top:126107;left:108"><nobr>That's easy enough using the <font style="font-size:13px">sortByDesc </font>method, which takes the name of the</nobr></div>
<div style="position:absolute;top:126127;left:108"><nobr>field to sort by as a parameter:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:126162;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc(<font color="#df5000">'score'</font>);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:126181;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:126201;left:127"><nobr>//     ['score' =&gt; 91, 'team' =&gt; 'E'],</nobr></div>
<div style="position:absolute;top:126220;left:127"><nobr>//     ['score' =&gt; 86, 'team' =&gt; 'D'],</nobr></div>
<div style="position:absolute;top:126239;left:127"><nobr>//     ['score' =&gt; 82, 'team' =&gt; 'C'],</nobr></div>
<div style="position:absolute;top:126258;left:127"><nobr>//     ['score' =&gt; 82, 'team' =&gt; 'H'],</nobr></div>
<div style="position:absolute;top:126277;left:127"><nobr>//     ['score' =&gt; 76, 'team' =&gt; 'A'],</nobr></div>
<div style="position:absolute;top:126296;left:127"><nobr>//     ['score' =&gt; 67, 'team' =&gt; 'F'],</nobr></div>
<div style="position:absolute;top:126315;left:127"><nobr>//     ['score' =&gt; 67, 'team' =&gt; 'G'],</nobr></div>
<div style="position:absolute;top:126334;left:127"><nobr>//     ['score' =&gt; 62, 'team' =&gt; 'B'],</nobr></div>
<div style="position:absolute;top:126354;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:125609;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:125609;left:627"><nobr>132</nobr></div>
</span></font>

<div style="position:absolute;top:126535;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=133><b>Page 133</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:126645;left:108"><nobr>Now that they are in order, we can just use the array index + 1 as the rank right?</nobr></div>
<div style="position:absolute;top:126665;left:108"><nobr>Not quite, because <font style="font-size:13px">sortByDesc </font>actually maintains the old keys, so despite our</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:126688;left:108"><nobr>$rankedScores <font style="font-size:15px">being in the correct order, they still have explicit keys that don't</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:126706;left:108"><nobr>match the expected ranking:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:126741;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc(<font color="#df5000">'score'</font>);</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:126760;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:126779;left:127"><nobr>//     4 =&gt; ['score' =&gt; 91, 'team' =&gt; 'E'],</nobr></div>
<div style="position:absolute;top:126798;left:127"><nobr>//     3 =&gt; ['score' =&gt; 86, 'team' =&gt; 'D'],</nobr></div>
<div style="position:absolute;top:126817;left:127"><nobr>//     2 =&gt; ['score' =&gt; 82, 'team' =&gt; 'C'],</nobr></div>
<div style="position:absolute;top:126836;left:127"><nobr>//     7 =&gt; ['score' =&gt; 82, 'team' =&gt; 'H'],</nobr></div>
<div style="position:absolute;top:126855;left:127"><nobr>//     0 =&gt; ['score' =&gt; 76, 'team' =&gt; 'A'],</nobr></div>
<div style="position:absolute;top:126874;left:127"><nobr>//     5 =&gt; ['score' =&gt; 67, 'team' =&gt; 'F'],</nobr></div>
<div style="position:absolute;top:126894;left:127"><nobr>//     6 =&gt; ['score' =&gt; 67, 'team' =&gt; 'G'],</nobr></div>
<div style="position:absolute;top:126913;left:127"><nobr>//     1 =&gt; ['score' =&gt; 62, 'team' =&gt; 'B'],</nobr></div>
<div style="position:absolute;top:126932;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:126983;left:108"><nobr>One way to fix this is to call the <font style="font-size:13px">values </font>method on the collection, which removes</nobr></div>
<div style="position:absolute;top:127004;left:108"><nobr>any explicit keys and resets them back to normal:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:127039;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc(<font color="#df5000">'score'</font>)-&gt;values();</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:127058;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:127077;left:127"><nobr>//     0 =&gt; ['score' =&gt; 91, 'team' =&gt; 'E'],</nobr></div>
<div style="position:absolute;top:127096;left:127"><nobr>//     1 =&gt; ['score' =&gt; 86, 'team' =&gt; 'D'],</nobr></div>
<div style="position:absolute;top:127115;left:127"><nobr>//     2 =&gt; ['score' =&gt; 82, 'team' =&gt; 'C'],</nobr></div>
<div style="position:absolute;top:127134;left:127"><nobr>//     3 =&gt; ['score' =&gt; 82, 'team' =&gt; 'H'],</nobr></div>
<div style="position:absolute;top:127153;left:127"><nobr>//     4 =&gt; ['score' =&gt; 76, 'team' =&gt; 'A'],</nobr></div>
<div style="position:absolute;top:127173;left:127"><nobr>//     5 =&gt; ['score' =&gt; 67, 'team' =&gt; 'F'],</nobr></div>
<div style="position:absolute;top:127192;left:127"><nobr>//     6 =&gt; ['score' =&gt; 67, 'team' =&gt; 'G'],</nobr></div>
<div style="position:absolute;top:127211;left:127"><nobr>//     7 =&gt; ['score' =&gt; 62, 'team' =&gt; 'B'],</nobr></div>
<div style="position:absolute;top:127230;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:127282;left:108"><nobr>That's a bit better, but our actual rankings are still oL by one right? I think it</nobr></div>
<div style="position:absolute;top:127302;left:108"><nobr>would be better if we could add an explicit <font style="font-size:13px">rank </font>field to each score that held the</nobr></div>
<div style="position:absolute;top:127322;left:108"><nobr>actual rank number, starting from 1 instead of 0.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:126581;left:108"><nobr>133</nobr></div>
<div style="position:absolute;top:126581;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:127507;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=134><b>Page 134</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:127616;left:108"><nobr><b>Zipping-in the Ranks</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:127657;left:108"><nobr>One way to do this is to <font style="font-size:13px">zip </font>the scores with a list of ranks.</nobr></div>
<div style="position:absolute;top:127691;left:108"><nobr>We can generate the list of ranks using PHP's <font style="font-size:13px">range($start, $end) </font>function to</nobr></div>
<div style="position:absolute;top:127711;left:108"><nobr>create an array starting at <font style="font-size:13px">1 </font>and ending at <font style="font-size:13px">$scores-&gt;count()</font>:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:127746;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc(<font color="#df5000">'score'</font>)</nobr></div>
<div style="position:absolute;top:127765;left:154"><nobr>-&gt;zip(range(1, $scores-&gt;count()));</nobr></div>
</span></font>
<font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:127785;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:127804;left:127"><nobr>//     [['score' =&gt; 91, 'team' =&gt; 'E'], 1],</nobr></div>
<div style="position:absolute;top:127823;left:127"><nobr>//     [['score' =&gt; 86, 'team' =&gt; 'D'], 2],</nobr></div>
<div style="position:absolute;top:127842;left:127"><nobr>//     [['score' =&gt; 82, 'team' =&gt; 'C'], 3],</nobr></div>
<div style="position:absolute;top:127861;left:127"><nobr>//     [['score' =&gt; 82, 'team' =&gt; 'H'], 4],</nobr></div>
<div style="position:absolute;top:127880;left:127"><nobr>//     [['score' =&gt; 76, 'team' =&gt; 'A'], 5],</nobr></div>
<div style="position:absolute;top:127899;left:127"><nobr>//     [['score' =&gt; 67, 'team' =&gt; 'F'], 6],</nobr></div>
<div style="position:absolute;top:127918;left:127"><nobr>//     [['score' =&gt; 67, 'team' =&gt; 'G'], 7],</nobr></div>
<div style="position:absolute;top:127938;left:127"><nobr>//     [['score' =&gt; 62, 'team' =&gt; 'B'], 8],</nobr></div>
<div style="position:absolute;top:127957;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:128008;left:108"><nobr>A nice side eLect of using this approach is that we can drop the <font style="font-size:13px">values </font>call, since</nobr></div>
<div style="position:absolute;top:128029;left:108"><nobr>we don't really need to worry about the keys anymore.</nobr></div>
<div style="position:absolute;top:128062;left:108"><nobr>After zipping the scores with their ranks, we can use <font style="font-size:13px">map </font>to turn the rank into</nobr></div>
<div style="position:absolute;top:128083;left:108"><nobr>an actual field in each score:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:128118;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc(<font color="#df5000">'score'</font>)</nobr></div>
<div style="position:absolute;top:128137;left:154"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:128156;left:154"><nobr>-&gt;map(<font color="#a71d5d">function </font>($scoreAndRank) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:128175;left:181"><nobr>list<font color="#333333">($score, $rank) = $scoreAndRank;</font></nobr></div>
<div style="position:absolute;top:128194;left:181"><nobr>return <font color="#333333">array_merge($score, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:128213;left:208"><nobr>'rank' <font color="#333333">=&gt; $rank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:128232;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:128251;left:154"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:127553;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:127553;left:627"><nobr>134</nobr></div>
</span></font>

<div style="position:absolute;top:128479;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=135><b>Page 135</b></a></font></td></tr></table></div><font size=2 color="#969896" face="Times"><span style="font-size:13px;color:#969896">
<div style="position:absolute;top:128590;left:127"><nobr>// =&gt; [</nobr></div>
<div style="position:absolute;top:128609;left:127"><nobr>//     ['rank' =&gt; 1, 'score' =&gt; 91, 'team' =&gt; 'E'],</nobr></div>
<div style="position:absolute;top:128628;left:127"><nobr>//     ['rank' =&gt; 2, 'score' =&gt; 86, 'team' =&gt; 'D'],</nobr></div>
<div style="position:absolute;top:128647;left:127"><nobr>//     ['rank' =&gt; 3, 'score' =&gt; 82, 'team' =&gt; 'C'],</nobr></div>
<div style="position:absolute;top:128667;left:127"><nobr>//     ['rank' =&gt; 4, 'score' =&gt; 82, 'team' =&gt; 'H'],</nobr></div>
<div style="position:absolute;top:128686;left:127"><nobr>//     ['rank' =&gt; 5, 'score' =&gt; 76, 'team' =&gt; 'A'],</nobr></div>
<div style="position:absolute;top:128705;left:127"><nobr>//     ['rank' =&gt; 6, 'score' =&gt; 67, 'team' =&gt; 'F'],</nobr></div>
<div style="position:absolute;top:128724;left:127"><nobr>//     ['rank' =&gt; 7, 'score' =&gt; 67, 'team' =&gt; 'G'],</nobr></div>
<div style="position:absolute;top:128743;left:127"><nobr>//     ['rank' =&gt; 8, 'score' =&gt; 62, 'team' =&gt; 'B'],</nobr></div>
<div style="position:absolute;top:128762;left:127"><nobr>// ];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:128814;left:108"><nobr>Nice! Time to call it a day right? Not just yet...</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:128860;left:108"><nobr><b>Dealing with Ties</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:128902;left:108"><nobr>If you look closely at our ranked scores, you'll notice there's actually two sets of</nobr></div>
<div style="position:absolute;top:128922;left:108"><nobr>ties:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:128957;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:128976;left:154"><nobr>['rank' =&gt; 1, 'score' =&gt; 91, 'team' =&gt; 'E'],</nobr></div>
<div style="position:absolute;top:128995;left:154"><nobr>['rank' =&gt; 2, 'score' =&gt; 86, 'team' =&gt; 'D'],</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:129014;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:129033;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 4, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:129052;left:154"><nobr>['rank' =&gt; 5, 'score' =&gt; 76, 'team' =&gt; 'A'],</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:129072;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'F'</font>],</nobr></div>
<div style="position:absolute;top:129091;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 7, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'G'</font>],</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:129110;left:154"><nobr>['rank' =&gt; 8, 'score' =&gt; 62, 'team' =&gt; 'B'],</nobr></div>
<div style="position:absolute;top:129129;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:129181;left:108"><nobr>Is it really fair that team C gets third place and team H gets fourth place, even</nobr></div>
<div style="position:absolute;top:129201;left:108"><nobr>though they have the same score? Why not the other way around?</nobr></div>
<div style="position:absolute;top:129235;left:108"><nobr>The way this is handled in <font color="#0000ff"><a href="https://en.wikipedia.org/wiki/Ranking#Standard_competition_ranking_.28.221224.22_ranking.29">standard competition ranking </a></font>is to give tied scores</nobr></div>
<div style="position:absolute;top:129255;left:108"><nobr>the same rank and skip the ranks those scores would've got otherwise. Sounds</nobr></div>
<div style="position:absolute;top:129275;left:108"><nobr>sort of confusing, but really it's pretty intuitive when you see it.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:128525;left:108"><nobr>135</nobr></div>
<div style="position:absolute;top:128525;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:129451;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=136><b>Page 136</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:129561;left:108"><nobr>Here's what our scores would look like adjusted for standard competition</nobr></div>
<div style="position:absolute;top:129581;left:108"><nobr>ranking:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:129616;left:154"><nobr>[</nobr></div>
<div style="position:absolute;top:129635;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 1, <font color="#df5000">'score' </font>=&gt; 91, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'E'</font>],</nobr></div>
<div style="position:absolute;top:129654;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 2, <font color="#df5000">'score' </font>=&gt; 86, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'D'</font>],</nobr></div>
<div style="position:absolute;top:129673;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:129693;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
<div style="position:absolute;top:129712;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 5, <font color="#df5000">'score' </font>=&gt; 76, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'A'</font>],</nobr></div>
<div style="position:absolute;top:129731;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'F'</font>],</nobr></div>
<div style="position:absolute;top:129750;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'G'</font>],</nobr></div>
<div style="position:absolute;top:129769;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 8, <font color="#df5000">'score' </font>=&gt; 62, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'B'</font>],</nobr></div>
<div style="position:absolute;top:129788;left:154"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:129840;left:108"><nobr>Notice that teams C and H both get third place now, but we skip fourth place,</nobr></div>
<div style="position:absolute;top:129860;left:108"><nobr>so team A is still in fifth as they were before.</nobr></div>
<div style="position:absolute;top:129894;left:108"><nobr>Ok sure sounds reasonable, but how on earth do we implement this?!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:129940;left:108"><nobr><b>One Step at a Time</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:129982;left:108"><nobr>I have a confession to make:</nobr></div>
<div style="position:absolute;top:130015;left:108"><nobr>A lot of the time when I'm solving problems with collection pipelines, <i>I have no</i></nobr></div>
<div style="position:absolute;top:130036;left:108"><nobr><i>idea what the solution is going to be before I start programming.</i></nobr></div>
<div style="position:absolute;top:130069;left:108"><nobr>One of the nicest things about collection pipelines is that each step is small and</nobr></div>
<div style="position:absolute;top:130090;left:108"><nobr>discrete. We've talked a bit about how that makes code easier to follow, but it</nobr></div>
<div style="position:absolute;top:130110;left:108"><nobr>also makes code easier to write.</nobr></div>
<div style="position:absolute;top:130144;left:108"><nobr>Instead of having to figure out the whole algorithm in advance, I only ever have</nobr></div>
<div style="position:absolute;top:130164;left:108"><nobr>to worry about getting one step closer to the solution than I am right now. If I</nobr></div>
<div style="position:absolute;top:130184;left:108"><nobr>do that enough times, eventually I end up at the solution.</nobr></div>
<div style="position:absolute;top:130218;left:108"><nobr>So what could we try to get us one step closer to implementing standard</nobr></div>
<div style="position:absolute;top:130238;left:108"><nobr>competition ranking?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:129497;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:129497;left:627"><nobr>136</nobr></div>
</span></font>

<div style="position:absolute;top:130423;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=137><b>Page 137</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:130532;left:108"><nobr><b>Grouping by Score</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:130573;left:108"><nobr>If teams with the same score are all supposed to get the same rank, would</nobr></div>
<div style="position:absolute;top:130594;left:108"><nobr>grouping the results by their score get us any closer to a solution? Let's give it a</nobr></div>
<div style="position:absolute;top:130614;left:108"><nobr>shot.</nobr></div>
<div style="position:absolute;top:130648;left:108"><nobr>We can group items in a collection using the <font style="font-size:13px">groupBy </font>method. <font style="font-size:13px">groupBy </font>takes a</nobr></div>
<div style="position:absolute;top:130668;left:108"><nobr>closure as a parameter, and groups items based on the return value of that</nobr></div>
<div style="position:absolute;top:130688;left:108"><nobr>closure.</nobr></div>
<div style="position:absolute;top:130722;left:108"><nobr>For example, say we wanted to group a list of names by length. We would pass</nobr></div>
<div style="position:absolute;top:130742;left:108"><nobr>a closure that returns the length of each name, like so:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:130777;left:127"><nobr>$names = collect([<font color="#df5000">'Adam'</font>, <font color="#df5000">'Bryan'</font>, <font color="#df5000">'Jane'</font>, <font color="#df5000">'Dan'</font>, <font color="#df5000">'Kayla'</font>]);</nobr></div>
<div style="position:absolute;top:130796;left:127"><nobr>$names-&gt;groupBy(<font color="#a71d5d">function </font>($name) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:130815;left:154"><nobr>return <font color="#333333">strlen($name);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:130834;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:130886;left:108"><nobr>This would give us a collection that looked like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:130921;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:130940;left:154"><nobr>4 =&gt; [<font color="#df5000">'Adam'</font>, <font color="#df5000">'Jane'</font>],</nobr></div>
<div style="position:absolute;top:130959;left:154"><nobr>5 =&gt; [<font color="#df5000">'Bryan'</font>, <font color="#df5000">'Kayla'</font>],</nobr></div>
<div style="position:absolute;top:130978;left:154"><nobr>3 =&gt; [<font color="#df5000">'Dan'</font>],</nobr></div>
<div style="position:absolute;top:130998;left:127"><nobr>]</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:131049;left:108"><nobr>So we can group our results by score by just returning the score of each result:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:130469;left:108"><nobr>137</nobr></div>
<div style="position:absolute;top:130469;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:131395;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=138><b>Page 138</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:131506;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:131525;left:154"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:131544;left:154"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:131563;left:181"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:131583;left:181"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:131602;left:208"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:131621;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:131640;left:154"><nobr>})</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:131659;left:154"><nobr>-&gt;groupBy(<font color="#a71d5d">function </font>($rankedScore) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:131678;left:181"><nobr>return <font color="#333333">$rankedScore[</font><font color="#df5000">'score'</font><font color="#333333">];</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:131697;left:154"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:131749;left:108"><nobr>Conveniently, if you're just grouping by an object property or associative array</nobr></div>
<div style="position:absolute;top:131769;left:108"><nobr>field, you can also just pass a string to <font style="font-size:13px">groupBy</font>, telling it which field to use:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:131804;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:131823;left:154"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:131842;left:154"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:131862;left:181"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:131881;left:181"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:131900;left:208"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:131919;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:131938;left:154"><nobr>})</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:131957;left:154"><nobr>-&gt;groupBy(<font color="#df5000">'score'</font>);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:132009;left:108"><nobr>In our case, that gives us a collection of grouped scores that looks like this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:132044;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:132063;left:154"><nobr>91 =&gt; [</nobr></div>
<div style="position:absolute;top:132082;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 1, <font color="#df5000">'score' </font>=&gt; 91, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'E'</font>]</nobr></div>
<div style="position:absolute;top:132101;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:132120;left:154"><nobr>86 =&gt; [</nobr></div>
<div style="position:absolute;top:132139;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 2, <font color="#df5000">'score' </font>=&gt; 86, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'D'</font>]</nobr></div>
<div style="position:absolute;top:132159;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:132178;left:154"><nobr>82 =&gt; [</nobr></div>
<div style="position:absolute;top:132197;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:132216;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 4, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
<div style="position:absolute;top:132235;left:154"><nobr>],</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:131441;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:131441;left:627"><nobr>138</nobr></div>
</span></font>

<div style="position:absolute;top:132367;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=139><b>Page 139</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:132478;left:154"><nobr>76 =&gt; [</nobr></div>
<div style="position:absolute;top:132497;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 5, <font color="#df5000">'score' </font>=&gt; 76, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'A'</font>]</nobr></div>
<div style="position:absolute;top:132516;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:132535;left:154"><nobr>67 =&gt; [</nobr></div>
<div style="position:absolute;top:132555;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'F'</font>],</nobr></div>
<div style="position:absolute;top:132574;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 7, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'G'</font>],</nobr></div>
<div style="position:absolute;top:132593;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:132612;left:154"><nobr>62 =&gt; [</nobr></div>
<div style="position:absolute;top:132631;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 8, <font color="#df5000">'score' </font>=&gt; 62, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'B'</font>]</nobr></div>
<div style="position:absolute;top:132650;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:132669;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:132721;left:108"><nobr>What next?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:132768;left:108"><nobr><b>Adjusting the Ranks</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:132809;left:108"><nobr>So we have all of our results grouped by score, and we want to make sure any</nobr></div>
<div style="position:absolute;top:132829;left:108"><nobr>teams that have the same score tie for the best possible rank. Let's look at one</nobr></div>
<div style="position:absolute;top:132849;left:108"><nobr>of the ties and see if we can think of a way to do this.</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:132884;left:127"><nobr>$tiedScores = collect([</nobr></div>
<div style="position:absolute;top:132903;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:132922;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 4, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
<div style="position:absolute;top:132942;left:127"><nobr>]);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:132993;left:108"><nobr>Given this group of results, how could we make sure both teams tie for third</nobr></div>
<div style="position:absolute;top:133013;left:108"><nobr>place?</nobr></div>
<div style="position:absolute;top:133047;left:108"><nobr>First we need to find the best rank in group. We can do that by using <font style="font-size:13px">pluck </font>to get</nobr></div>
<div style="position:absolute;top:133067;left:108"><nobr>a collection of every rank, then using the <font style="font-size:13px">min </font>function to find the lowest rank in</nobr></div>
<div style="position:absolute;top:133088;left:108"><nobr>the collection:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:133123;left:127"><nobr>$lowestRank = $tiedScores-&gt;pluck(<font color="#df5000">'rank'</font>)-&gt;min();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:133174;left:108"><nobr>Easy enough! Now we just need to assign that same rank to each team. We can</nobr></div>
<div style="position:absolute;top:133195;left:108"><nobr>do that using <font style="font-size:13px">map </font>to transform each result:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:132413;left:108"><nobr>139</nobr></div>
<div style="position:absolute;top:132413;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:133339;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=140><b>Page 140</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:133450;left:127"><nobr>$lowestRank = $tiedScores-&gt;pluck(<font color="#df5000">'rank'</font>)-&gt;min();</nobr></div>
<div style="position:absolute;top:133488;left:127"><nobr>$adjustedScores = $tiedScores-&gt;map(<font color="#a71d5d">function </font>($rankedScore) <font color="#795da3">use </font>($lowestRank) {</nobr></div>
<div style="position:absolute;top:133507;left:154"><nobr>$rankedScore[<font color="#df5000">'rank'</font>] = $lowestRank;</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:133527;left:154"><nobr>return <font color="#333333">$rankedScore;</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:133546;left:127"><nobr>})</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:133597;left:108"><nobr>We have to be a bit careful here because we're not supposed to mutate inside</nobr></div>
</span></font>
<font size=2 face="Times"><span style="font-size:13px;">
<div style="position:absolute;top:133620;left:108"><nobr>map <font style="font-size:15px">remember? In this case, changing the </font>rank <font style="font-size:15px">key doesn't technically mutate</font></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:133638;left:108"><nobr>anything outside of the closure because arrays in PHP are passed by value, but</nobr></div>
<div style="position:absolute;top:133658;left:108"><nobr>if we were working with objects this would be a big no-no.</nobr></div>
<div style="position:absolute;top:133692;left:108"><nobr>For the sake of consistency I would recommend returning a <i>new </i>array here</nobr></div>
<div style="position:absolute;top:133712;left:108"><nobr>anyways, using <font style="font-size:13px">array_merge </font>to replace the old rank with the new one:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:133747;left:140"><nobr>$lowestRank = $tiedScores-&gt;pluck('rank')-&gt;min();</nobr></div>
<div style="position:absolute;top:133785;left:140"><nobr>$adjustedScores = $tiedScores-&gt;map(function ($rankedScore) use ($lowestRank) {</nobr></div>
</span></font>
<font size=2 color="#bd2c00" face="Times"><span style="font-size:13px;color:#bd2c00">
<div style="position:absolute;top:133804;left:127"><nobr>-     $rankedScore['rank'] = $lowestRank;</nobr></div>
<div style="position:absolute;top:133824;left:127"><nobr>-     return $rankedScore;</nobr></div>
</span></font>
<font size=2 color="#55a532" face="Times"><span style="font-size:13px;color:#55a532">
<div style="position:absolute;top:133843;left:127"><nobr>+     return array_merge($rankedScore, [</nobr></div>
<div style="position:absolute;top:133862;left:127"><nobr>+    </nobr></div>
<div style="position:absolute;top:133862;left:194"><nobr>'rank' =&gt; $lowestRank</nobr></div>
<div style="position:absolute;top:133881;left:127"><nobr>+     ]);</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:133900;left:140"><nobr>})</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:133952;left:108"><nobr>After applying this transformation, we're left with a set of scores that looks like</nobr></div>
<div style="position:absolute;top:133972;left:108"><nobr>this:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:134007;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:134026;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:134045;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
<div style="position:absolute;top:134064;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:134116;left:108"><nobr>Now both teams are tied for third place like we wanted, perfect!</nobr></div>
<div style="position:absolute;top:134150;left:108"><nobr>To apply this transformation to <i>every </i>group of scores, we just need to <font style="font-size:13px">map </font>each</nobr></div>
<div style="position:absolute;top:134170;left:108"><nobr>group through this transformation:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:133385;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:133385;left:627"><nobr>140</nobr></div>
</span></font>

<div style="position:absolute;top:134311;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=141><b>Page 141</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:134422;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:134441;left:154"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:134460;left:154"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:134479;left:181"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:134499;left:181"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:134518;left:208"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:134537;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:134556;left:154"><nobr>})</nobr></div>
<div style="position:absolute;top:134575;left:154"><nobr>-&gt;groupBy('score')</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:134594;left:154"><nobr>-&gt;map(<font color="#a71d5d">function </font>($tiedScores) {</nobr></div>
<div style="position:absolute;top:134613;left:181"><nobr>$lowestRank = $tiedScores-&gt;pluck(<font color="#df5000">'rank'</font>)-&gt;min();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:134652;left:181"><nobr>return <font color="#333333">$tiedScores-&gt;map(</font>function <font color="#333333">($rankedScore) </font><font color="#795da3">use </font><font color="#333333">($lowestRank) {</font></nobr></div>
<div style="position:absolute;top:134671;left:208"><nobr>return <font color="#333333">array_merge($rankedScore, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:134690;left:235"><nobr>'rank' <font color="#333333">=&gt; $lowestRank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:134709;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:134728;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:134747;left:154"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:134799;left:108"><nobr>Now we're left with a collection of adjusted rankings, where any ties are given</nobr></div>
<div style="position:absolute;top:134819;left:108"><nobr>the same rank:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:134854;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:134873;left:154"><nobr>91 =&gt; [</nobr></div>
<div style="position:absolute;top:134892;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 1, <font color="#df5000">'score' </font>=&gt; 91, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'E'</font>]</nobr></div>
<div style="position:absolute;top:134911;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:134931;left:154"><nobr>86 =&gt; [</nobr></div>
<div style="position:absolute;top:134950;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 2, <font color="#df5000">'score' </font>=&gt; 86, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'D'</font>]</nobr></div>
<div style="position:absolute;top:134969;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:134988;left:154"><nobr>82 =&gt; [</nobr></div>
<div style="position:absolute;top:135007;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:135026;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
<div style="position:absolute;top:135045;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:135064;left:154"><nobr>76 =&gt; [</nobr></div>
<div style="position:absolute;top:135084;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 5, <font color="#df5000">'score' </font>=&gt; 76, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'A'</font>]</nobr></div>
<div style="position:absolute;top:135103;left:154"><nobr>],</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:134357;left:108"><nobr>141</nobr></div>
<div style="position:absolute;top:134357;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:135283;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=142><b>Page 142</b></a></font></td></tr></table></div><font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:135394;left:154"><nobr>67 =&gt; [</nobr></div>
<div style="position:absolute;top:135413;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'F'</font>],</nobr></div>
<div style="position:absolute;top:135432;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'G'</font>],</nobr></div>
<div style="position:absolute;top:135451;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:135471;left:154"><nobr>62 =&gt; [</nobr></div>
<div style="position:absolute;top:135490;left:181"><nobr>[<font color="#df5000">'rank' </font>=&gt; 8, <font color="#df5000">'score' </font>=&gt; 62, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'B'</font>]</nobr></div>
<div style="position:absolute;top:135509;left:154"><nobr>],</nobr></div>
<div style="position:absolute;top:135528;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:135580;left:108"><nobr>This is starting to look pretty close to a solution!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:135626;left:108"><nobr><b>Collapse and Sort</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:135667;left:108"><nobr>Right now our results are still grouped by score. We can Natten them down</nobr></div>
<div style="position:absolute;top:135688;left:108"><nobr>using <font style="font-size:13px">collapse</font>, like we've seen in earlier examples:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:135723;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:135742;left:154"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:135761;left:154"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:135780;left:181"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:135799;left:181"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:135818;left:208"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:135837;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:135856;left:154"><nobr>})</nobr></div>
<div style="position:absolute;top:135876;left:154"><nobr>-&gt;groupBy('score')</nobr></div>
<div style="position:absolute;top:135895;left:154"><nobr>-&gt;map(function ($tiedScores) {</nobr></div>
<div style="position:absolute;top:135914;left:181"><nobr>$lowestRank = $tiedScores-&gt;pluck('rank')-&gt;min();</nobr></div>
<div style="position:absolute;top:135952;left:181"><nobr>return $tiedScores-&gt;map(function ($rankedScore) use ($lowestRank) {</nobr></div>
<div style="position:absolute;top:135971;left:208"><nobr>return array_merge($rankedScore, [</nobr></div>
<div style="position:absolute;top:135990;left:235"><nobr>'rank' =&gt; $lowestRank</nobr></div>
<div style="position:absolute;top:136009;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:136029;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:136048;left:154"><nobr>})</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:136067;left:154"><nobr>-&gt;collapse();</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:135329;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:135329;left:627"><nobr>142</nobr></div>
</span></font>

<div style="position:absolute;top:136255;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=143><b>Page 143</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:136365;left:108"><nobr>This leaves us with a Nat collection of scores, properly ranked using standard</nobr></div>
<div style="position:absolute;top:136385;left:108"><nobr>competition ranking:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:136420;left:127"><nobr>[</nobr></div>
<div style="position:absolute;top:136439;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 1, <font color="#df5000">'score' </font>=&gt; 91, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'E'</font>],</nobr></div>
<div style="position:absolute;top:136458;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 2, <font color="#df5000">'score' </font>=&gt; 86, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'D'</font>],</nobr></div>
<div style="position:absolute;top:136477;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'C'</font>],</nobr></div>
<div style="position:absolute;top:136497;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 3, <font color="#df5000">'score' </font>=&gt; 82, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'H'</font>],</nobr></div>
<div style="position:absolute;top:136516;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 5, <font color="#df5000">'score' </font>=&gt; 76, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'A'</font>],</nobr></div>
<div style="position:absolute;top:136535;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'F'</font>],</nobr></div>
<div style="position:absolute;top:136554;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 6, <font color="#df5000">'score' </font>=&gt; 67, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'G'</font>],</nobr></div>
<div style="position:absolute;top:136573;left:154"><nobr>[<font color="#df5000">'rank' </font>=&gt; 8, <font color="#df5000">'score' </font>=&gt; 62, <font color="#df5000">'team' </font>=&gt; <font color="#df5000">'B'</font>],</nobr></div>
<div style="position:absolute;top:136592;left:127"><nobr>];</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:136644;left:108"><nobr>Awesome, we have the result we were looking for!</nobr></div>
<div style="position:absolute;top:136678;left:108"><nobr>Despite this answer being correct at this point, I would still recommend</nobr></div>
<div style="position:absolute;top:136698;left:108"><nobr>finishing this pipeline by sorting it by rank:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:136733;left:127"><nobr>$rankedScores = $scores-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:136752;left:154"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:136771;left:154"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:136790;left:181"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:136809;left:181"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:136828;left:208"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:136848;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:136867;left:154"><nobr>})</nobr></div>
<div style="position:absolute;top:136886;left:154"><nobr>-&gt;groupBy('score')</nobr></div>
<div style="position:absolute;top:136905;left:154"><nobr>-&gt;map(function ($tiedScores) {</nobr></div>
<div style="position:absolute;top:136924;left:181"><nobr>$lowestRank = $tiedScores-&gt;pluck('rank')-&gt;min();</nobr></div>
<div style="position:absolute;top:136962;left:181"><nobr>return $tiedScores-&gt;map(function ($rankedScore) use ($lowestRank) {</nobr></div>
<div style="position:absolute;top:136981;left:208"><nobr>return array_merge($rankedScore, [</nobr></div>
<div style="position:absolute;top:137001;left:235"><nobr>'rank' =&gt; $lowestRank</nobr></div>
<div style="position:absolute;top:137020;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:137039;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:137058;left:154"><nobr>})</nobr></div>
<div style="position:absolute;top:137077;left:154"><nobr>-&gt;collapse();</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:137096;left:154"><nobr>-&gt;sortBy(<font color="#df5000">'rank'</font>);</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:136301;left:108"><nobr>143</nobr></div>
<div style="position:absolute;top:136301;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:137227;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=144><b>Page 144</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:137337;left:108"><nobr>The reason I recommend this is that up to this point, the results were only</nobr></div>
<div style="position:absolute;top:137357;left:108"><nobr>really in the correct order by chance. The <font style="font-size:13px">groupBy </font>method happened to keep</nobr></div>
<div style="position:absolute;top:137377;left:108"><nobr>our results ordered by score even after grouping, but this isn't really a</nobr></div>
<div style="position:absolute;top:137398;left:108"><nobr>guarantee that <font style="font-size:13px">groupBy </font>makes; it's just a coincidence that the grouping</nobr></div>
<div style="position:absolute;top:137418;left:108"><nobr>algorithm happens to return the results in that order.</nobr></div>
<div style="position:absolute;top:137452;left:108"><nobr>Explicitly sorting by rank at the end makes sure that our code will continue to</nobr></div>
<div style="position:absolute;top:137472;left:108"><nobr>work if the grouping algorithm ever changes, so in my opinion it's definitely</nobr></div>
<div style="position:absolute;top:137492;left:108"><nobr>worth the extra operation.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:137539;left:108"><nobr><b>Cleaning Up</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:137580;left:108"><nobr>Here's what this behemoth looks like if we stuL it into a function:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:137615;left:127"><nobr>function <font color="#795da3">rank_scores</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:137634;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:137653;left:154"><nobr>return <font color="#333333">collect($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:137672;left:181"><nobr>-&gt;sortByDesc(<font color="#df5000">'score'</font>)</nobr></div>
<div style="position:absolute;top:137691;left:181"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:137710;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($scoreAndRank) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:137730;left:208"><nobr>list<font color="#333333">($score, $rank) = $scoreAndRank;</font></nobr></div>
<div style="position:absolute;top:137749;left:208"><nobr>return <font color="#333333">array_merge($score, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:137768;left:235"><nobr>'rank' <font color="#333333">=&gt; $rank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:137787;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:137806;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:137825;left:181"><nobr>-&gt;groupBy(<font color="#df5000">'score'</font>)</nobr></div>
<div style="position:absolute;top:137844;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($tiedScores) {</nobr></div>
<div style="position:absolute;top:137863;left:208"><nobr>$lowestRank = $tiedScores-&gt;pluck(<font color="#df5000">'rank'</font>)-&gt;min();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:137902;left:208"><nobr>return <font color="#333333">$tiedScores-&gt;map(</font>function <font color="#333333">($rankedScore) </font><font color="#795da3">use </font><font color="#333333">($lowestRank) {</font></nobr></div>
<div style="position:absolute;top:137921;left:235"><nobr>return <font color="#333333">array_merge($rankedScore, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:137940;left:262"><nobr>'rank' <font color="#333333">=&gt; $lowestRank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:137959;left:235"><nobr>]);</nobr></div>
<div style="position:absolute;top:137978;left:208"><nobr>});</nobr></div>
<div style="position:absolute;top:137997;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:138016;left:181"><nobr>-&gt;collapse();</nobr></div>
<div style="position:absolute;top:138036;left:181"><nobr>-&gt;sortBy(<font color="#df5000">'rank'</font>);</nobr></div>
<div style="position:absolute;top:138055;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:137273;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:137273;left:627"><nobr>144</nobr></div>
</span></font>

<div style="position:absolute;top:138199;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=145><b>Page 145</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:138309;left:108"><nobr>While I promise this is still easier to read than any procedural solution I was</nobr></div>
<div style="position:absolute;top:138329;left:108"><nobr>able to come up with, it's still pretty grim.</nobr></div>
<div style="position:absolute;top:138363;left:108"><nobr>Looking at this function, the first thing I'd like to extract is this second <font style="font-size:13px">map </font>call,</nobr></div>
<div style="position:absolute;top:138383;left:108"><nobr>responsible for assigning the same rank to each tied score:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:138418;left:127"><nobr>function rank_scores($scores)</nobr></div>
<div style="position:absolute;top:138437;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:138456;left:154"><nobr>return collect($scores)</nobr></div>
<div style="position:absolute;top:138475;left:181"><nobr>-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:138495;left:181"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:138514;left:181"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:138533;left:208"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:138552;left:208"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:138571;left:235"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:138590;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:138609;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:138628;left:181"><nobr>-&gt;groupBy('score')</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:138648;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($tiedScores) {</nobr></div>
<div style="position:absolute;top:138667;left:208"><nobr>$lowestRank = $tiedScores-&gt;pluck(<font color="#df5000">'rank'</font>)-&gt;min();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:138705;left:208"><nobr>return <font color="#333333">$tiedScores-&gt;map(</font>function <font color="#333333">($rankedScore) </font><font color="#795da3">use </font><font color="#333333">($lowestRank) {</font></nobr></div>
<div style="position:absolute;top:138724;left:235"><nobr>return <font color="#333333">array_merge($rankedScore, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:138743;left:262"><nobr>'rank' <font color="#333333">=&gt; $lowestRank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:138762;left:235"><nobr>]);</nobr></div>
<div style="position:absolute;top:138781;left:208"><nobr>});</nobr></div>
<div style="position:absolute;top:138801;left:181"><nobr>})</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:138820;left:181"><nobr>-&gt;collapse();</nobr></div>
<div style="position:absolute;top:138839;left:181"><nobr>-&gt;sortBy('rank');</nobr></div>
<div style="position:absolute;top:138858;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:138910;left:108"><nobr>Let's pull the body of that out into a separate function called <font style="font-size:13px">apply_min_rank</font>:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:138245;left:108"><nobr>145</nobr></div>
<div style="position:absolute;top:138245;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:139171;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=146><b>Page 146</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:139282;left:127"><nobr>function rank_scores($scores)</nobr></div>
<div style="position:absolute;top:139301;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:139320;left:154"><nobr>return collect($scores)</nobr></div>
<div style="position:absolute;top:139339;left:181"><nobr>-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:139359;left:181"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:139378;left:181"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:139397;left:208"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:139416;left:208"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:139435;left:235"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:139454;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:139473;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:139492;left:181"><nobr>-&gt;groupBy('score')</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:139512;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($tiedScores) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:139531;left:208"><nobr>return <font color="#333333">apply_min_rank($tiedScores);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:139550;left:181"><nobr>})</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:139569;left:181"><nobr>-&gt;collapse();</nobr></div>
<div style="position:absolute;top:139588;left:181"><nobr>-&gt;sortBy('rank');</nobr></div>
<div style="position:absolute;top:139607;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:139645;left:127"><nobr>function <font color="#795da3">apply_min_rank</font><font color="#333333">($tiedScores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:139665;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:139684;left:154"><nobr>$lowestRank = $tiedScores-&gt;pluck(<font color="#df5000">'rank'</font>)-&gt;min();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:139722;left:154"><nobr>return <font color="#333333">$tiedScores-&gt;map(</font>function <font color="#333333">($rankedScore) </font><font color="#795da3">use </font><font color="#333333">($lowestRank) {</font></nobr></div>
<div style="position:absolute;top:139741;left:181"><nobr>return <font color="#333333">array_merge($rankedScore, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:139760;left:208"><nobr>'rank' <font color="#333333">=&gt; $lowestRank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:139779;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:139798;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:139818;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:139869;left:108"><nobr>That's a <i>little </i>better. But even so, this still isn't that expressive, and now there's</nobr></div>
<div style="position:absolute;top:139889;left:108"><nobr>not really anything meaningful to extract.</nobr></div>
<div style="position:absolute;top:139923;left:108"><nobr>Or is there?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:139217;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:139217;left:627"><nobr>146</nobr></div>
</span></font>

<div style="position:absolute;top:140143;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=147><b>Page 147</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:140252;left:108"><nobr><b>Grouping Operations</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:140293;left:108"><nobr>Looking at our <font style="font-size:13px">rank_scores </font>function, there's a few steps that stand out to me as</nobr></div>
<div style="position:absolute;top:140314;left:108"><nobr>being part of something bigger.</nobr></div>
<div style="position:absolute;top:140347;left:108"><nobr>For example, together these three steps are used to <i>assign the initial rankings </i>to</nobr></div>
<div style="position:absolute;top:140368;left:108"><nobr>the scores:</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:140403;left:127"><nobr>function rank_scores($scores)</nobr></div>
<div style="position:absolute;top:140422;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:140441;left:154"><nobr>return collect($scores)</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:140460;left:181"><nobr>-&gt;sortByDesc(<font color="#df5000">'score'</font>)</nobr></div>
<div style="position:absolute;top:140479;left:181"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:140498;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($scoreAndRank) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:140517;left:208"><nobr>list<font color="#333333">($score, $rank) = $scoreAndRank;</font></nobr></div>
<div style="position:absolute;top:140536;left:208"><nobr>return <font color="#333333">array_merge($score, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:140556;left:235"><nobr>'rank' <font color="#333333">=&gt; $rank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:140575;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:140594;left:181"><nobr>})</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:140613;left:181"><nobr>-&gt;groupBy('score')</nobr></div>
<div style="position:absolute;top:140632;left:181"><nobr>-&gt;map(function ($tiedScores) {</nobr></div>
<div style="position:absolute;top:140651;left:208"><nobr>return apply_min_rank($tiedScores);</nobr></div>
<div style="position:absolute;top:140670;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:140689;left:181"><nobr>-&gt;collapse();</nobr></div>
<div style="position:absolute;top:140709;left:181"><nobr>-&gt;sortBy('rank');</nobr></div>
<div style="position:absolute;top:140728;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:140779;left:108"><nobr>Similarly, these three steps are used to <i>adjust the rankings for tied scores:</i></nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:140814;left:127"><nobr>function rank_scores($scores)</nobr></div>
<div style="position:absolute;top:140833;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:140853;left:154"><nobr>return collect($scores)</nobr></div>
<div style="position:absolute;top:140872;left:181"><nobr>-&gt;sortByDesc('score')</nobr></div>
<div style="position:absolute;top:140891;left:181"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:140189;left:108"><nobr>147</nobr></div>
<div style="position:absolute;top:140189;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:141115;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=148><b>Page 148</b></a></font></td></tr></table></div><font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:141226;left:181"><nobr>-&gt;map(function ($scoreAndRank) {</nobr></div>
<div style="position:absolute;top:141245;left:208"><nobr>list($score, $rank) = $scoreAndRank;</nobr></div>
<div style="position:absolute;top:141264;left:208"><nobr>return array_merge($score, [</nobr></div>
<div style="position:absolute;top:141283;left:235"><nobr>'rank' =&gt; $rank</nobr></div>
<div style="position:absolute;top:141303;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:141322;left:181"><nobr>})</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:141341;left:181"><nobr>-&gt;groupBy(<font color="#df5000">'score'</font>)</nobr></div>
<div style="position:absolute;top:141360;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($tiedScores) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:141379;left:208"><nobr>return <font color="#333333">apply_min_rank($tiedScores);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:141398;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:141417;left:181"><nobr>-&gt;collapse();</nobr></div>
</span></font>
<font size=2 color="#cccccc" face="Times"><span style="font-size:13px;color:#cccccc">
<div style="position:absolute;top:141436;left:181"><nobr>-&gt;sortBy('rank');</nobr></div>
<div style="position:absolute;top:141456;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:141507;left:108"><nobr>What would it look like to extract these groups of operations into their own</nobr></div>
<div style="position:absolute;top:141527;left:108"><nobr>functions?</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:141574;left:108"><nobr><b>Breaking the Chain</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:141615;left:108"><nobr>Here's what an <font style="font-size:13px">assign_initial_rankings </font>function would look like:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:141650;left:127"><nobr>function <font color="#795da3">assign_initial_rankings</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:141669;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:141688;left:154"><nobr>return <font color="#333333">$scores-&gt;sortByDesc(</font><font color="#df5000">'score'</font><font color="#333333">)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:141708;left:181"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:141727;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($scoreAndRank) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:141746;left:208"><nobr>list<font color="#333333">($score, $rank) = $scoreAndRank;</font></nobr></div>
<div style="position:absolute;top:141765;left:208"><nobr>return <font color="#333333">array_merge($score, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:141784;left:235"><nobr>'rank' <font color="#333333">=&gt; $rank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:141803;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:141822;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:141841;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:141893;left:108"><nobr>...and here's what <font style="font-size:13px">adjust_rankings_for_ties </font>would look like:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:141161;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:141161;left:627"><nobr>148</nobr></div>
</span></font>

<div style="position:absolute;top:142087;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=149><b>Page 149</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:142198;left:127"><nobr>function <font color="#795da3">adjust_rankings_for_ties</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:142217;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:142236;left:154"><nobr>return <font color="#333333">$scores-&gt;groupBy(</font><font color="#df5000">'score'</font><font color="#333333">)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:142255;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($tiedScores) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:142275;left:208"><nobr>return <font color="#333333">apply_min_rank($tiedScores);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:142294;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:142313;left:181"><nobr>-&gt;collapse();</nobr></div>
<div style="position:absolute;top:142332;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:142384;left:108"><nobr>Both are simple enough to understand when they are broken out like this, but</nobr></div>
<div style="position:absolute;top:142404;left:108"><nobr>how do we integrate these into our pipeline? It turns out we can't, we'd have to</nobr></div>
<div style="position:absolute;top:142424;left:108"><nobr>break the pipeline and use intermediate variables, like this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:142459;left:127"><nobr>function <font color="#795da3">rank_scores</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:142478;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:142497;left:154"><nobr>$rankedScores = assign_initial_rankings(collect($scores));</nobr></div>
<div style="position:absolute;top:142516;left:154"><nobr>$adjustedScores = adjust_rankings_for_ties($rankedScores);</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:142536;left:154"><nobr>return <font color="#333333">$adjustedScores-&gt;sortBy(</font><font color="#df5000">'rank'</font><font color="#333333">);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:142555;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:142606;left:108"><nobr>We could add these functions as methods on our collection using macros, but</nobr></div>
<div style="position:absolute;top:142627;left:108"><nobr>they don't really make sense as collection methods. Both of these methods are</nobr></div>
<div style="position:absolute;top:142647;left:108"><nobr>very domain-specific, and they don't really belong with the rest of the general</nobr></div>
<div style="position:absolute;top:142667;left:108"><nobr>purpose collection operations.</nobr></div>
<div style="position:absolute;top:142701;left:108"><nobr>For a long time, I just accepted this limitation and broke out of the pipeline</nobr></div>
<div style="position:absolute;top:142721;left:108"><nobr>when I needed to, but recently I stumbled on a pattern that gives me the best</nobr></div>
<div style="position:absolute;top:142741;left:108"><nobr>of both worlds.</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:20px;">
<div style="position:absolute;top:142788;left:108"><nobr><b>The Pipe Macro</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:142829;left:108"><nobr>Check out this very simple little macro:</nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:142864;left:127"><nobr>Collection::macro(<font color="#df5000">'pipe'</font>, <font color="#a71d5d">function </font>($callback) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:142883;left:154"><nobr>return <font color="#333333">$callback($this);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:142902;left:127"><nobr>});</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:142133;left:108"><nobr>149</nobr></div>
<div style="position:absolute;top:142133;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:143059;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=150><b>Page 150</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:143169;left:108"><nobr>All it does is define a method called <font style="font-size:13px">pipe </font>that takes a callback, passes the</nobr></div>
<div style="position:absolute;top:143189;left:108"><nobr>collection into the callback, and returns the result.</nobr></div>
<div style="position:absolute;top:143223;left:108"><nobr>Brutally simple, but look at what it lets us do:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:143258;left:127"><nobr>function <font color="#795da3">rank_scores</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:143277;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:143296;left:154"><nobr>return <font color="#333333">collect($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:143315;left:181"><nobr>-&gt;pipe(<font color="#a71d5d">function </font>($scores) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:143334;left:208"><nobr>return <font color="#333333">assign_initial_rankings($scores);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:143353;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:143373;left:181"><nobr>-&gt;pipe(<font color="#a71d5d">function </font>($rankedScores) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:143392;left:208"><nobr>return <font color="#333333">adjust_rankings_for_ties($rankedScores);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:143411;left:181"><nobr>})</nobr></div>
<div style="position:absolute;top:143430;left:181"><nobr>-&gt;sortBy(<font color="#df5000">'rank'</font>);</nobr></div>
<div style="position:absolute;top:143449;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:143501;left:108"><nobr>We've got our pipeline back! Now it's extremely easy to &quot;pipe&quot; our collection</nobr></div>
<div style="position:absolute;top:143521;left:108"><nobr>through domain specific transformations, saving us from reverting back to</nobr></div>
<div style="position:absolute;top:143541;left:108"><nobr>temporary variables, or bloating up the collection class with domain-specific</nobr></div>
<div style="position:absolute;top:143561;left:108"><nobr>macros.</nobr></div>
<div style="position:absolute;top:143595;left:108"><nobr>PHP lets you treat a string as a callback if it matches the name of a function, so</nobr></div>
<div style="position:absolute;top:143615;left:108"><nobr>we can even do this:</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:143650;left:127"><nobr>function <font color="#795da3">rank_scores</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:143670;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:143689;left:154"><nobr>return <font color="#333333">collect($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:143708;left:181"><nobr>-&gt;pipe(<font color="#df5000">'assign_initial_rankings'</font>)</nobr></div>
<div style="position:absolute;top:143727;left:181"><nobr>-&gt;pipe(<font color="#df5000">'adjust_rankings_for_ties'</font>)</nobr></div>
<div style="position:absolute;top:143746;left:181"><nobr>-&gt;sortBy(<font color="#df5000">'rank'</font>);</nobr></div>
<div style="position:absolute;top:143765;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:143817;left:108"><nobr>Doesn't get much more expressive than that.</nobr></div>
<div style="position:absolute;top:143851;left:108"><nobr>Here's the whole thing for completeness' sake:</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:143105;left:108"><nobr>Chapter 17. Ranking a Competition</nobr></div>
<div style="position:absolute;top:143105;left:627"><nobr>150</nobr></div>
</span></font>

<div style="position:absolute;top:144031;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=151><b>Page 151</b></a></font></td></tr></table></div><font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144142;left:127"><nobr>function <font color="#795da3">rank_scores</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144161;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144180;left:154"><nobr>return <font color="#333333">collect($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144199;left:181"><nobr>-&gt;pipe(<font color="#df5000">'assign_initial_rankings'</font>)</nobr></div>
<div style="position:absolute;top:144219;left:181"><nobr>-&gt;pipe(<font color="#df5000">'adjust_rankings_for_ties'</font>)</nobr></div>
<div style="position:absolute;top:144238;left:181"><nobr>-&gt;sortBy(<font color="#df5000">'rank'</font>);</nobr></div>
<div style="position:absolute;top:144257;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144295;left:127"><nobr>function <font color="#795da3">assign_initial_rankings</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144314;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144333;left:154"><nobr>return <font color="#333333">$scores-&gt;sortByDesc(</font><font color="#df5000">'score'</font><font color="#333333">)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144352;left:181"><nobr>-&gt;zip(range(1, $scores-&gt;count()))</nobr></div>
<div style="position:absolute;top:144372;left:181"><nobr>-&gt;map(<font color="#a71d5d">function </font>($scoreAndRank) {</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144391;left:208"><nobr>list<font color="#333333">($score, $rank) = $scoreAndRank;</font></nobr></div>
<div style="position:absolute;top:144410;left:208"><nobr>return <font color="#333333">array_merge($score, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:144429;left:235"><nobr>'rank' <font color="#333333">=&gt; $rank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144448;left:208"><nobr>]);</nobr></div>
<div style="position:absolute;top:144467;left:181"><nobr>});</nobr></div>
<div style="position:absolute;top:144486;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144525;left:127"><nobr>function <font color="#795da3">adjust_rankings_for_ties</font><font color="#333333">($scores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144544;left:127"><nobr>{</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144563;left:154"><nobr>return <font color="#333333">$scores-&gt;groupBy(</font><font color="#df5000">'score'</font><font color="#333333">)-&gt;map(</font>function <font color="#333333">($tiedScores) {</font></nobr></div>
<div style="position:absolute;top:144582;left:181"><nobr>return <font color="#333333">apply_min_rank($tiedScores);</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144601;left:154"><nobr>})-&gt;collapse();</nobr></div>
<div style="position:absolute;top:144620;left:127"><nobr>}</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144658;left:127"><nobr>function <font color="#795da3">apply_min_rank</font><font color="#333333">($tiedScores)</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144678;left:127"><nobr>{</nobr></div>
<div style="position:absolute;top:144697;left:154"><nobr>$lowestRank = $tiedScores-&gt;pluck(<font color="#df5000">'rank'</font>)-&gt;min();</nobr></div>
</span></font>
<font size=2 color="#a71d5d" face="Times"><span style="font-size:13px;color:#a71d5d">
<div style="position:absolute;top:144716;left:154"><nobr>return <font color="#333333">$tiedScores-&gt;map(</font>function <font color="#333333">($rankedScore) </font><font color="#795da3">use </font><font color="#333333">($lowestRank) {</font></nobr></div>
<div style="position:absolute;top:144735;left:181"><nobr>return <font color="#333333">array_merge($rankedScore, [</font></nobr></div>
</span></font>
<font size=2 color="#df5000" face="Times"><span style="font-size:13px;color:#df5000">
<div style="position:absolute;top:144754;left:208"><nobr>'rank' <font color="#333333">=&gt; $lowestRank</font></nobr></div>
</span></font>
<font size=2 color="#333333" face="Times"><span style="font-size:13px;color:#333333">
<div style="position:absolute;top:144773;left:181"><nobr>]);</nobr></div>
<div style="position:absolute;top:144792;left:154"><nobr>});</nobr></div>
<div style="position:absolute;top:144811;left:127"><nobr>}</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:144863;left:108"><nobr>Not bad for a pretty complicated problem!</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:144077;left:108"><nobr>151</nobr></div>
<div style="position:absolute;top:144077;left:509"><nobr>Part 2. A Lot of Practice</nobr></div>
</span></font>

<div style="position:absolute;top:145003;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=152><b>Page 152</b></a></font></td></tr></table></div><font size=5 face="Times"><span style="font-size:34px;">
<div style="position:absolute;top:145149;left:108"><nobr><b>Afterword</b></nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:145275;left:108"><nobr>For many years, I used anonymous functions in my code when interacting with</nobr></div>
<div style="position:absolute;top:145295;left:108"><nobr>various libraries and didn't think much of it. jQuery needs a callback to run</nobr></div>
<div style="position:absolute;top:145315;left:108"><nobr>after I make an AJAX request? Sure, but I never really understood why I would</nobr></div>
<div style="position:absolute;top:145336;left:108"><nobr>ever use them in <i>my </i>code. What benefits could anonymous functions really</nobr></div>
<div style="position:absolute;top:145356;left:108"><nobr>give <i>me?</i></nobr></div>
<div style="position:absolute;top:145390;left:108"><nobr>It wasn't until I first learned how to use <font style="font-size:13px">array_map </font>that the power of anonymous</nobr></div>
<div style="position:absolute;top:145410;left:108"><nobr>functions really started to click for me. I couldn't believe how many times I</nobr></div>
<div style="position:absolute;top:145430;left:108"><nobr>had used that pattern in the past and never once thought about how it could be</nobr></div>
<div style="position:absolute;top:145450;left:108"><nobr>abstracted! If there had been a function for doing that all along, what else was I</nobr></div>
<div style="position:absolute;top:145471;left:108"><nobr>missing?</nobr></div>
<div style="position:absolute;top:145504;left:108"><nobr>After map I learned filter, then reduce, and at that point I was hooked. Once I</nobr></div>
<div style="position:absolute;top:145525;left:108"><nobr>combined this with collection objects to allow the pipeline style we've covered</nobr></div>
<div style="position:absolute;top:145545;left:108"><nobr>in this book, I felt like a whole new world of solutions had opened up to me.</nobr></div>
<div style="position:absolute;top:145579;left:108"><nobr>It's hard for me to put in to words, but there's something beautiful about taking</nobr></div>
<div style="position:absolute;top:145599;left:108"><nobr>some data, piping it through a series of discrete transformations, and having</nobr></div>
<div style="position:absolute;top:145619;left:108"><nobr>the solution come out on the other side. There's something clean and pure</nobr></div>
<div style="position:absolute;top:145639;left:108"><nobr>about it that makes it an extremely seductive style of programming.</nobr></div>
<div style="position:absolute;top:145673;left:108"><nobr>To this day, every time I encounter a new problem the first thing I think is &quot;how</nobr></div>
<div style="position:absolute;top:145693;left:108"><nobr>can I solve this with a collection pipeline?&quot;, and I am <i>continually amazed </i>by just</nobr></div>
<div style="position:absolute;top:145714;left:108"><nobr>how often I can use this approach to find an elegant solution.</nobr></div>
<div style="position:absolute;top:145747;left:108"><nobr>If you're excited by the ideas in this book, the best way to get comfortable with</nobr></div>
<div style="position:absolute;top:145768;left:108"><nobr>them is to practice in your own code. Every time you want to write a loop, force</nobr></div>
<div style="position:absolute;top:145788;left:108"><nobr>yourself to solve the problem with a collection. <i>Never </i>write a <font style="font-size:13px">foreach </font>loop ever</nobr></div>
<div style="position:absolute;top:145808;left:108"><nobr>again.</nobr></div>
</span></font>

<div style="position:absolute;top:145975;left:0"><hr><table border=0 width=100%><tr><td bgcolor=eeeeee align=right><font face=arial,sans-serif><a name=153><b>Page 153</b></a></font></td></tr></table></div><font size=3 face="Times"><span style="font-size:15px;">
<div style="position:absolute;top:146085;left:108"><nobr>You'll be amazed what you can do with this style of programming if you push</nobr></div>
<div style="position:absolute;top:146105;left:108"><nobr>it hard enough. I still haven't found the limit myself.</nobr></div>
<div style="position:absolute;top:146139;left:461"><nobr>– Adam Wathan, May 2016</nobr></div>
</span></font>
<font size=3 face="Times"><span style="font-size:14px;">
<div style="position:absolute;top:146021;left:108"><nobr>153</nobr></div>
<div style="position:absolute;top:146021;left:543"><nobr>Part 3. Afterword</nobr></div>
</span></font>
</body>
</html>
